{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/es6-promise/dist/es6-promise.js","node_modules/events/events.js","node_modules/process/browser.js","node_modules/webworkify/index.js","src/config.js","src/core/features.js","src/core/media-info.js","src/core/media-segment-info.js","src/core/mse-controller.js","src/core/mse-events.js","src/core/transmuxer.js","src/core/transmuxing-controller.js","src/core/transmuxing-events.js","src/core/transmuxing-worker.js","src/demux/amf-parser.js","src/demux/demux-errors.js","src/demux/exp-golomb.js","src/demux/flv-demuxer.js","src/demux/sps-parser.js","src/flv.js","src/index.js","src/io/fetch-stream-loader.js","src/io/io-controller.js","src/io/loader.js","src/io/param-seek-handler.js","src/io/range-seek-handler.js","src/io/speed-sampler.js","src/io/websocket-loader.js","src/io/xhr-moz-chunked-loader.js","src/io/xhr-msstream-loader.js","src/io/xhr-range-loader.js","src/player/flv-player.js","src/player/native-player.js","src/player/player-errors.js","src/player/player-events.js","src/remux/aac-silent.js","src/remux/mp4-generator.js","src/remux/mp4-remuxer.js","src/utils/browser.js","src/utils/exception.js","src/utils/logger.js","src/utils/logging-control.js","src/utils/polyfill.js","src/utils/utf8-conv.js"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC/pgxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","file":"flv.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.6+9869a4bc\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar TRY_CATCH_ERROR = { error: null };\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    TRY_CATCH_ERROR.error = error;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === TRY_CATCH_ERROR) {\n      reject(promise, TRY_CATCH_ERROR.error);\n      TRY_CATCH_ERROR.error = null;\n    } else if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = void 0,\n      failed = void 0;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (failed) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = getThen(entry);\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        handleMaybeThenable(promise, entry, _then);\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n//# sourceMappingURL=es6-promise.map\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var bundleFn = arguments[3];\nvar sources = arguments[4];\nvar cache = arguments[5];\n\nvar stringify = JSON.stringify;\n\nmodule.exports = function (fn, options) {\n    var wkey;\n    var cacheKeys = Object.keys(cache);\n\n    for (var i = 0, l = cacheKeys.length; i < l; i++) {\n        var key = cacheKeys[i];\n        var exp = cache[key].exports;\n        // Using babel as a transpiler to use esmodule, the export will always\n        // be an object with the default export as a property of it. To ensure\n        // the existing api and babel esmodule exports are both supported we\n        // check for both\n        if (exp === fn || exp && exp.default === fn) {\n            wkey = key;\n            break;\n        }\n    }\n\n    if (!wkey) {\n        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n        var wcache = {};\n        for (var i = 0, l = cacheKeys.length; i < l; i++) {\n            var key = cacheKeys[i];\n            wcache[key] = key;\n        }\n        sources[wkey] = [\n            'function(require,module,exports){' + fn + '(self); }',\n            wcache\n        ];\n    }\n    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);\n\n    var scache = {}; scache[wkey] = wkey;\n    sources[skey] = [\n        'function(require,module,exports){' +\n            // try to call default if defined to also support babel esmodule exports\n            'var f = require(' + stringify(wkey) + ');' +\n            '(f.default ? f.default : f)(self);' +\n        '}',\n        scache\n    ];\n\n    var workerSources = {};\n    resolveSources(skey);\n\n    function resolveSources(key) {\n        workerSources[key] = true;\n\n        for (var depPath in sources[key][1]) {\n            var depKey = sources[key][1][depPath];\n            if (!workerSources[depKey]) {\n                resolveSources(depKey);\n            }\n        }\n    }\n\n    var src = '(' + bundleFn + ')({'\n        + Object.keys(workerSources).map(function (key) {\n            return stringify(key) + ':['\n                + sources[key][0]\n                + ',' + stringify(sources[key][1]) + ']'\n            ;\n        }).join(',')\n        + '},{},[' + stringify(skey) + '])'\n    ;\n\n    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n\n    var blob = new Blob([src], { type: 'text/javascript' });\n    if (options && options.bare) { return blob; }\n    var workerUrl = URL.createObjectURL(blob);\n    var worker = new Worker(workerUrl);\n    worker.objectURL = workerUrl;\n    return worker;\n};\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const defaultConfig = {\n    enableWorker: false,\n    enableStashBuffer: true,\n    stashInitialSize: undefined,\n\n    isLive: false,\n\n    lazyLoad: true,\n    lazyLoadMaxDuration: 3 * 60,\n    lazyLoadRecoverDuration: 30,\n    deferLoadAfterSourceOpen: true,\n\n    // autoCleanupSourceBuffer: default as false, leave unspecified\n    autoCleanupMaxBackwardDuration: 3 * 60,\n    autoCleanupMinBackwardDuration: 2 * 60,\n\n    statisticsInfoReportInterval: 600,\n\n    fixAudioTimestampGap: true,\n\n    accurateSeek: false,\n    seekType: 'range',  // [range, param, custom]\n    seekParamStart: 'bstart',\n    seekParamEnd: 'bend',\n    rangeLoadZeroStart: false,\n    customSeekHandler: undefined,\n    reuseRedirectedURL: false,\n    // referrerPolicy: leave as unspecified\n\n    headers: undefined,\n    customLoader: undefined\n};\n\nexport function createDefaultConfig() {\n    return Object.assign({}, defaultConfig);\n}","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport IOController from '../io/io-controller.js';\nimport {createDefaultConfig} from '../config.js';\n\nclass Features {\n\n    static supportMSEH264Playback() {\n        return window.MediaSource &&\n               window.MediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n    }\n\n    static supportNetworkStreamIO() {\n        let ioctl = new IOController({}, createDefaultConfig());\n        let loaderType = ioctl.loaderType;\n        ioctl.destroy();\n        return loaderType == 'fetch-stream-loader' || loaderType == 'xhr-moz-chunked-loader';\n    }\n\n    static getNetworkLoaderTypeName() {\n        let ioctl = new IOController({}, createDefaultConfig());\n        let loaderType = ioctl.loaderType;\n        ioctl.destroy();\n        return loaderType;\n    }\n\n    static supportNativeMediaPlayback(mimeType) {\n        if (Features.videoElement == undefined) {\n            Features.videoElement = window.document.createElement('video');\n        }\n        let canPlay = Features.videoElement.canPlayType(mimeType);\n        return canPlay === 'probably' || canPlay == 'maybe';\n    }\n\n    static getFeatureList() {\n        let features = {\n            mseFlvPlayback: false,\n            mseLiveFlvPlayback: false,\n            networkStreamIO: false,\n            networkLoaderName: '',\n            nativeMP4H264Playback: false,\n            nativeWebmVP8Playback: false,\n            nativeWebmVP9Playback: false\n        };\n\n        features.mseFlvPlayback = Features.supportMSEH264Playback();\n        features.networkStreamIO = Features.supportNetworkStreamIO();\n        features.networkLoaderName = Features.getNetworkLoaderTypeName();\n        features.mseLiveFlvPlayback = features.mseFlvPlayback && features.networkStreamIO;\n        features.nativeMP4H264Playback = Features.supportNativeMediaPlayback('video/mp4; codecs=\"avc1.42001E, mp4a.40.2\"');\n        features.nativeWebmVP8Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp8.0, vorbis\"');\n        features.nativeWebmVP9Playback = Features.supportNativeMediaPlayback('video/webm; codecs=\"vp9\"');\n\n        return features;\n    }\n\n}\n\nexport default Features;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass MediaInfo {\n\n    constructor() {\n        this.mimeType = null;\n        this.duration = null;\n\n        this.hasAudio = null;\n        this.hasVideo = null;\n        this.audioCodec = null;\n        this.videoCodec = null;\n        this.audioDataRate = null;\n        this.videoDataRate = null;\n\n        this.audioSampleRate = null;\n        this.audioChannelCount = null;\n\n        this.width = null;\n        this.height = null;\n        this.fps = null;\n        this.profile = null;\n        this.level = null;\n        this.refFrames = null;\n        this.chromaFormat = null;\n        this.sarNum = null;\n        this.sarDen = null;\n\n        this.metadata = null;\n        this.segments = null;  // MediaInfo[]\n        this.segmentCount = null;\n        this.hasKeyframesIndex = null;\n        this.keyframesIndex = null;\n    }\n\n    isComplete() {\n        let audioInfoComplete = (this.hasAudio === false) ||\n                                (this.hasAudio === true &&\n                                 this.audioCodec != null &&\n                                 this.audioSampleRate != null &&\n                                 this.audioChannelCount != null);\n\n        let videoInfoComplete = (this.hasVideo === false) ||\n                                (this.hasVideo === true &&\n                                 this.videoCodec != null &&\n                                 this.width != null &&\n                                 this.height != null &&\n                                 this.fps != null &&\n                                 this.profile != null &&\n                                 this.level != null &&\n                                 this.refFrames != null &&\n                                 this.chromaFormat != null &&\n                                 this.sarNum != null &&\n                                 this.sarDen != null);\n\n        // keyframesIndex may not be present\n        return this.mimeType != null &&\n               this.duration != null &&\n               this.metadata != null &&\n               this.hasKeyframesIndex != null &&\n               audioInfoComplete &&\n               videoInfoComplete;\n    }\n\n    isSeekable() {\n        return this.hasKeyframesIndex === true;\n    }\n\n    getNearestKeyframe(milliseconds) {\n        if (this.keyframesIndex == null) {\n            return null;\n        }\n\n        let table = this.keyframesIndex;\n        let keyframeIdx = this._search(table.times, milliseconds);\n\n        return {\n            index: keyframeIdx,\n            milliseconds: table.times[keyframeIdx],\n            fileposition: table.filepositions[keyframeIdx]\n        };\n    }\n\n    _search(list, value) {\n        let idx = 0;\n\n        let last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        if (value < list[0]) {\n            idx = 0;\n            lbound = ubound + 1;  // skip search\n        }\n\n        while (lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if (mid === last || (value >= list[mid] && value < list[mid + 1])) {\n                idx = mid;\n                break;\n            } else if (list[mid] < value) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n\n        return idx;\n    }\n\n}\n\nexport default MediaInfo;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Represents an media sample (audio / video)\nexport class SampleInfo {\n\n    constructor(dts, pts, duration, originalDts, isSync) {\n        this.dts = dts;\n        this.pts = pts;\n        this.duration = duration;\n        this.originalDts = originalDts;\n        this.isSyncPoint = isSync;\n        this.fileposition = null;\n    }\n\n}\n\n// Media Segment concept is defined in Media Source Extensions spec.\n// Particularly in ISO BMFF format, an Media Segment contains a moof box followed by a mdat box.\nexport class MediaSegmentInfo {\n\n    constructor() {\n        this.beginDts = 0;\n        this.endDts = 0;\n        this.beginPts = 0;\n        this.endPts = 0;\n        this.originalBeginDts = 0;\n        this.originalEndDts = 0;\n        this.syncPoints = [];     // SampleInfo[n], for video IDR frames only\n        this.firstSample = null;  // SampleInfo\n        this.lastSample = null;   // SampleInfo\n    }\n\n    appendSyncPoint(sampleInfo) {  // also called Random Access Point\n        sampleInfo.isSyncPoint = true;\n        this.syncPoints.push(sampleInfo);\n    }\n\n}\n\n// Ordered list for recording video IDR frames, sorted by originalDts\nexport class IDRSampleList {\n\n    constructor() {\n        this._list = [];\n    }\n\n    clear() {\n        this._list = [];\n    }\n\n    appendArray(syncPoints) {\n        let list = this._list;\n\n        if (syncPoints.length === 0) {\n            return;\n        }\n\n        if (list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {\n            this.clear();\n        }\n\n        Array.prototype.push.apply(list, syncPoints);\n    }\n\n    getLastSyncPointBeforeDts(dts) {\n        if (this._list.length == 0) {\n            return null;\n        }\n\n        let list = this._list;\n        let idx = 0;\n        let last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        if (dts < list[0].dts) {\n            idx = 0;\n            lbound = ubound + 1;\n        }\n\n        while (lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if (mid === last || (dts >= list[mid].dts && dts < list[mid + 1].dts)) {\n                idx = mid;\n                break;\n            } else if (list[mid].dts < dts) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n        return this._list[idx];\n    }\n\n}\n\n// Data structure for recording information of media segments in single track.\nexport class MediaSegmentInfoList {\n\n    constructor(type) {\n        this._type = type;\n        this._list = [];\n        this._lastAppendLocation = -1;  // cached last insert location\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get length() {\n        return this._list.length;\n    }\n\n    isEmpty() {\n        return this._list.length === 0;\n    }\n\n    clear() {\n        this._list = [];\n        this._lastAppendLocation = -1;\n    }\n\n    _searchNearestSegmentBefore(originalBeginDts) {\n        let list = this._list;\n        if (list.length === 0) {\n            return -2;\n        }\n        let last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        let idx = 0;\n\n        if (originalBeginDts < list[0].originalBeginDts) {\n            idx = -1;\n            return idx;\n        }\n\n        while (lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if (mid === last || (originalBeginDts > list[mid].lastSample.originalDts &&\n                                (originalBeginDts < list[mid + 1].originalBeginDts))) {\n                idx = mid;\n                break;\n            } else if (list[mid].originalBeginDts < originalBeginDts) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n        return idx;\n    }\n\n    _searchNearestSegmentAfter(originalBeginDts) {\n        return this._searchNearestSegmentBefore(originalBeginDts) + 1;\n    }\n\n    append(mediaSegmentInfo) {\n        let list = this._list;\n        let msi = mediaSegmentInfo;\n        let lastAppendIdx = this._lastAppendLocation;\n        let insertIdx = 0;\n\n        if (lastAppendIdx !== -1 && lastAppendIdx < list.length &&\n                                    msi.originalBeginDts >= list[lastAppendIdx].lastSample.originalDts &&\n                                    ((lastAppendIdx === list.length - 1) ||\n                                    (lastAppendIdx < list.length - 1 &&\n                                    msi.originalBeginDts < list[lastAppendIdx + 1].originalBeginDts))) {\n            insertIdx = lastAppendIdx + 1;  // use cached location idx\n        } else {\n            if (list.length > 0) {\n                insertIdx = this._searchNearestSegmentBefore(msi.originalBeginDts) + 1;\n            }\n        }\n\n        this._lastAppendLocation = insertIdx;\n        this._list.splice(insertIdx, 0, msi);\n    }\n\n    getLastSegmentBefore(originalBeginDts) {\n        let idx = this._searchNearestSegmentBefore(originalBeginDts);\n        if (idx >= 0) {\n            return this._list[idx];\n        } else {  // -1\n            return null;\n        }\n    }\n\n    getLastSampleBefore(originalBeginDts) {\n        let segment = this.getLastSegmentBefore(originalBeginDts);\n        if (segment != null) {\n            return segment.lastSample;\n        } else {\n            return null;\n        }\n    }\n\n    getLastSyncPointBefore(originalBeginDts) {\n        let segmentIdx = this._searchNearestSegmentBefore(originalBeginDts);\n        let syncPoints = this._list[segmentIdx].syncPoints;\n        while (syncPoints.length === 0 && segmentIdx > 0) {\n            segmentIdx--;\n            syncPoints = this._list[segmentIdx].syncPoints;\n        }\n        if (syncPoints.length > 0) {\n            return syncPoints[syncPoints.length - 1];\n        } else {\n            return null;\n        }\n    }\n\n}","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport Log from '../utils/logger.js';\nimport Browser from '../utils/browser.js';\nimport MSEEvents from './mse-events.js';\nimport {SampleInfo, IDRSampleList} from './media-segment-info.js';\nimport {IllegalStateException} from '../utils/exception.js';\n\n// Media Source Extensions controller\nclass MSEController {\n\n    constructor(config) {\n        this.TAG = 'MSEController';\n\n        this._config = config;\n        this._emitter = new EventEmitter();\n\n        if (this._config.isLive && this._config.autoCleanupSourceBuffer == undefined) {\n            // For live stream, do auto cleanup by default\n            this._config.autoCleanupSourceBuffer = true;\n        }\n\n        this.e = {\n            onSourceOpen: this._onSourceOpen.bind(this),\n            onSourceEnded: this._onSourceEnded.bind(this),\n            onSourceClose: this._onSourceClose.bind(this),\n            onSourceBufferError: this._onSourceBufferError.bind(this),\n            onSourceBufferUpdateEnd: this._onSourceBufferUpdateEnd.bind(this)\n        };\n\n        this._mediaSource = null;\n        this._mediaSourceObjectURL = null;\n        this._mediaElement = null;\n\n        this._isBufferFull = false;\n        this._hasPendingEos = false;\n\n        this._requireSetMediaDuration = false;\n        this._pendingMediaDuration = 0;\n\n        this._pendingSourceBufferInit = [];\n        this._mimeTypes = {\n            video: null,\n            audio: null\n        };\n        this._sourceBuffers = {\n            video: null,\n            audio: null\n        };\n        this._lastInitSegments = {\n            video: null,\n            audio: null\n        };\n        this._pendingSegments = {\n            video: [],\n            audio: []\n        };\n        this._pendingRemoveRanges = {\n            video: [],\n            audio: []\n        };\n        this._idrList = new IDRSampleList();\n    }\n\n    destroy() {\n        if (this._mediaElement || this._mediaSource) {\n            this.detachMediaElement();\n        }\n        this.e = null;\n        this._emitter.removeAllListeners();\n        this._emitter = null;\n    }\n\n    on(event, listener) {\n        this._emitter.addListener(event, listener);\n    }\n\n    off(event, listener) {\n        this._emitter.removeListener(event, listener);\n    }\n\n    attachMediaElement(mediaElement) {\n        if (this._mediaSource) {\n            throw new IllegalStateException('MediaSource has been attached to an HTMLMediaElement!');\n        }\n        let ms = this._mediaSource = new window.MediaSource();\n        ms.addEventListener('sourceopen', this.e.onSourceOpen);\n        ms.addEventListener('sourceended', this.e.onSourceEnded);\n        ms.addEventListener('sourceclose', this.e.onSourceClose);\n\n        this._mediaElement = mediaElement;\n        this._mediaSourceObjectURL = window.URL.createObjectURL(this._mediaSource);\n        mediaElement.src = this._mediaSourceObjectURL;\n    }\n\n    detachMediaElement() {\n        if (this._mediaSource) {\n            let ms = this._mediaSource;\n            for (let type in this._sourceBuffers) {\n                // pending segments should be discard\n                let ps = this._pendingSegments[type];\n                ps.splice(0, ps.length);\n                this._pendingSegments[type] = null;\n                this._pendingRemoveRanges[type] = null;\n                this._lastInitSegments[type] = null;\n\n                // remove all sourcebuffers\n                let sb = this._sourceBuffers[type];\n                if (sb) {\n                    if (ms.readyState !== 'closed') {\n                        // ms edge can throw an error: Unexpected call to method or property access\n                        try {\n                            ms.removeSourceBuffer(sb);\n                        } catch (error) {\n                            Log.e(this.TAG, error.message);\n                        }\n                        sb.removeEventListener('error', this.e.onSourceBufferError);\n                        sb.removeEventListener('updateend', this.e.onSourceBufferUpdateEnd);\n                    }\n                    this._mimeTypes[type] = null;\n                    this._sourceBuffers[type] = null;\n                }\n            }\n            if (ms.readyState === 'open') {\n                try {\n                    ms.endOfStream();\n                } catch (error) {\n                    Log.e(this.TAG, error.message);\n                }\n            }\n            ms.removeEventListener('sourceopen', this.e.onSourceOpen);\n            ms.removeEventListener('sourceended', this.e.onSourceEnded);\n            ms.removeEventListener('sourceclose', this.e.onSourceClose);\n            this._pendingSourceBufferInit = [];\n            this._isBufferFull = false;\n            this._idrList.clear();\n            this._mediaSource = null;\n        }\n\n        if (this._mediaElement) {\n            this._mediaElement.src = '';\n            this._mediaElement.removeAttribute('src');\n            this._mediaElement = null;\n        }\n        if (this._mediaSourceObjectURL) {\n            window.URL.revokeObjectURL(this._mediaSourceObjectURL);\n            this._mediaSourceObjectURL = null;\n        }\n    }\n\n    appendInitSegment(initSegment, deferred) {\n        if (!this._mediaSource || this._mediaSource.readyState !== 'open') {\n            // sourcebuffer creation requires mediaSource.readyState === 'open'\n            // so we defer the sourcebuffer creation, until sourceopen event triggered\n            this._pendingSourceBufferInit.push(initSegment);\n            // make sure that this InitSegment is in the front of pending segments queue\n            this._pendingSegments[initSegment.type].push(initSegment);\n            return;\n        }\n\n        let is = initSegment;\n        let mimeType = `${is.container}`;\n        if (is.codec && is.codec.length > 0) {\n            mimeType += `;codecs=${is.codec}`;\n        }\n\n        let firstInitSegment = false;\n\n        Log.v(this.TAG, 'Received Initialization Segment, mimeType: ' + mimeType);\n        this._lastInitSegments[is.type] = is;\n\n        if (mimeType !== this._mimeTypes[is.type]) {\n            if (!this._mimeTypes[is.type]) {  // empty, first chance create sourcebuffer\n                firstInitSegment = true;\n                try {\n                    let sb = this._sourceBuffers[is.type] = this._mediaSource.addSourceBuffer(mimeType);\n                    sb.addEventListener('error', this.e.onSourceBufferError);\n                    sb.addEventListener('updateend', this.e.onSourceBufferUpdateEnd);\n                } catch (error) {\n                    Log.e(this.TAG, error.message);\n                    this._emitter.emit(MSEEvents.ERROR, {code: error.code, msg: error.message});\n                    return;\n                }\n            } else {\n                Log.v(this.TAG, `Notice: ${is.type} mimeType changed, origin: ${this._mimeTypes[is.type]}, target: ${mimeType}`);\n            }\n            this._mimeTypes[is.type] = mimeType;\n        }\n\n        if (!deferred) {\n            // deferred means this InitSegment has been pushed to pendingSegments queue\n            this._pendingSegments[is.type].push(is);\n        }\n        if (!firstInitSegment) {  // append immediately only if init segment in subsequence\n            if (this._sourceBuffers[is.type] && !this._sourceBuffers[is.type].updating) {\n                this._doAppendSegments();\n            }\n        }\n        if (Browser.safari && is.container === 'audio/mpeg' && is.mediaDuration > 0) {\n            // 'audio/mpeg' track under Safari may cause MediaElement's duration to be NaN\n            // Manually correct MediaSource.duration to make progress bar seekable, and report right duration\n            this._requireSetMediaDuration = true;\n            this._pendingMediaDuration = is.mediaDuration / 1000;  // in seconds\n            this._updateMediaSourceDuration();\n        }\n    }\n\n    appendMediaSegment(mediaSegment) {\n        let ms = mediaSegment;\n        this._pendingSegments[ms.type].push(ms);\n\n        if (this._config.autoCleanupSourceBuffer && this._needCleanupSourceBuffer()) {\n            this._doCleanupSourceBuffer();\n        }\n\n        let sb = this._sourceBuffers[ms.type];\n        if (sb && !sb.updating && !this._hasPendingRemoveRanges()) {\n            this._doAppendSegments();\n        }\n    }\n\n    seek(seconds) {\n        // remove all appended buffers\n        for (let type in this._sourceBuffers) {\n            if (!this._sourceBuffers[type]) {\n                continue;\n            }\n\n            // abort current buffer append algorithm\n            let sb = this._sourceBuffers[type];\n            if (this._mediaSource.readyState === 'open') {\n                try {\n                    // If range removal algorithm is running, InvalidStateError will be throwed\n                    // Ignore it.\n                    sb.abort();\n                } catch (error) {\n                    Log.e(this.TAG, error.message);\n                }\n            }\n\n            // IDRList should be clear\n            this._idrList.clear();\n\n            // pending segments should be discard\n            let ps = this._pendingSegments[type];\n            ps.splice(0, ps.length);\n\n            if (this._mediaSource.readyState === 'closed') {\n                // Parent MediaSource object has been detached from HTMLMediaElement\n                continue;\n            }\n\n            // record ranges to be remove from SourceBuffer\n            for (let i = 0; i < sb.buffered.length; i++) {\n                let start = sb.buffered.start(i);\n                let end = sb.buffered.end(i);\n                this._pendingRemoveRanges[type].push({start, end});\n            }\n\n            // if sb is not updating, let's remove ranges now!\n            if (!sb.updating) {\n                this._doRemoveRanges();\n            }\n\n            // Safari 10 may get InvalidStateError in the later appendBuffer() after SourceBuffer.remove() call\n            // Internal parser's state may be invalid at this time. Re-append last InitSegment to workaround.\n            // Related issue: https://bugs.webkit.org/show_bug.cgi?id=159230\n            if (Browser.safari) {\n                let lastInitSegment = this._lastInitSegments[type];\n                if (lastInitSegment) {\n                    this._pendingSegments[type].push(lastInitSegment);\n                    if (!sb.updating) {\n                        this._doAppendSegments();\n                    }\n                }\n            }\n        }\n    }\n\n    endOfStream() {\n        let ms = this._mediaSource;\n        let sb = this._sourceBuffers;\n        if (!ms || ms.readyState !== 'open') {\n            if (ms && ms.readyState === 'closed' && this._hasPendingSegments()) {\n                // If MediaSource hasn't turned into open state, and there're pending segments\n                // Mark pending endOfStream, defer call until all pending segments appended complete\n                this._hasPendingEos = true;\n            }\n            return;\n        }\n        if (sb.video && sb.video.updating || sb.audio && sb.audio.updating) {\n            // If any sourcebuffer is updating, defer endOfStream operation\n            // See _onSourceBufferUpdateEnd()\n            this._hasPendingEos = true;\n        } else {\n            this._hasPendingEos = false;\n            // Notify media data loading complete\n            // This is helpful for correcting total duration to match last media segment\n            // Otherwise MediaElement's ended event may not be triggered\n            ms.endOfStream();\n        }\n    }\n\n    getNearestKeyframe(dts) {\n        return this._idrList.getLastSyncPointBeforeDts(dts);\n    }\n\n    _needCleanupSourceBuffer() {\n        if (!this._config.autoCleanupSourceBuffer) {\n            return false;\n        }\n\n        let currentTime = this._mediaElement.currentTime;\n\n        for (let type in this._sourceBuffers) {\n            let sb = this._sourceBuffers[type];\n            if (sb) {\n                let buffered = sb.buffered;\n                if (buffered.length >= 1) {\n                    if (currentTime - buffered.start(0) >= this._config.autoCleanupMaxBackwardDuration) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    _doCleanupSourceBuffer() {\n        let currentTime = this._mediaElement.currentTime;\n\n        for (let type in this._sourceBuffers) {\n            let sb = this._sourceBuffers[type];\n            if (sb) {\n                let buffered = sb.buffered;\n                let doRemove = false;\n\n                for (let i = 0; i < buffered.length; i++) {\n                    let start = buffered.start(i);\n                    let end = buffered.end(i);\n\n                    if (start <= currentTime && currentTime < end + 3) {  // padding 3 seconds\n                        if (currentTime - start >= this._config.autoCleanupMaxBackwardDuration) {\n                            doRemove = true;\n                            let removeEnd = currentTime - this._config.autoCleanupMinBackwardDuration;\n                            this._pendingRemoveRanges[type].push({start: start, end: removeEnd});\n                        }\n                    } else if (end < currentTime) {\n                        doRemove = true;\n                        this._pendingRemoveRanges[type].push({start: start, end: end});\n                    }\n                }\n\n                if (doRemove && !sb.updating) {\n                    this._doRemoveRanges();\n                }\n            }\n        }\n    }\n\n    _updateMediaSourceDuration() {\n        let sb = this._sourceBuffers;\n        if (this._mediaElement.readyState === 0 || this._mediaSource.readyState !== 'open') {\n            return;\n        }\n        if ((sb.video && sb.video.updating) || (sb.audio && sb.audio.updating)) {\n            return;\n        }\n\n        let current = this._mediaSource.duration;\n        let target = this._pendingMediaDuration;\n\n        if (target > 0 && (isNaN(current) || target > current)) {\n            Log.v(this.TAG, `Update MediaSource duration from ${current} to ${target}`);\n            this._mediaSource.duration = target;\n        }\n\n        this._requireSetMediaDuration = false;\n        this._pendingMediaDuration = 0;\n    }\n\n    _doRemoveRanges() {\n        for (let type in this._pendingRemoveRanges) {\n            if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {\n                continue;\n            }\n            let sb = this._sourceBuffers[type];\n            let ranges = this._pendingRemoveRanges[type];\n            while (ranges.length && !sb.updating) {\n                let range = ranges.shift();\n                sb.remove(range.start, range.end);\n            }\n        }\n    }\n\n    _doAppendSegments() {\n        let pendingSegments = this._pendingSegments;\n\n        for (let type in pendingSegments) {\n            if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {\n                continue;\n            }\n\n            if (pendingSegments[type].length > 0) {\n                let segment = pendingSegments[type].shift();\n\n                if (segment.timestampOffset) {\n                    // For MPEG audio stream in MSE, if unbuffered-seeking occurred\n                    // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.\n                    let currentOffset = this._sourceBuffers[type].timestampOffset;\n                    let targetOffset = segment.timestampOffset / 1000;  // in seconds\n\n                    let delta = Math.abs(currentOffset - targetOffset);\n                    if (delta > 0.1) {  // If time delta > 100ms\n                        Log.v(this.TAG, `Update MPEG audio timestampOffset from ${currentOffset} to ${targetOffset}`);\n                        this._sourceBuffers[type].timestampOffset = targetOffset;\n                    }\n                    delete segment.timestampOffset;\n                }\n\n                if (!segment.data || segment.data.byteLength === 0) {\n                    // Ignore empty buffer\n                    continue;\n                }\n\n                try {\n                    this._sourceBuffers[type].appendBuffer(segment.data);\n                    this._isBufferFull = false;\n                    if (type === 'video' && segment.hasOwnProperty('info')) {\n                        this._idrList.appendArray(segment.info.syncPoints);\n                    }\n                } catch (error) {\n                    this._pendingSegments[type].unshift(segment);\n                    if (error.code === 22) {  // QuotaExceededError\n                        /* Notice that FireFox may not throw QuotaExceededError if SourceBuffer is full\n                         * Currently we can only do lazy-load to avoid SourceBuffer become scattered.\n                         * SourceBuffer eviction policy may be changed in future version of FireFox.\n                         *\n                         * Related issues:\n                         * https://bugzilla.mozilla.org/show_bug.cgi?id=1279885\n                         * https://bugzilla.mozilla.org/show_bug.cgi?id=1280023\n                         */\n\n                        // report buffer full, abort network IO\n                        if (!this._isBufferFull) {\n                            this._emitter.emit(MSEEvents.BUFFER_FULL);\n                        }\n                        this._isBufferFull = true;\n                    } else {\n                        Log.e(this.TAG, error.message);\n                        this._emitter.emit(MSEEvents.ERROR, {code: error.code, msg: error.message});\n                    }\n                }\n            }\n        }\n    }\n\n    _onSourceOpen() {\n        Log.v(this.TAG, 'MediaSource onSourceOpen');\n        this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);\n        // deferred sourcebuffer creation / initialization\n        if (this._pendingSourceBufferInit.length > 0) {\n            let pendings = this._pendingSourceBufferInit;\n            while (pendings.length) {\n                let segment = pendings.shift();\n                this.appendInitSegment(segment, true);\n            }\n        }\n        // there may be some pending media segments, append them\n        if (this._hasPendingSegments()) {\n            this._doAppendSegments();\n        }\n        this._emitter.emit(MSEEvents.SOURCE_OPEN);\n    }\n\n    _onSourceEnded() {\n        // fired on endOfStream\n        Log.v(this.TAG, 'MediaSource onSourceEnded');\n    }\n\n    _onSourceClose() {\n        // fired on detaching from media element\n        Log.v(this.TAG, 'MediaSource onSourceClose');\n        if (this._mediaSource && this.e != null) {\n            this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);\n            this._mediaSource.removeEventListener('sourceended', this.e.onSourceEnded);\n            this._mediaSource.removeEventListener('sourceclose', this.e.onSourceClose);\n        }\n    }\n\n    _hasPendingSegments() {\n        let ps = this._pendingSegments;\n        return ps.video.length > 0 || ps.audio.length > 0;\n    }\n\n    _hasPendingRemoveRanges() {\n        let prr = this._pendingRemoveRanges;\n        return prr.video.length > 0 || prr.audio.length > 0;\n    }\n\n    _onSourceBufferUpdateEnd() {\n        if (this._requireSetMediaDuration) {\n            this._updateMediaSourceDuration();\n        } else if (this._hasPendingRemoveRanges()) {\n            this._doRemoveRanges();\n        } else if (this._hasPendingSegments()) {\n            this._doAppendSegments();\n        } else if (this._hasPendingEos) {\n            this.endOfStream();\n        }\n        this._emitter.emit(MSEEvents.UPDATE_END);\n    }\n\n    _onSourceBufferError(e) {\n        Log.e(this.TAG, `SourceBuffer Error: ${e}`);\n        // this error might not always be fatal, just ignore it\n    }\n\n}\n\nexport default MSEController;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst MSEEvents = {\n    ERROR: 'error',\n    SOURCE_OPEN: 'source_open',\n    UPDATE_END: 'update_end',\n    BUFFER_FULL: 'buffer_full'\n};\n\nexport default MSEEvents;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport Log from '../utils/logger.js';\nimport LoggingControl from '../utils/logging-control.js';\nimport TransmuxingController from './transmuxing-controller.js';\nimport TransmuxingEvents from './transmuxing-events.js';\nimport TransmuxingWorker from './transmuxing-worker.js';\nimport MediaInfo from './media-info.js';\n\nclass Transmuxer {\n\n    constructor(mediaDataSource, config) {\n        this.TAG = 'Transmuxer';\n        this._emitter = new EventEmitter();\n\n        if (config.enableWorker && typeof (Worker) !== 'undefined') {\n            try {\n                let work = require('webworkify');\n                this._worker = work(TransmuxingWorker);\n                this._workerDestroying = false;\n                this._worker.addEventListener('message', this._onWorkerMessage.bind(this));\n                this._worker.postMessage({cmd: 'init', param: [mediaDataSource, config]});\n                this.e = {\n                    onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)\n                };\n                LoggingControl.registerListener(this.e.onLoggingConfigChanged);\n                this._worker.postMessage({cmd: 'logging_config', param: LoggingControl.getConfig()});\n            } catch (error) {\n                Log.e(this.TAG, 'Error while initialize transmuxing worker, fallback to inline transmuxing');\n                this._worker = null;\n                this._controller = new TransmuxingController(mediaDataSource, config);\n            }\n        } else {\n            this._controller = new TransmuxingController(mediaDataSource, config);\n        }\n\n        if (this._controller) {\n            let ctl = this._controller;\n            ctl.on(TransmuxingEvents.IO_ERROR, this._onIOError.bind(this));\n            ctl.on(TransmuxingEvents.DEMUX_ERROR, this._onDemuxError.bind(this));\n            ctl.on(TransmuxingEvents.INIT_SEGMENT, this._onInitSegment.bind(this));\n            ctl.on(TransmuxingEvents.MEDIA_SEGMENT, this._onMediaSegment.bind(this));\n            ctl.on(TransmuxingEvents.LOADING_COMPLETE, this._onLoadingComplete.bind(this));\n            ctl.on(TransmuxingEvents.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));\n            ctl.on(TransmuxingEvents.MEDIA_INFO, this._onMediaInfo.bind(this));\n            ctl.on(TransmuxingEvents.METADATA_ARRIVED, this._onMetaDataArrived.bind(this));\n            ctl.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this));\n            ctl.on(TransmuxingEvents.STATISTICS_INFO, this._onStatisticsInfo.bind(this));\n            ctl.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));\n        }\n    }\n\n    destroy() {\n        if (this._worker) {\n            if (!this._workerDestroying) {\n                this._workerDestroying = true;\n                this._worker.postMessage({cmd: 'destroy'});\n                LoggingControl.removeListener(this.e.onLoggingConfigChanged);\n                this.e = null;\n            }\n        } else {\n            this._controller.destroy();\n            this._controller = null;\n        }\n        this._emitter.removeAllListeners();\n        this._emitter = null;\n    }\n\n    on(event, listener) {\n        this._emitter.addListener(event, listener);\n    }\n\n    off(event, listener) {\n        this._emitter.removeListener(event, listener);\n    }\n\n    hasWorker() {\n        return this._worker != null;\n    }\n\n    open() {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'start'});\n        } else {\n            this._controller.start();\n        }\n    }\n\n    close() {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'stop'});\n        } else {\n            this._controller.stop();\n        }\n    }\n\n    seek(milliseconds) {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'seek', param: milliseconds});\n        } else {\n            this._controller.seek(milliseconds);\n        }\n    }\n\n    pause() {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'pause'});\n        } else {\n            this._controller.pause();\n        }\n    }\n\n    resume() {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'resume'});\n        } else {\n            this._controller.resume();\n        }\n    }\n\n    _onInitSegment(type, initSegment) {\n        // do async invoke\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.INIT_SEGMENT, type, initSegment);\n        });\n    }\n\n    _onMediaSegment(type, mediaSegment) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.MEDIA_SEGMENT, type, mediaSegment);\n        });\n    }\n\n    _onLoadingComplete() {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.LOADING_COMPLETE);\n        });\n    }\n\n    _onRecoveredEarlyEof() {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.RECOVERED_EARLY_EOF);\n        });\n    }\n\n    _onMediaInfo(mediaInfo) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.MEDIA_INFO, mediaInfo);\n        });\n    }\n\n    _onMetaDataArrived(metadata) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.METADATA_ARRIVED, metadata);\n        });\n    }\n\n    _onScriptDataArrived(data) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.SCRIPTDATA_ARRIVED, data);\n        });\n    }\n\n    _onStatisticsInfo(statisticsInfo) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.STATISTICS_INFO, statisticsInfo);\n        });\n    }\n\n    _onIOError(type, info) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.IO_ERROR, type, info);\n        });\n    }\n\n    _onDemuxError(type, info) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.DEMUX_ERROR, type, info);\n        });\n    }\n\n    _onRecommendSeekpoint(milliseconds) {\n        Promise.resolve().then(() => {\n            this._emitter.emit(TransmuxingEvents.RECOMMEND_SEEKPOINT, milliseconds);\n        });\n    }\n\n    _onLoggingConfigChanged(config) {\n        if (this._worker) {\n            this._worker.postMessage({cmd: 'logging_config', param: config});\n        }\n    }\n\n    _onWorkerMessage(e) {\n        let message = e.data;\n        let data = message.data;\n\n        if (message.msg === 'destroyed' || this._workerDestroying) {\n            this._workerDestroying = false;\n            this._worker.terminate();\n            this._worker = null;\n            return;\n        }\n\n        switch (message.msg) {\n            case TransmuxingEvents.INIT_SEGMENT:\n            case TransmuxingEvents.MEDIA_SEGMENT:\n                this._emitter.emit(message.msg, data.type, data.data);\n                break;\n            case TransmuxingEvents.LOADING_COMPLETE:\n            case TransmuxingEvents.RECOVERED_EARLY_EOF:\n                this._emitter.emit(message.msg);\n                break;\n            case TransmuxingEvents.MEDIA_INFO:\n                Object.setPrototypeOf(data, MediaInfo.prototype);\n                this._emitter.emit(message.msg, data);\n                break;\n            case TransmuxingEvents.METADATA_ARRIVED:\n            case TransmuxingEvents.SCRIPTDATA_ARRIVED:\n            case TransmuxingEvents.STATISTICS_INFO:\n                this._emitter.emit(message.msg, data);\n                break;\n            case TransmuxingEvents.IO_ERROR:\n            case TransmuxingEvents.DEMUX_ERROR:\n                this._emitter.emit(message.msg, data.type, data.info);\n                break;\n            case TransmuxingEvents.RECOMMEND_SEEKPOINT:\n                this._emitter.emit(message.msg, data);\n                break;\n            case 'logcat_callback':\n                Log.emitter.emit('log', data.type, data.logcat);\n                break;\n            default:\n                break;\n        }\n    }\n\n}\n\nexport default Transmuxer;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport Log from '../utils/logger.js';\nimport Browser from '../utils/browser.js';\nimport MediaInfo from './media-info.js';\nimport FLVDemuxer from '../demux/flv-demuxer.js';\nimport MP4Remuxer from '../remux/mp4-remuxer.js';\nimport DemuxErrors from '../demux/demux-errors.js';\nimport IOController from '../io/io-controller.js';\nimport TransmuxingEvents from './transmuxing-events.js';\nimport {LoaderStatus, LoaderErrors} from '../io/loader.js';\n\n// Transmuxing (IO, Demuxing, Remuxing) controller, with multipart support\nclass TransmuxingController {\n\n    constructor(mediaDataSource, config) {\n        this.TAG = 'TransmuxingController';\n        this._emitter = new EventEmitter();\n\n        this._config = config;\n\n        // treat single part media as multipart media, which has only one segment\n        if (!mediaDataSource.segments) {\n            mediaDataSource.segments = [{\n                duration: mediaDataSource.duration,\n                filesize: mediaDataSource.filesize,\n                url: mediaDataSource.url\n            }];\n        }\n\n        // fill in default IO params if not exists\n        if (typeof mediaDataSource.cors !== 'boolean') {\n            mediaDataSource.cors = true;\n        }\n        if (typeof mediaDataSource.withCredentials !== 'boolean') {\n            mediaDataSource.withCredentials = false;\n        }\n\n        this._mediaDataSource = mediaDataSource;\n        this._currentSegmentIndex = 0;\n        let totalDuration = 0;\n\n        this._mediaDataSource.segments.forEach((segment) => {\n            // timestampBase for each segment, and calculate total duration\n            segment.timestampBase = totalDuration;\n            totalDuration += segment.duration;\n            // params needed by IOController\n            segment.cors = mediaDataSource.cors;\n            segment.withCredentials = mediaDataSource.withCredentials;\n            // referrer policy control, if exist\n            if (config.referrerPolicy) {\n                segment.referrerPolicy = config.referrerPolicy;\n            }\n        });\n\n        if (!isNaN(totalDuration) && this._mediaDataSource.duration !== totalDuration) {\n            this._mediaDataSource.duration = totalDuration;\n        }\n\n        this._mediaInfo = null;\n        this._demuxer = null;\n        this._remuxer = null;\n        this._ioctl = null;\n\n        this._pendingSeekTime = null;\n        this._pendingResolveSeekPoint = null;\n\n        this._statisticsReporter = null;\n    }\n\n    destroy() {\n        this._mediaInfo = null;\n        this._mediaDataSource = null;\n\n        if (this._statisticsReporter) {\n            this._disableStatisticsReporter();\n        }\n        if (this._ioctl) {\n            this._ioctl.destroy();\n            this._ioctl = null;\n        }\n        if (this._demuxer) {\n            this._demuxer.destroy();\n            this._demuxer = null;\n        }\n        if (this._remuxer) {\n            this._remuxer.destroy();\n            this._remuxer = null;\n        }\n\n        this._emitter.removeAllListeners();\n        this._emitter = null;\n    }\n\n    on(event, listener) {\n        this._emitter.addListener(event, listener);\n    }\n\n    off(event, listener) {\n        this._emitter.removeListener(event, listener);\n    }\n\n    start() {\n        this._loadSegment(0);\n        this._enableStatisticsReporter();\n    }\n\n    _loadSegment(segmentIndex, optionalFrom) {\n        this._currentSegmentIndex = segmentIndex;\n        let dataSource = this._mediaDataSource.segments[segmentIndex];\n\n        let ioctl = this._ioctl = new IOController(dataSource, this._config, segmentIndex);\n        ioctl.onError = this._onIOException.bind(this);\n        ioctl.onSeeked = this._onIOSeeked.bind(this);\n        ioctl.onComplete = this._onIOComplete.bind(this);\n        ioctl.onRedirect = this._onIORedirect.bind(this);\n        ioctl.onRecoveredEarlyEof = this._onIORecoveredEarlyEof.bind(this);\n\n        if (optionalFrom) {\n            this._demuxer.bindDataSource(this._ioctl);\n        } else {\n            ioctl.onDataArrival = this._onInitChunkArrival.bind(this);\n        }\n\n        ioctl.open(optionalFrom);\n    }\n\n    stop() {\n        this._internalAbort();\n        this._disableStatisticsReporter();\n    }\n\n    _internalAbort() {\n        if (this._ioctl) {\n            this._ioctl.destroy();\n            this._ioctl = null;\n        }\n    }\n\n    pause() {  // take a rest\n        if (this._ioctl && this._ioctl.isWorking()) {\n            this._ioctl.pause();\n            this._disableStatisticsReporter();\n        }\n    }\n\n    resume() {\n        if (this._ioctl && this._ioctl.isPaused()) {\n            this._ioctl.resume();\n            this._enableStatisticsReporter();\n        }\n    }\n\n    seek(milliseconds) {\n        if (this._mediaInfo == null || !this._mediaInfo.isSeekable()) {\n            return;\n        }\n\n        let targetSegmentIndex = this._searchSegmentIndexContains(milliseconds);\n\n        if (targetSegmentIndex === this._currentSegmentIndex) {\n            // intra-segment seeking\n            let segmentInfo = this._mediaInfo.segments[targetSegmentIndex];\n\n            if (segmentInfo == undefined) {\n                // current segment loading started, but mediainfo hasn't received yet\n                // wait for the metadata loaded, then seek to expected position\n                this._pendingSeekTime = milliseconds;\n            } else {\n                let keyframe = segmentInfo.getNearestKeyframe(milliseconds);\n                this._remuxer.seek(keyframe.milliseconds);\n                this._ioctl.seek(keyframe.fileposition);\n                // Will be resolved in _onRemuxerMediaSegmentArrival()\n                this._pendingResolveSeekPoint = keyframe.milliseconds;\n            }\n        } else {\n            // cross-segment seeking\n            let targetSegmentInfo = this._mediaInfo.segments[targetSegmentIndex];\n\n            if (targetSegmentInfo == undefined) {\n                // target segment hasn't been loaded. We need metadata then seek to expected time\n                this._pendingSeekTime = milliseconds;\n                this._internalAbort();\n                this._remuxer.seek();\n                this._remuxer.insertDiscontinuity();\n                this._loadSegment(targetSegmentIndex);\n                // Here we wait for the metadata loaded, then seek to expected position\n            } else {\n                // We have target segment's metadata, direct seek to target position\n                let keyframe = targetSegmentInfo.getNearestKeyframe(milliseconds);\n                this._internalAbort();\n                this._remuxer.seek(milliseconds);\n                this._remuxer.insertDiscontinuity();\n                this._demuxer.resetMediaInfo();\n                this._demuxer.timestampBase = this._mediaDataSource.segments[targetSegmentIndex].timestampBase;\n                this._loadSegment(targetSegmentIndex, keyframe.fileposition);\n                this._pendingResolveSeekPoint = keyframe.milliseconds;\n                this._reportSegmentMediaInfo(targetSegmentIndex);\n            }\n        }\n\n        this._enableStatisticsReporter();\n    }\n\n    _searchSegmentIndexContains(milliseconds) {\n        let segments = this._mediaDataSource.segments;\n        let idx = segments.length - 1;\n\n        for (let i = 0; i < segments.length; i++) {\n            if (milliseconds < segments[i].timestampBase) {\n                idx = i - 1;\n                break;\n            }\n        }\n        return idx;\n    }\n\n    _onInitChunkArrival(data, byteStart) {\n        let probeData = null;\n        let consumed = 0;\n\n        if (byteStart > 0) {\n            // IOController seeked immediately after opened, byteStart > 0 callback may received\n            this._demuxer.bindDataSource(this._ioctl);\n            this._demuxer.timestampBase = this._mediaDataSource.segments[this._currentSegmentIndex].timestampBase;\n\n            consumed = this._demuxer.parseChunks(data, byteStart);\n        } else if ((probeData = FLVDemuxer.probe(data)).match) {\n            // Always create new FLVDemuxer\n            this._demuxer = new FLVDemuxer(probeData, this._config);\n\n            if (!this._remuxer) {\n                this._remuxer = new MP4Remuxer(this._config);\n            }\n\n            let mds = this._mediaDataSource;\n            if (mds.duration != undefined && !isNaN(mds.duration)) {\n                this._demuxer.overridedDuration = mds.duration;\n            }\n            if (typeof mds.hasAudio === 'boolean') {\n                this._demuxer.overridedHasAudio = mds.hasAudio;\n            }\n            if (typeof mds.hasVideo === 'boolean') {\n                this._demuxer.overridedHasVideo = mds.hasVideo;\n            }\n\n            this._demuxer.timestampBase = mds.segments[this._currentSegmentIndex].timestampBase;\n\n            this._demuxer.onError = this._onDemuxException.bind(this);\n            this._demuxer.onMediaInfo = this._onMediaInfo.bind(this);\n            this._demuxer.onMetaDataArrived = this._onMetaDataArrived.bind(this);\n            this._demuxer.onScriptDataArrived = this._onScriptDataArrived.bind(this);\n\n            this._remuxer.bindDataSource(this._demuxer\n                         .bindDataSource(this._ioctl\n            ));\n\n            this._remuxer.onInitSegment = this._onRemuxerInitSegmentArrival.bind(this);\n            this._remuxer.onMediaSegment = this._onRemuxerMediaSegmentArrival.bind(this);\n\n            consumed = this._demuxer.parseChunks(data, byteStart);\n        } else {\n            probeData = null;\n            Log.e(this.TAG, 'Non-FLV, Unsupported media type!');\n            Promise.resolve().then(() => {\n                this._internalAbort();\n            });\n            this._emitter.emit(TransmuxingEvents.DEMUX_ERROR, DemuxErrors.FORMAT_UNSUPPORTED, 'Non-FLV, Unsupported media type');\n\n            consumed = 0;\n        }\n\n        return consumed;\n    }\n\n    _onMediaInfo(mediaInfo) {\n        if (this._mediaInfo == null) {\n            // Store first segment's mediainfo as global mediaInfo\n            this._mediaInfo = Object.assign({}, mediaInfo);\n            this._mediaInfo.keyframesIndex = null;\n            this._mediaInfo.segments = [];\n            this._mediaInfo.segmentCount = this._mediaDataSource.segments.length;\n            Object.setPrototypeOf(this._mediaInfo, MediaInfo.prototype);\n        }\n\n        let segmentInfo = Object.assign({}, mediaInfo);\n        Object.setPrototypeOf(segmentInfo, MediaInfo.prototype);\n        this._mediaInfo.segments[this._currentSegmentIndex] = segmentInfo;\n\n        // notify mediaInfo update\n        this._reportSegmentMediaInfo(this._currentSegmentIndex);\n\n        if (this._pendingSeekTime != null) {\n            Promise.resolve().then(() => {\n                let target = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n                this.seek(target);\n            });\n        }\n    }\n\n    _onMetaDataArrived(metadata) {\n        this._emitter.emit(TransmuxingEvents.METADATA_ARRIVED, metadata);\n    }\n\n    _onScriptDataArrived(data) {\n        this._emitter.emit(TransmuxingEvents.SCRIPTDATA_ARRIVED, data);\n    }\n\n    _onIOSeeked() {\n        this._remuxer.insertDiscontinuity();\n    }\n\n    _onIOComplete(extraData) {\n        let segmentIndex = extraData;\n        let nextSegmentIndex = segmentIndex + 1;\n\n        if (nextSegmentIndex < this._mediaDataSource.segments.length) {\n            this._internalAbort();\n            this._remuxer.flushStashedSamples();\n            this._loadSegment(nextSegmentIndex);\n        } else {\n            this._remuxer.flushStashedSamples();\n            this._emitter.emit(TransmuxingEvents.LOADING_COMPLETE);\n            this._disableStatisticsReporter();\n        }\n    }\n\n    _onIORedirect(redirectedURL) {\n        let segmentIndex = this._ioctl.extraData;\n        this._mediaDataSource.segments[segmentIndex].redirectedURL = redirectedURL;\n    }\n\n    _onIORecoveredEarlyEof() {\n        this._emitter.emit(TransmuxingEvents.RECOVERED_EARLY_EOF);\n    }\n\n    _onIOException(type, info) {\n        Log.e(this.TAG, `IOException: type = ${type}, code = ${info.code}, msg = ${info.msg}`);\n        this._emitter.emit(TransmuxingEvents.IO_ERROR, type, info);\n        this._disableStatisticsReporter();\n    }\n\n    _onDemuxException(type, info) {\n        Log.e(this.TAG, `DemuxException: type = ${type}, info = ${info}`);\n        this._emitter.emit(TransmuxingEvents.DEMUX_ERROR, type, info);\n    }\n\n    _onRemuxerInitSegmentArrival(type, initSegment) {\n        this._emitter.emit(TransmuxingEvents.INIT_SEGMENT, type, initSegment);\n    }\n\n    _onRemuxerMediaSegmentArrival(type, mediaSegment) {\n        if (this._pendingSeekTime != null) {\n            // Media segments after new-segment cross-seeking should be dropped.\n            return;\n        }\n        this._emitter.emit(TransmuxingEvents.MEDIA_SEGMENT, type, mediaSegment);\n\n        // Resolve pending seekPoint\n        if (this._pendingResolveSeekPoint != null && type === 'video') {\n            let syncPoints = mediaSegment.info.syncPoints;\n            let seekpoint = this._pendingResolveSeekPoint;\n            this._pendingResolveSeekPoint = null;\n\n            // Safari: Pass PTS for recommend_seekpoint\n            if (Browser.safari && syncPoints.length > 0 && syncPoints[0].originalDts === seekpoint) {\n                seekpoint = syncPoints[0].pts;\n            }\n            // else: use original DTS (keyframe.milliseconds)\n\n            this._emitter.emit(TransmuxingEvents.RECOMMEND_SEEKPOINT, seekpoint);\n        }\n    }\n\n    _enableStatisticsReporter() {\n        if (this._statisticsReporter == null) {\n            this._statisticsReporter = self.setInterval(\n                this._reportStatisticsInfo.bind(this),\n            this._config.statisticsInfoReportInterval);\n        }\n    }\n\n    _disableStatisticsReporter() {\n        if (this._statisticsReporter) {\n            self.clearInterval(this._statisticsReporter);\n            this._statisticsReporter = null;\n        }\n    }\n\n    _reportSegmentMediaInfo(segmentIndex) {\n        let segmentInfo = this._mediaInfo.segments[segmentIndex];\n        let exportInfo = Object.assign({}, segmentInfo);\n\n        exportInfo.duration = this._mediaInfo.duration;\n        exportInfo.segmentCount = this._mediaInfo.segmentCount;\n        delete exportInfo.segments;\n        delete exportInfo.keyframesIndex;\n\n        this._emitter.emit(TransmuxingEvents.MEDIA_INFO, exportInfo);\n    }\n\n    _reportStatisticsInfo() {\n        let info = {};\n\n        info.url = this._ioctl.currentURL;\n        info.hasRedirect = this._ioctl.hasRedirect;\n        if (info.hasRedirect) {\n            info.redirectedURL = this._ioctl.currentRedirectedURL;\n        }\n\n        info.speed = this._ioctl.currentSpeed;\n        info.loaderType = this._ioctl.loaderType;\n        info.currentSegmentIndex = this._currentSegmentIndex;\n        info.totalSegmentCount = this._mediaDataSource.segments.length;\n\n        this._emitter.emit(TransmuxingEvents.STATISTICS_INFO, info);\n    }\n\n}\n\nexport default TransmuxingController;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst TransmuxingEvents = {\n    IO_ERROR: 'io_error',\n    DEMUX_ERROR: 'demux_error',\n    INIT_SEGMENT: 'init_segment',\n    MEDIA_SEGMENT: 'media_segment',\n    LOADING_COMPLETE: 'loading_complete',\n    RECOVERED_EARLY_EOF: 'recovered_early_eof',\n    MEDIA_INFO: 'media_info',\n    METADATA_ARRIVED: 'metadata_arrived',\n    SCRIPTDATA_ARRIVED: 'scriptdata_arrived',\n    STATISTICS_INFO: 'statistics_info',\n    RECOMMEND_SEEKPOINT: 'recommend_seekpoint'\n};\n\nexport default TransmuxingEvents;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../utils/logger.js';\nimport LoggingControl from '../utils/logging-control.js';\nimport Polyfill from '../utils/polyfill.js';\nimport TransmuxingController from './transmuxing-controller.js';\nimport TransmuxingEvents from './transmuxing-events.js';\n\n/* post message to worker:\n   data: {\n       cmd: string\n       param: any\n   }\n\n   receive message from worker:\n   data: {\n       msg: string,\n       data: any\n   }\n */\n\nlet TransmuxingWorker = function (self) {\n\n    let TAG = 'TransmuxingWorker';\n    let controller = null;\n    let logcatListener = onLogcatCallback.bind(this);\n\n    Polyfill.install();\n\n    self.addEventListener('message', function (e) {\n        switch (e.data.cmd) {\n            case 'init':\n                controller = new TransmuxingController(e.data.param[0], e.data.param[1]);\n                controller.on(TransmuxingEvents.IO_ERROR, onIOError.bind(this));\n                controller.on(TransmuxingEvents.DEMUX_ERROR, onDemuxError.bind(this));\n                controller.on(TransmuxingEvents.INIT_SEGMENT, onInitSegment.bind(this));\n                controller.on(TransmuxingEvents.MEDIA_SEGMENT, onMediaSegment.bind(this));\n                controller.on(TransmuxingEvents.LOADING_COMPLETE, onLoadingComplete.bind(this));\n                controller.on(TransmuxingEvents.RECOVERED_EARLY_EOF, onRecoveredEarlyEof.bind(this));\n                controller.on(TransmuxingEvents.MEDIA_INFO, onMediaInfo.bind(this));\n                controller.on(TransmuxingEvents.METADATA_ARRIVED, onMetaDataArrived.bind(this));\n                controller.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, onScriptDataArrived.bind(this));\n                controller.on(TransmuxingEvents.STATISTICS_INFO, onStatisticsInfo.bind(this));\n                controller.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, onRecommendSeekpoint.bind(this));\n                break;\n            case 'destroy':\n                if (controller) {\n                    controller.destroy();\n                    controller = null;\n                }\n                self.postMessage({msg: 'destroyed'});\n                break;\n            case 'start':\n                controller.start();\n                break;\n            case 'stop':\n                controller.stop();\n                break;\n            case 'seek':\n                controller.seek(e.data.param);\n                break;\n            case 'pause':\n                controller.pause();\n                break;\n            case 'resume':\n                controller.resume();\n                break;\n            case 'logging_config': {\n                let config = e.data.param;\n                LoggingControl.applyConfig(config);\n\n                if (config.enableCallback === true) {\n                    LoggingControl.addLogListener(logcatListener);\n                } else {\n                    LoggingControl.removeLogListener(logcatListener);\n                }\n                break;\n            }\n        }\n    });\n\n    function onInitSegment(type, initSegment) {\n        let obj = {\n            msg: TransmuxingEvents.INIT_SEGMENT,\n            data: {\n                type: type,\n                data: initSegment\n            }\n        };\n        self.postMessage(obj, [initSegment.data]);  // data: ArrayBuffer\n    }\n\n    function onMediaSegment(type, mediaSegment) {\n        let obj = {\n            msg: TransmuxingEvents.MEDIA_SEGMENT,\n            data: {\n                type: type,\n                data: mediaSegment\n            }\n        };\n        self.postMessage(obj, [mediaSegment.data]);  // data: ArrayBuffer\n    }\n\n    function onLoadingComplete() {\n        let obj = {\n            msg: TransmuxingEvents.LOADING_COMPLETE\n        };\n        self.postMessage(obj);\n    }\n\n    function onRecoveredEarlyEof() {\n        let obj = {\n            msg: TransmuxingEvents.RECOVERED_EARLY_EOF\n        };\n        self.postMessage(obj);\n    }\n\n    function onMediaInfo(mediaInfo) {\n        let obj = {\n            msg: TransmuxingEvents.MEDIA_INFO,\n            data: mediaInfo\n        };\n        self.postMessage(obj);\n    }\n\n    function onMetaDataArrived(metadata) {\n        let obj = {\n            msg: TransmuxingEvents.METADATA_ARRIVED,\n            data: metadata\n        };\n        self.postMessage(obj);\n    }\n\n    function onScriptDataArrived(data) {\n        let obj = {\n            msg: TransmuxingEvents.SCRIPTDATA_ARRIVED,\n            data: data\n        };\n        self.postMessage(obj);\n    }\n\n    function onStatisticsInfo(statInfo) {\n        let obj = {\n            msg: TransmuxingEvents.STATISTICS_INFO,\n            data: statInfo\n        };\n        self.postMessage(obj);\n    }\n\n    function onIOError(type, info) {\n        self.postMessage({\n            msg: TransmuxingEvents.IO_ERROR,\n            data: {\n                type: type,\n                info: info\n            }\n        });\n    }\n\n    function onDemuxError(type, info) {\n        self.postMessage({\n            msg: TransmuxingEvents.DEMUX_ERROR,\n            data: {\n                type: type,\n                info: info\n            }\n        });\n    }\n\n    function onRecommendSeekpoint(milliseconds) {\n        self.postMessage({\n            msg: TransmuxingEvents.RECOMMEND_SEEKPOINT,\n            data: milliseconds\n        });\n    }\n\n    function onLogcatCallback(type, str) {\n        self.postMessage({\n            msg: 'logcat_callback',\n            data: {\n                type: type,\n                logcat: str\n            }\n        });\n    }\n\n};\n\nexport default TransmuxingWorker;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../utils/logger.js';\nimport decodeUTF8 from '../utils/utf8-conv.js';\nimport {IllegalStateException} from '../utils/exception.js';\n\nlet le = (function () {\n    let buf = new ArrayBuffer(2);\n    (new DataView(buf)).setInt16(0, 256, true);  // little-endian write\n    return (new Int16Array(buf))[0] === 256;  // platform-spec read, if equal then LE\n})();\n\nclass AMF {\n\n    static parseScriptData(arrayBuffer, dataOffset, dataSize) {\n        let data = {};\n\n        try {\n            let name = AMF.parseValue(arrayBuffer, dataOffset, dataSize);\n            let value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);\n\n            data[name.data] = value.data;\n        } catch (e) {\n            Log.e('AMF', e.toString());\n        }\n\n        return data;\n    }\n\n    static parseObject(arrayBuffer, dataOffset, dataSize) {\n        if (dataSize < 3) {\n            throw new IllegalStateException('Data not enough when parse ScriptDataObject');\n        }\n        let name = AMF.parseString(arrayBuffer, dataOffset, dataSize);\n        let value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);\n        let isObjectEnd = value.objectEnd;\n\n        return {\n            data: {\n                name: name.data,\n                value: value.data\n            },\n            size: name.size + value.size,\n            objectEnd: isObjectEnd\n        };\n    }\n\n    static parseVariable(arrayBuffer, dataOffset, dataSize) {\n        return AMF.parseObject(arrayBuffer, dataOffset, dataSize);\n    }\n\n    static parseString(arrayBuffer, dataOffset, dataSize) {\n        if (dataSize < 2) {\n            throw new IllegalStateException('Data not enough when parse String');\n        }\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\n        let length = v.getUint16(0, !le);\n\n        let str;\n        if (length > 0) {\n            str = decodeUTF8(new Uint8Array(arrayBuffer, dataOffset + 2, length));\n        } else {\n            str = '';\n        }\n\n        return {\n            data: str,\n            size: 2 + length\n        };\n    }\n\n    static parseLongString(arrayBuffer, dataOffset, dataSize) {\n        if (dataSize < 4) {\n            throw new IllegalStateException('Data not enough when parse LongString');\n        }\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\n        let length = v.getUint32(0, !le);\n\n        let str;\n        if (length > 0) {\n            str = decodeUTF8(new Uint8Array(arrayBuffer, dataOffset + 4, length));\n        } else {\n            str = '';\n        }\n\n        return {\n            data: str,\n            size: 4 + length\n        };\n    }\n\n    static parseDate(arrayBuffer, dataOffset, dataSize) {\n        if (dataSize < 10) {\n            throw new IllegalStateException('Data size invalid when parse Date');\n        }\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\n        let timestamp = v.getFloat64(0, !le);\n        let localTimeOffset = v.getInt16(8, !le);\n        timestamp += localTimeOffset * 60 * 1000;  // get UTC time\n\n        return {\n            data: new Date(timestamp),\n            size: 8 + 2\n        };\n    }\n\n    static parseValue(arrayBuffer, dataOffset, dataSize) {\n        if (dataSize < 1) {\n            throw new IllegalStateException('Data not enough when parse Value');\n        }\n\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        let offset = 1;\n        let type = v.getUint8(0);\n        let value;\n        let objectEnd = false;\n\n        try {\n            switch (type) {\n                case 0:  // Number(Double) type\n                    value = v.getFloat64(1, !le);\n                    offset += 8;\n                    break;\n                case 1: {  // Boolean type\n                    let b = v.getUint8(1);\n                    value = b ? true : false;\n                    offset += 1;\n                    break;\n                }\n                case 2: {  // String type\n                    let amfstr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);\n                    value = amfstr.data;\n                    offset += amfstr.size;\n                    break;\n                }\n                case 3: { // Object(s) type\n                    value = {};\n                    let terminal = 0;  // workaround for malformed Objects which has missing ScriptDataObjectEnd\n                    if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                        terminal = 3;\n                    }\n                    while (offset < dataSize - 4) {  // 4 === type(UI8) + ScriptDataObjectEnd(UI24)\n                        let amfobj = AMF.parseObject(arrayBuffer, dataOffset + offset, dataSize - offset - terminal);\n                        if (amfobj.objectEnd)\n                            break;\n                        value[amfobj.data.name] = amfobj.data.value;\n                        offset += amfobj.size;\n                    }\n                    if (offset <= dataSize - 3) {\n                        let marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;\n                        if (marker === 9) {\n                            offset += 3;\n                        }\n                    }\n                    break;\n                }\n                case 8: { // ECMA array type (Mixed array)\n                    value = {};\n                    offset += 4;  // ECMAArrayLength(UI32)\n                    let terminal = 0;  // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd\n                    if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\n                        terminal = 3;\n                    }\n                    while (offset < dataSize - 8) {  // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)\n                        let amfvar = AMF.parseVariable(arrayBuffer, dataOffset + offset, dataSize - offset - terminal);\n                        if (amfvar.objectEnd)\n                            break;\n                        value[amfvar.data.name] = amfvar.data.value;\n                        offset += amfvar.size;\n                    }\n                    if (offset <= dataSize - 3) {\n                        let marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;\n                        if (marker === 9) {\n                            offset += 3;\n                        }\n                    }\n                    break;\n                }\n                case 9:  // ScriptDataObjectEnd\n                    value = undefined;\n                    offset = 1;\n                    objectEnd = true;\n                    break;\n                case 10: {  // Strict array type\n                    // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf\n                    value = [];\n                    let strictArrayLength = v.getUint32(1, !le);\n                    offset += 4;\n                    for (let i = 0; i < strictArrayLength; i++) {\n                        let val = AMF.parseValue(arrayBuffer, dataOffset + offset, dataSize - offset);\n                        value.push(val.data);\n                        offset += val.size;\n                    }\n                    break;\n                }\n                case 11: {  // Date type\n                    let date = AMF.parseDate(arrayBuffer, dataOffset + 1, dataSize - 1);\n                    value = date.data;\n                    offset += date.size;\n                    break;\n                }\n                case 12: {  // Long string type\n                    let amfLongStr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);\n                    value = amfLongStr.data;\n                    offset += amfLongStr.size;\n                    break;\n                }\n                default:\n                    // ignore and skip\n                    offset = dataSize;\n                    Log.w('AMF', 'Unsupported AMF value type ' + type);\n            }\n        } catch (e) {\n            Log.e('AMF', e.toString());\n        }\n\n        return {\n            data: value,\n            size: offset,\n            objectEnd: objectEnd\n        };\n    }\n\n}\n\nexport default AMF;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst DemuxErrors = {\n    OK: 'OK',\n    FORMAT_ERROR: 'FormatError',\n    FORMAT_UNSUPPORTED: 'FormatUnsupported',\n    CODEC_UNSUPPORTED: 'CodecUnsupported'\n};\n\nexport default DemuxErrors;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IllegalStateException, InvalidArgumentException} from '../utils/exception.js';\n\n// Exponential-Golomb buffer decoder\nclass ExpGolomb {\n\n    constructor(uint8array) {\n        this.TAG = 'ExpGolomb';\n\n        this._buffer = uint8array;\n        this._buffer_index = 0;\n        this._total_bytes = uint8array.byteLength;\n        this._total_bits = uint8array.byteLength * 8;\n        this._current_word = 0;\n        this._current_word_bits_left = 0;\n    }\n\n    destroy() {\n        this._buffer = null;\n    }\n\n    _fillCurrentWord() {\n        let buffer_bytes_left = this._total_bytes - this._buffer_index;\n        if (buffer_bytes_left <= 0)\n            throw new IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');\n\n        let bytes_read = Math.min(4, buffer_bytes_left);\n        let word = new Uint8Array(4);\n        word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));\n        this._current_word = new DataView(word.buffer).getUint32(0, false);\n\n        this._buffer_index += bytes_read;\n        this._current_word_bits_left = bytes_read * 8;\n    }\n\n    readBits(bits) {\n        if (bits > 32)\n            throw new InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');\n\n        if (bits <= this._current_word_bits_left) {\n            let result = this._current_word >>> (32 - bits);\n            this._current_word <<= bits;\n            this._current_word_bits_left -= bits;\n            return result;\n        }\n\n        let result = this._current_word_bits_left ? this._current_word : 0;\n        result = result >>> (32 - this._current_word_bits_left);\n        let bits_need_left = bits - this._current_word_bits_left;\n\n        this._fillCurrentWord();\n        let bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);\n\n        let result2 = this._current_word >>> (32 - bits_read_next);\n        this._current_word <<= bits_read_next;\n        this._current_word_bits_left -= bits_read_next;\n\n        result = (result << bits_read_next) | result2;\n        return result;\n    }\n\n    readBool() {\n        return this.readBits(1) === 1;\n    }\n\n    readByte() {\n        return this.readBits(8);\n    }\n\n    _skipLeadingZero() {\n        let zero_count;\n        for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {\n            if (0 !== (this._current_word & (0x80000000 >>> zero_count))) {\n                this._current_word <<= zero_count;\n                this._current_word_bits_left -= zero_count;\n                return zero_count;\n            }\n        }\n        this._fillCurrentWord();\n        return zero_count + this._skipLeadingZero();\n    }\n\n    readUEG() {  // unsigned exponential golomb\n        let leading_zeros = this._skipLeadingZero();\n        return this.readBits(leading_zeros + 1) - 1;\n    }\n\n    readSEG() {  // signed exponential golomb\n        let value = this.readUEG();\n        if (value & 0x01) {\n            return (value + 1) >>> 1;\n        } else {\n            return -1 * (value >>> 1);\n        }\n    }\n\n}\n\nexport default ExpGolomb;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../utils/logger.js';\nimport AMF from './amf-parser.js';\nimport SPSParser from './sps-parser.js';\nimport DemuxErrors from './demux-errors.js';\nimport MediaInfo from '../core/media-info.js';\nimport {IllegalStateException} from '../utils/exception.js';\n\nfunction Swap16(src) {\n    return (((src >>> 8) & 0xFF) |\n            ((src & 0xFF) << 8));\n}\n\nfunction Swap32(src) {\n    return (((src & 0xFF000000) >>> 24) |\n            ((src & 0x00FF0000) >>> 8)  |\n            ((src & 0x0000FF00) << 8)   |\n            ((src & 0x000000FF) << 24));\n}\n\nfunction ReadBig32(array, index) {\n    return ((array[index] << 24)     |\n            (array[index + 1] << 16) |\n            (array[index + 2] << 8)  |\n            (array[index + 3]));\n}\n\n\nclass FLVDemuxer {\n\n    constructor(probeData, config) {\n        this.TAG = 'FLVDemuxer';\n\n        this._config = config;\n\n        this._onError = null;\n        this._onMediaInfo = null;\n        this._onMetaDataArrived = null;\n        this._onScriptDataArrived = null;\n        this._onTrackMetadata = null;\n        this._onDataAvailable = null;\n\n        this._dataOffset = probeData.dataOffset;\n        this._firstParse = true;\n        this._dispatch = false;\n\n        this._hasAudio = probeData.hasAudioTrack;\n        this._hasVideo = probeData.hasVideoTrack;\n\n        this._hasAudioFlagOverrided = false;\n        this._hasVideoFlagOverrided = false;\n\n        this._audioInitialMetadataDispatched = false;\n        this._videoInitialMetadataDispatched = false;\n\n        this._mediaInfo = new MediaInfo();\n        this._mediaInfo.hasAudio = this._hasAudio;\n        this._mediaInfo.hasVideo = this._hasVideo;\n        this._metadata = null;\n        this._audioMetadata = null;\n        this._videoMetadata = null;\n\n        this._naluLengthSize = 4;\n        this._timestampBase = 0;  // int32, in milliseconds\n        this._timescale = 1000;\n        this._duration = 0;  // int32, in milliseconds\n        this._durationOverrided = false;\n        this._referenceFrameRate = {\n            fixed: true,\n            fps: 23.976,\n            fps_num: 23976,\n            fps_den: 1000\n        };\n\n        this._flvSoundRateTable = [5500, 11025, 22050, 44100, 48000];\n\n        this._mpegSamplingRates = [\n            96000, 88200, 64000, 48000, 44100, 32000,\n            24000, 22050, 16000, 12000, 11025, 8000, 7350\n        ];\n\n        this._mpegAudioV10SampleRateTable = [44100, 48000, 32000, 0];\n        this._mpegAudioV20SampleRateTable = [22050, 24000, 16000, 0];\n        this._mpegAudioV25SampleRateTable = [11025, 12000, 8000,  0];\n\n        this._mpegAudioL1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1];\n        this._mpegAudioL2BitRateTable = [0, 32, 48, 56,  64,  80,  96, 112, 128, 160, 192, 224, 256, 320, 384, -1];\n        this._mpegAudioL3BitRateTable = [0, 32, 40, 48,  56,  64,  80,  96, 112, 128, 160, 192, 224, 256, 320, -1];\n\n        this._videoTrack = {type: 'video', id: 1, sequenceNumber: 0, samples: [], length: 0};\n        this._audioTrack = {type: 'audio', id: 2, sequenceNumber: 0, samples: [], length: 0};\n\n        this._littleEndian = (function () {\n            let buf = new ArrayBuffer(2);\n            (new DataView(buf)).setInt16(0, 256, true);  // little-endian write\n            return (new Int16Array(buf))[0] === 256;  // platform-spec read, if equal then LE\n        })();\n    }\n\n    destroy() {\n        this._mediaInfo = null;\n        this._metadata = null;\n        this._audioMetadata = null;\n        this._videoMetadata = null;\n        this._videoTrack = null;\n        this._audioTrack = null;\n\n        this._onError = null;\n        this._onMediaInfo = null;\n        this._onMetaDataArrived = null;\n        this._onScriptDataArrived = null;\n        this._onTrackMetadata = null;\n        this._onDataAvailable = null;\n    }\n\n    static probe(buffer) {\n        let data = new Uint8Array(buffer);\n        let mismatch = {match: false};\n\n        if (data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01) {\n            return mismatch;\n        }\n\n        let hasAudio = ((data[4] & 4) >>> 2) !== 0;\n        let hasVideo = (data[4] & 1) !== 0;\n\n        let offset = ReadBig32(data, 5);\n\n        if (offset < 9) {\n            return mismatch;\n        }\n\n        return {\n            match: true,\n            consumed: offset,\n            dataOffset: offset,\n            hasAudioTrack: hasAudio,\n            hasVideoTrack: hasVideo\n        };\n    }\n\n    bindDataSource(loader) {\n        loader.onDataArrival = this.parseChunks.bind(this);\n        return this;\n    }\n\n    // prototype: function(type: string, metadata: any): void\n    get onTrackMetadata() {\n        return this._onTrackMetadata;\n    }\n\n    set onTrackMetadata(callback) {\n        this._onTrackMetadata = callback;\n    }\n\n    // prototype: function(mediaInfo: MediaInfo): void\n    get onMediaInfo() {\n        return this._onMediaInfo;\n    }\n\n    set onMediaInfo(callback) {\n        this._onMediaInfo = callback;\n    }\n\n    get onMetaDataArrived() {\n        return this._onMetaDataArrived;\n    }\n\n    set onMetaDataArrived(callback) {\n        this._onMetaDataArrived = callback;\n    }\n\n    get onScriptDataArrived() {\n        return this._onScriptDataArrived;\n    }\n\n    set onScriptDataArrived(callback) {\n        this._onScriptDataArrived = callback;\n    }\n\n    // prototype: function(type: number, info: string): void\n    get onError() {\n        return this._onError;\n    }\n\n    set onError(callback) {\n        this._onError = callback;\n    }\n\n    // prototype: function(videoTrack: any, audioTrack: any): void\n    get onDataAvailable() {\n        return this._onDataAvailable;\n    }\n\n    set onDataAvailable(callback) {\n        this._onDataAvailable = callback;\n    }\n\n    // timestamp base for output samples, must be in milliseconds\n    get timestampBase() {\n        return this._timestampBase;\n    }\n\n    set timestampBase(base) {\n        this._timestampBase = base;\n    }\n\n    get overridedDuration() {\n        return this._duration;\n    }\n\n    // Force-override media duration. Must be in milliseconds, int32\n    set overridedDuration(duration) {\n        this._durationOverrided = true;\n        this._duration = duration;\n        this._mediaInfo.duration = duration;\n    }\n\n    // Force-override audio track present flag, boolean\n    set overridedHasAudio(hasAudio) {\n        this._hasAudioFlagOverrided = true;\n        this._hasAudio = hasAudio;\n        this._mediaInfo.hasAudio = hasAudio;\n    }\n\n    // Force-override video track present flag, boolean\n    set overridedHasVideo(hasVideo) {\n        this._hasVideoFlagOverrided = true;\n        this._hasVideo = hasVideo;\n        this._mediaInfo.hasVideo = hasVideo;\n    }\n\n    resetMediaInfo() {\n        this._mediaInfo = new MediaInfo();\n    }\n\n    _isInitialMetadataDispatched() {\n        if (this._hasAudio && this._hasVideo) {  // both audio & video\n            return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;\n        }\n        if (this._hasAudio && !this._hasVideo) {  // audio only\n            return this._audioInitialMetadataDispatched;\n        }\n        if (!this._hasAudio && this._hasVideo) {  // video only\n            return this._videoInitialMetadataDispatched;\n        }\n        return false;\n    }\n\n    // function parseChunks(chunk: ArrayBuffer, byteStart: number): number;\n    parseChunks(chunk, byteStart) {\n        if (!this._onError || !this._onMediaInfo || !this._onTrackMetadata || !this._onDataAvailable) {\n            throw new IllegalStateException('Flv: onError & onMediaInfo & onTrackMetadata & onDataAvailable callback must be specified');\n        }\n\n        let offset = 0;\n        let le = this._littleEndian;\n\n        if (byteStart === 0) {  // buffer with FLV header\n            if (chunk.byteLength > 13) {\n                let probeData = FLVDemuxer.probe(chunk);\n                offset = probeData.dataOffset;\n            } else {\n                return 0;\n            }\n        }\n\n        if (this._firstParse) {  // handle PreviousTagSize0 before Tag1\n            this._firstParse = false;\n            if (byteStart + offset !== this._dataOffset) {\n                Log.w(this.TAG, 'First time parsing but chunk byteStart invalid!');\n            }\n\n            let v = new DataView(chunk, offset);\n            let prevTagSize0 = v.getUint32(0, !le);\n            if (prevTagSize0 !== 0) {\n                Log.w(this.TAG, 'PrevTagSize0 !== 0 !!!');\n            }\n            offset += 4;\n        }\n\n        while (offset < chunk.byteLength) {\n            this._dispatch = true;\n\n            let v = new DataView(chunk, offset);\n\n            if (offset + 11 + 4 > chunk.byteLength) {\n                // data not enough for parsing an flv tag\n                break;\n            }\n\n            let tagType = v.getUint8(0);\n            let dataSize = v.getUint32(0, !le) & 0x00FFFFFF;\n\n            if (offset + 11 + dataSize + 4 > chunk.byteLength) {\n                // data not enough for parsing actual data body\n                break;\n            }\n\n            if (tagType !== 8 && tagType !== 9 && tagType !== 18) {\n                Log.w(this.TAG, `Unsupported tag type ${tagType}, skipped`);\n                // consume the whole tag (skip it)\n                offset += 11 + dataSize + 4;\n                continue;\n            }\n\n            let ts2 = v.getUint8(4);\n            let ts1 = v.getUint8(5);\n            let ts0 = v.getUint8(6);\n            let ts3 = v.getUint8(7);\n\n            let timestamp = ts0 | (ts1 << 8) | (ts2 << 16) | (ts3 << 24);\n\n            let streamId = v.getUint32(7, !le) & 0x00FFFFFF;\n            if (streamId !== 0) {\n                Log.w(this.TAG, 'Meet tag which has StreamID != 0!');\n            }\n\n            let dataOffset = offset + 11;\n\n            switch (tagType) {\n                case 8:  // Audio\n                    this._parseAudioData(chunk, dataOffset, dataSize, timestamp);\n                    break;\n                case 9:  // Video\n                    this._parseVideoData(chunk, dataOffset, dataSize, timestamp, byteStart + offset);\n                    break;\n                case 18:  // ScriptDataObject\n                    this._parseScriptData(chunk, dataOffset, dataSize);\n                    break;\n            }\n\n            let prevTagSize = v.getUint32(11 + dataSize, !le);\n            if (prevTagSize !== 11 + dataSize) {\n                Log.w(this.TAG, `Invalid PrevTagSize ${prevTagSize}`);\n            }\n\n            offset += 11 + dataSize + 4;  // tagBody + dataSize + prevTagSize\n        }\n\n        // dispatch parsed frames to consumer (typically, the remuxer)\n        if (this._isInitialMetadataDispatched()) {\n            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                this._onDataAvailable(this._audioTrack, this._videoTrack);\n            }\n        }\n\n        return offset;  // consumed bytes, just equals latest offset index\n    }\n\n    _parseScriptData(arrayBuffer, dataOffset, dataSize) {\n        let scriptData = AMF.parseScriptData(arrayBuffer, dataOffset, dataSize);\n\n        if (scriptData.hasOwnProperty('onMetaData')) {\n            if (scriptData.onMetaData == null || typeof scriptData.onMetaData !== 'object') {\n                Log.w(this.TAG, 'Invalid onMetaData structure!');\n                return;\n            }\n            if (this._metadata) {\n                Log.w(this.TAG, 'Found another onMetaData tag!');\n            }\n            this._metadata = scriptData;\n            let onMetaData = this._metadata.onMetaData;\n\n            if (this._onMetaDataArrived) {\n                this._onMetaDataArrived(Object.assign({}, onMetaData));\n            }\n\n            if (typeof onMetaData.hasAudio === 'boolean') {  // hasAudio\n                if (this._hasAudioFlagOverrided === false) {\n                    this._hasAudio = onMetaData.hasAudio;\n                    this._mediaInfo.hasAudio = this._hasAudio;\n                }\n            }\n            if (typeof onMetaData.hasVideo === 'boolean') {  // hasVideo\n                if (this._hasVideoFlagOverrided === false) {\n                    this._hasVideo = onMetaData.hasVideo;\n                    this._mediaInfo.hasVideo = this._hasVideo;\n                }\n            }\n            if (typeof onMetaData.audiodatarate === 'number') {  // audiodatarate\n                this._mediaInfo.audioDataRate = onMetaData.audiodatarate;\n            }\n            if (typeof onMetaData.videodatarate === 'number') {  // videodatarate\n                this._mediaInfo.videoDataRate = onMetaData.videodatarate;\n            }\n            if (typeof onMetaData.width === 'number') {  // width\n                this._mediaInfo.width = onMetaData.width;\n            }\n            if (typeof onMetaData.height === 'number') {  // height\n                this._mediaInfo.height = onMetaData.height;\n            }\n            if (typeof onMetaData.duration === 'number') {  // duration\n                if (!this._durationOverrided) {\n                    let duration = Math.floor(onMetaData.duration * this._timescale);\n                    this._duration = duration;\n                    this._mediaInfo.duration = duration;\n                }\n            } else {\n                this._mediaInfo.duration = 0;\n            }\n            if (typeof onMetaData.framerate === 'number') {  // framerate\n                let fps_num = Math.floor(onMetaData.framerate * 1000);\n                if (fps_num > 0) {\n                    let fps = fps_num / 1000;\n                    this._referenceFrameRate.fixed = true;\n                    this._referenceFrameRate.fps = fps;\n                    this._referenceFrameRate.fps_num = fps_num;\n                    this._referenceFrameRate.fps_den = 1000;\n                    this._mediaInfo.fps = fps;\n                }\n            }\n            if (typeof onMetaData.keyframes === 'object') {  // keyframes\n                this._mediaInfo.hasKeyframesIndex = true;\n                let keyframes = onMetaData.keyframes;\n                this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);\n                onMetaData.keyframes = null;  // keyframes has been extracted, remove it\n            } else {\n                this._mediaInfo.hasKeyframesIndex = false;\n            }\n            this._dispatch = false;\n            this._mediaInfo.metadata = onMetaData;\n            Log.v(this.TAG, 'Parsed onMetaData');\n            if (this._mediaInfo.isComplete()) {\n                this._onMediaInfo(this._mediaInfo);\n            }\n        }\n\n        if (Object.keys(scriptData).length > 0) {\n            if (this._onScriptDataArrived) {\n                this._onScriptDataArrived(Object.assign({}, scriptData));\n            }\n        }\n    }\n\n    _parseKeyframesIndex(keyframes) {\n        let times = [];\n        let filepositions = [];\n\n        // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)\n        for (let i = 1; i < keyframes.times.length; i++) {\n            let time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);\n            times.push(time);\n            filepositions.push(keyframes.filepositions[i]);\n        }\n\n        return {\n            times: times,\n            filepositions: filepositions\n        };\n    }\n\n    _parseAudioData(arrayBuffer, dataOffset, dataSize, tagTimestamp) {\n        if (dataSize <= 1) {\n            Log.w(this.TAG, 'Flv: Invalid audio packet, missing SoundData payload!');\n            return;\n        }\n\n        if (this._hasAudioFlagOverrided === true && this._hasAudio === false) {\n            // If hasAudio: false indicated explicitly in MediaDataSource,\n            // Ignore all the audio packets\n            return;\n        }\n\n        let le = this._littleEndian;\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        let soundSpec = v.getUint8(0);\n\n        let soundFormat = soundSpec >>> 4;\n        if (soundFormat !== 2 && soundFormat !== 10) {  // MP3 or AAC\n            this._onError(DemuxErrors.CODEC_UNSUPPORTED, 'Flv: Unsupported audio codec idx: ' + soundFormat);\n            return;\n        }\n\n        let soundRate = 0;\n        let soundRateIndex = (soundSpec & 12) >>> 2;\n        if (soundRateIndex >= 0 && soundRateIndex <= 4) {\n            soundRate = this._flvSoundRateTable[soundRateIndex];\n        } else {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid audio sample rate idx: ' + soundRateIndex);\n            return;\n        }\n\n        let soundSize = (soundSpec & 2) >>> 1;  // unused\n        let soundType = (soundSpec & 1);\n\n\n        let meta = this._audioMetadata;\n        let track = this._audioTrack;\n\n        if (!meta) {\n            if (this._hasAudio === false && this._hasAudioFlagOverrided === false) {\n                this._hasAudio = true;\n                this._mediaInfo.hasAudio = true;\n            }\n\n            // initial metadata\n            meta = this._audioMetadata = {};\n            meta.type = 'audio';\n            meta.id = track.id;\n            meta.timescale = this._timescale;\n            meta.duration = this._duration;\n            meta.audioSampleRate = soundRate;\n            meta.channelCount = (soundType === 0 ? 1 : 2);\n        }\n\n        if (soundFormat === 10) {  // AAC\n            let aacData = this._parseAACAudioData(arrayBuffer, dataOffset + 1, dataSize - 1);\n            if (aacData == undefined) {\n                return;\n            }\n\n            if (aacData.packetType === 0) {  // AAC sequence header (AudioSpecificConfig)\n                if (meta.config) {\n                    Log.w(this.TAG, 'Found another AudioSpecificConfig!');\n                }\n                let misc = aacData.data;\n                meta.audioSampleRate = misc.samplingRate;\n                meta.channelCount = misc.channelCount;\n                meta.codec = misc.codec;\n                meta.originalCodec = misc.originalCodec;\n                meta.config = misc.config;\n                // The decode result of an aac sample is 1024 PCM samples\n                meta.refSampleDuration = 1024 / meta.audioSampleRate * meta.timescale;\n                Log.v(this.TAG, 'Parsed AudioSpecificConfig');\n\n                if (this._isInitialMetadataDispatched()) {\n                    // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer\n                    if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                        this._onDataAvailable(this._audioTrack, this._videoTrack);\n                    }\n                } else {\n                    this._audioInitialMetadataDispatched = true;\n                }\n                // then notify new metadata\n                this._dispatch = false;\n                this._onTrackMetadata('audio', meta);\n\n                let mi = this._mediaInfo;\n                mi.audioCodec = meta.originalCodec;\n                mi.audioSampleRate = meta.audioSampleRate;\n                mi.audioChannelCount = meta.channelCount;\n                if (mi.hasVideo) {\n                    if (mi.videoCodec != null) {\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                    }\n                } else {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.audioCodec + '\"';\n                }\n                if (mi.isComplete()) {\n                    this._onMediaInfo(mi);\n                }\n            } else if (aacData.packetType === 1) {  // AAC raw frame data\n                let dts = this._timestampBase + tagTimestamp;\n                let aacSample = {unit: aacData.data, length: aacData.data.byteLength, dts: dts, pts: dts};\n                track.samples.push(aacSample);\n                track.length += aacData.data.length;\n            } else {\n                Log.e(this.TAG, `Flv: Unsupported AAC data type ${aacData.packetType}`);\n            }\n        } else if (soundFormat === 2) {  // MP3\n            if (!meta.codec) {\n                // We need metadata for mp3 audio track, extract info from frame header\n                let misc = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, true);\n                if (misc == undefined) {\n                    return;\n                }\n                meta.audioSampleRate = misc.samplingRate;\n                meta.channelCount = misc.channelCount;\n                meta.codec = misc.codec;\n                meta.originalCodec = misc.originalCodec;\n                // The decode result of an mp3 sample is 1152 PCM samples\n                meta.refSampleDuration = 1152 / meta.audioSampleRate * meta.timescale;\n                Log.v(this.TAG, 'Parsed MPEG Audio Frame Header');\n\n                this._audioInitialMetadataDispatched = true;\n                this._onTrackMetadata('audio', meta);\n\n                let mi = this._mediaInfo;\n                mi.audioCodec = meta.codec;\n                mi.audioSampleRate = meta.audioSampleRate;\n                mi.audioChannelCount = meta.channelCount;\n                mi.audioDataRate = misc.bitRate;\n                if (mi.hasVideo) {\n                    if (mi.videoCodec != null) {\n                        mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                    }\n                } else {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.audioCodec + '\"';\n                }\n                if (mi.isComplete()) {\n                    this._onMediaInfo(mi);\n                }\n            }\n\n            // This packet is always a valid audio packet, extract it\n            let data = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, false);\n            if (data == undefined) {\n                return;\n            }\n            let dts = this._timestampBase + tagTimestamp;\n            let mp3Sample = {unit: data, length: data.byteLength, dts: dts, pts: dts};\n            track.samples.push(mp3Sample);\n            track.length += data.length;\n        }\n    }\n\n    _parseAACAudioData(arrayBuffer, dataOffset, dataSize) {\n        if (dataSize <= 1) {\n            Log.w(this.TAG, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');\n            return;\n        }\n\n        let result = {};\n        let array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n\n        result.packetType = array[0];\n\n        if (array[0] === 0) {\n            result.data = this._parseAACAudioSpecificConfig(arrayBuffer, dataOffset + 1, dataSize - 1);\n        } else {\n            result.data = array.subarray(1);\n        }\n\n        return result;\n    }\n\n    _parseAACAudioSpecificConfig(arrayBuffer, dataOffset, dataSize) {\n        let array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n        let config = null;\n\n        /* Audio Object Type:\n           0: Null\n           1: AAC Main\n           2: AAC LC\n           3: AAC SSR (Scalable Sample Rate)\n           4: AAC LTP (Long Term Prediction)\n           5: HE-AAC / SBR (Spectral Band Replication)\n           6: AAC Scalable\n        */\n\n        let audioObjectType = 0;\n        let originalAudioObjectType = 0;\n        let audioExtensionObjectType = null;\n        let samplingIndex = 0;\n        let extensionSamplingIndex = null;\n\n        // 5 bits\n        audioObjectType = originalAudioObjectType = array[0] >>> 3;\n        // 4 bits\n        samplingIndex = ((array[0] & 0x07) << 1) | (array[1] >>> 7);\n        if (samplingIndex < 0 || samplingIndex >= this._mpegSamplingRates.length) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid sampling frequency index!');\n            return;\n        }\n\n        let samplingFrequence = this._mpegSamplingRates[samplingIndex];\n\n        // 4 bits\n        let channelConfig = (array[1] & 0x78) >>> 3;\n        if (channelConfig < 0 || channelConfig >= 8) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: AAC invalid channel configuration');\n            return;\n        }\n\n        if (audioObjectType === 5) {  // HE-AAC?\n            // 4 bits\n            extensionSamplingIndex = ((array[1] & 0x07) << 1) | (array[2] >>> 7);\n            // 5 bits\n            audioExtensionObjectType = (array[2] & 0x7C) >>> 2;\n        }\n\n        // workarounds for various browsers\n        let userAgent = self.navigator.userAgent.toLowerCase();\n\n        if (userAgent.indexOf('firefox') !== -1) {\n            // firefox: use SBR (HE-AAC) if freq less than 24kHz\n            if (samplingIndex >= 6) {\n                audioObjectType = 5;\n                config = new Array(4);\n                extensionSamplingIndex = samplingIndex - 3;\n            } else {  // use LC-AAC\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            }\n        } else if (userAgent.indexOf('android') !== -1) {\n            // android: always use LC-AAC\n            audioObjectType = 2;\n            config = new Array(2);\n            extensionSamplingIndex = samplingIndex;\n        } else {\n            // for other browsers, e.g. chrome...\n            // Always use HE-AAC to make it easier to switch aac codec profile\n            audioObjectType = 5;\n            extensionSamplingIndex = samplingIndex;\n            config = new Array(4);\n\n            if (samplingIndex >= 6) {\n                extensionSamplingIndex = samplingIndex - 3;\n            } else if (channelConfig === 1) {  // Mono channel\n                audioObjectType = 2;\n                config = new Array(2);\n                extensionSamplingIndex = samplingIndex;\n            }\n        }\n\n        config[0]  = audioObjectType << 3;\n        config[0] |= (samplingIndex & 0x0F) >>> 1;\n        config[1]  = (samplingIndex & 0x0F) << 7;\n        config[1] |= (channelConfig & 0x0F) << 3;\n        if (audioObjectType === 5) {\n            config[1] |= ((extensionSamplingIndex & 0x0F) >>> 1);\n            config[2]  = (extensionSamplingIndex & 0x01) << 7;\n            // extended audio object type: force to 2 (LC-AAC)\n            config[2] |= (2 << 2);\n            config[3]  = 0;\n        }\n\n        return {\n            config: config,\n            samplingRate: samplingFrequence,\n            channelCount: channelConfig,\n            codec: 'mp4a.40.' + audioObjectType,\n            originalCodec: 'mp4a.40.' + originalAudioObjectType\n        };\n    }\n\n    _parseMP3AudioData(arrayBuffer, dataOffset, dataSize, requestHeader) {\n        if (dataSize < 4) {\n            Log.w(this.TAG, 'Flv: Invalid MP3 packet, header missing!');\n            return;\n        }\n\n        let le = this._littleEndian;\n        let array = new Uint8Array(arrayBuffer, dataOffset, dataSize);\n        let result = null;\n\n        if (requestHeader) {\n            if (array[0] !== 0xFF) {\n                return;\n            }\n            let ver = (array[1] >>> 3) & 0x03;\n            let layer = (array[1] & 0x06) >> 1;\n\n            let bitrate_index = (array[2] & 0xF0) >>> 4;\n            let sampling_freq_index = (array[2] & 0x0C) >>> 2;\n\n            let channel_mode = (array[3] >>> 6) & 0x03;\n            let channel_count = channel_mode !== 3 ? 2 : 1;\n\n            let sample_rate = 0;\n            let bit_rate = 0;\n            let object_type = 34;  // Layer-3, listed in MPEG-4 Audio Object Types\n\n            let codec = 'mp3';\n\n            switch (ver) {\n                case 0:  // MPEG 2.5\n                    sample_rate = this._mpegAudioV25SampleRateTable[sampling_freq_index];\n                    break;\n                case 2:  // MPEG 2\n                    sample_rate = this._mpegAudioV20SampleRateTable[sampling_freq_index];\n                    break;\n                case 3:  // MPEG 1\n                    sample_rate = this._mpegAudioV10SampleRateTable[sampling_freq_index];\n                    break;\n            }\n\n            switch (layer) {\n                case 1:  // Layer 3\n                    object_type = 34;\n                    if (bitrate_index < this._mpegAudioL3BitRateTable.length) {\n                        bit_rate = this._mpegAudioL3BitRateTable[bitrate_index];\n                    }\n                    break;\n                case 2:  // Layer 2\n                    object_type = 33;\n                    if (bitrate_index < this._mpegAudioL2BitRateTable.length) {\n                        bit_rate = this._mpegAudioL2BitRateTable[bitrate_index];\n                    }\n                    break;\n                case 3:  // Layer 1\n                    object_type = 32;\n                    if (bitrate_index < this._mpegAudioL1BitRateTable.length) {\n                        bit_rate = this._mpegAudioL1BitRateTable[bitrate_index];\n                    }\n                    break;\n            }\n\n            result = {\n                bitRate: bit_rate,\n                samplingRate: sample_rate,\n                channelCount: channel_count,\n                codec: codec,\n                originalCodec: codec\n            };\n        } else {\n            result = array;\n        }\n\n        return result;\n    }\n\n    _parseVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition) {\n        if (dataSize <= 1) {\n            Log.w(this.TAG, 'Flv: Invalid video packet, missing VideoData payload!');\n            return;\n        }\n\n        if (this._hasVideoFlagOverrided === true && this._hasVideo === false) {\n            // If hasVideo: false indicated explicitly in MediaDataSource,\n            // Ignore all the video packets\n            return;\n        }\n\n        let spec = (new Uint8Array(arrayBuffer, dataOffset, dataSize))[0];\n\n        let frameType = (spec & 240) >>> 4;\n        let codecId = spec & 15;\n\n        if (codecId !== 7) {\n            this._onError(DemuxErrors.CODEC_UNSUPPORTED, `Flv: Unsupported codec in video frame: ${codecId}`);\n            return;\n        }\n\n        this._parseAVCVideoPacket(arrayBuffer, dataOffset + 1, dataSize - 1, tagTimestamp, tagPosition, frameType);\n    }\n\n    _parseAVCVideoPacket(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType) {\n        if (dataSize < 4) {\n            Log.w(this.TAG, 'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime');\n            return;\n        }\n\n        let le = this._littleEndian;\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        let packetType = v.getUint8(0);\n        let cts_unsigned = v.getUint32(0, !le) & 0x00FFFFFF;\n        let cts = (cts_unsigned << 8) >> 8;  // convert to 24-bit signed int\n\n        if (packetType === 0) {  // AVCDecoderConfigurationRecord\n            this._parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset + 4, dataSize - 4);\n        } else if (packetType === 1) {  // One or more Nalus\n            this._parseAVCVideoData(arrayBuffer, dataOffset + 4, dataSize - 4, tagTimestamp, tagPosition, frameType, cts);\n        } else if (packetType === 2) {\n            // empty, AVC end of sequence\n        } else {\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Invalid video packet type ${packetType}`);\n            return;\n        }\n    }\n\n    _parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset, dataSize) {\n        if (dataSize < 7) {\n            Log.w(this.TAG, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');\n            return;\n        }\n\n        let meta = this._videoMetadata;\n        let track = this._videoTrack;\n        let le = this._littleEndian;\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        if (!meta) {\n            if (this._hasVideo === false && this._hasVideoFlagOverrided === false) {\n                this._hasVideo = true;\n                this._mediaInfo.hasVideo = true;\n            }\n\n            meta = this._videoMetadata = {};\n            meta.type = 'video';\n            meta.id = track.id;\n            meta.timescale = this._timescale;\n            meta.duration = this._duration;\n        } else {\n            if (typeof meta.avcc !== 'undefined') {\n                Log.w(this.TAG, 'Found another AVCDecoderConfigurationRecord!');\n            }\n        }\n\n        let version = v.getUint8(0);  // configurationVersion\n        let avcProfile = v.getUint8(1);  // avcProfileIndication\n        let profileCompatibility = v.getUint8(2);  // profile_compatibility\n        let avcLevel = v.getUint8(3);  // AVCLevelIndication\n\n        if (version !== 1 || avcProfile === 0) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');\n            return;\n        }\n\n        this._naluLengthSize = (v.getUint8(4) & 3) + 1;  // lengthSizeMinusOne\n        if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) {  // holy shit!!!\n            this._onError(DemuxErrors.FORMAT_ERROR, `Flv: Strange NaluLengthSizeMinusOne: ${this._naluLengthSize - 1}`);\n            return;\n        }\n\n        let spsCount = v.getUint8(5) & 31;  // numOfSequenceParameterSets\n        if (spsCount === 0) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No SPS');\n            return;\n        } else if (spsCount > 1) {\n            Log.w(this.TAG, `Flv: Strange AVCDecoderConfigurationRecord: SPS Count = ${spsCount}`);\n        }\n\n        let offset = 6;\n\n        for (let i = 0; i < spsCount; i++) {\n            let len = v.getUint16(offset, !le);  // sequenceParameterSetLength\n            offset += 2;\n\n            if (len === 0) {\n                continue;\n            }\n\n            // Notice: Nalu without startcode header (00 00 00 01)\n            let sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\n            offset += len;\n\n            let config = SPSParser.parseSPS(sps);\n            if (i !== 0) {\n                // ignore other sps's config\n                continue;\n            }\n\n            meta.codecWidth = config.codec_size.width;\n            meta.codecHeight = config.codec_size.height;\n            meta.presentWidth = config.present_size.width;\n            meta.presentHeight = config.present_size.height;\n\n            meta.profile = config.profile_string;\n            meta.level = config.level_string;\n            meta.bitDepth = config.bit_depth;\n            meta.chromaFormat = config.chroma_format;\n            meta.sarRatio = config.sar_ratio;\n            meta.frameRate = config.frame_rate;\n\n            if (config.frame_rate.fixed === false ||\n                config.frame_rate.fps_num === 0 ||\n                config.frame_rate.fps_den === 0) {\n                meta.frameRate = this._referenceFrameRate;\n            }\n\n            let fps_den = meta.frameRate.fps_den;\n            let fps_num = meta.frameRate.fps_num;\n            meta.refSampleDuration = meta.timescale * (fps_den / fps_num);\n\n            let codecArray = sps.subarray(1, 4);\n            let codecString = 'avc1.';\n            for (let j = 0; j < 3; j++) {\n                let h = codecArray[j].toString(16);\n                if (h.length < 2) {\n                    h = '0' + h;\n                }\n                codecString += h;\n            }\n            meta.codec = codecString;\n\n            let mi = this._mediaInfo;\n            mi.width = meta.codecWidth;\n            mi.height = meta.codecHeight;\n            mi.fps = meta.frameRate.fps;\n            mi.profile = meta.profile;\n            mi.level = meta.level;\n            mi.refFrames = config.ref_frames;\n            mi.chromaFormat = config.chroma_format_string;\n            mi.sarNum = meta.sarRatio.width;\n            mi.sarDen = meta.sarRatio.height;\n            mi.videoCodec = codecString;\n\n            if (mi.hasAudio) {\n                if (mi.audioCodec != null) {\n                    mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + ',' + mi.audioCodec + '\"';\n                }\n            } else {\n                mi.mimeType = 'video/x-flv; codecs=\"' + mi.videoCodec + '\"';\n            }\n            if (mi.isComplete()) {\n                this._onMediaInfo(mi);\n            }\n        }\n\n        let ppsCount = v.getUint8(offset);  // numOfPictureParameterSets\n        if (ppsCount === 0) {\n            this._onError(DemuxErrors.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No PPS');\n            return;\n        } else if (ppsCount > 1) {\n            Log.w(this.TAG, `Flv: Strange AVCDecoderConfigurationRecord: PPS Count = ${ppsCount}`);\n        }\n\n        offset++;\n\n        for (let i = 0; i < ppsCount; i++) {\n            let len = v.getUint16(offset, !le);  // pictureParameterSetLength\n            offset += 2;\n\n            if (len === 0) {\n                continue;\n            }\n\n            // pps is useless for extracting video information\n            offset += len;\n        }\n\n        meta.avcc = new Uint8Array(dataSize);\n        meta.avcc.set(new Uint8Array(arrayBuffer, dataOffset, dataSize), 0);\n        Log.v(this.TAG, 'Parsed AVCDecoderConfigurationRecord');\n\n        if (this._isInitialMetadataDispatched()) {\n            // flush parsed frames\n            if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {\n                this._onDataAvailable(this._audioTrack, this._videoTrack);\n            }\n        } else {\n            this._videoInitialMetadataDispatched = true;\n        }\n        // notify new metadata\n        this._dispatch = false;\n        this._onTrackMetadata('video', meta);\n    }\n\n    _parseAVCVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType, cts) {\n        let le = this._littleEndian;\n        let v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        let units = [], length = 0;\n\n        let offset = 0;\n        const lengthSize = this._naluLengthSize;\n        let dts = this._timestampBase + tagTimestamp;\n        let keyframe = (frameType === 1);  // from FLV Frame Type constants\n\n        while (offset < dataSize) {\n            if (offset + 4 >= dataSize) {\n                Log.w(this.TAG, `Malformed Nalu near timestamp ${dts}, offset = ${offset}, dataSize = ${dataSize}`);\n                break;  // data not enough for next Nalu\n            }\n            // Nalu with length-header (AVC1)\n            let naluSize = v.getUint32(offset, !le);  // Big-Endian read\n            if (lengthSize === 3) {\n                naluSize >>>= 8;\n            }\n            if (naluSize > dataSize - lengthSize) {\n                Log.w(this.TAG, `Malformed Nalus near timestamp ${dts}, NaluSize > DataSize!`);\n                return;\n            }\n\n            let unitType = v.getUint8(offset + lengthSize) & 0x1F;\n\n            if (unitType === 5) {  // IDR\n                keyframe = true;\n            }\n\n            let data = new Uint8Array(arrayBuffer, dataOffset + offset, lengthSize + naluSize);\n            let unit = {type: unitType, data: data};\n            units.push(unit);\n            length += data.byteLength;\n\n            offset += lengthSize + naluSize;\n        }\n\n        if (units.length) {\n            let track = this._videoTrack;\n            let avcSample = {\n                units: units,\n                length: length,\n                isKeyframe: keyframe,\n                dts: dts,\n                cts: cts,\n                pts: (dts + cts)\n            };\n            if (keyframe) {\n                avcSample.fileposition = tagPosition;\n            }\n            track.samples.push(avcSample);\n            track.length += length;\n        }\n    }\n\n}\n\nexport default FLVDemuxer;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ExpGolomb from './exp-golomb.js';\n\nclass SPSParser {\n\n    static _ebsp2rbsp(uint8array) {\n        let src = uint8array;\n        let src_length = src.byteLength;\n        let dst = new Uint8Array(src_length);\n        let dst_idx = 0;\n\n        for (let i = 0; i < src_length; i++) {\n            if (i >= 2) {\n                // Unescape: Skip 0x03 after 00 00\n                if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {\n                    continue;\n                }\n            }\n            dst[dst_idx] = src[i];\n            dst_idx++;\n        }\n\n        return new Uint8Array(dst.buffer, 0, dst_idx);\n    }\n\n    static parseSPS(uint8array) {\n        let rbsp = SPSParser._ebsp2rbsp(uint8array);\n        let gb = new ExpGolomb(rbsp);\n\n        gb.readByte();\n        let profile_idc = gb.readByte();  // profile_idc\n        gb.readByte();  // constraint_set_flags[5] + reserved_zero[3]\n        let level_idc = gb.readByte();  // level_idc\n        gb.readUEG();  // seq_parameter_set_id\n\n        let profile_string = SPSParser.getProfileString(profile_idc);\n        let level_string = SPSParser.getLevelString(level_idc);\n        let chroma_format_idc = 1;\n        let chroma_format = 420;\n        let chroma_format_table = [0, 420, 422, 444];\n        let bit_depth = 8;\n\n        if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 ||\n            profile_idc === 244 || profile_idc === 44 || profile_idc === 83 ||\n            profile_idc === 86 || profile_idc === 118 || profile_idc === 128 ||\n            profile_idc === 138 || profile_idc === 144) {\n\n            chroma_format_idc = gb.readUEG();\n            if (chroma_format_idc === 3) {\n                gb.readBits(1);  // separate_colour_plane_flag\n            }\n            if (chroma_format_idc <= 3) {\n                chroma_format = chroma_format_table[chroma_format_idc];\n            }\n\n            bit_depth = gb.readUEG() + 8;  // bit_depth_luma_minus8\n            gb.readUEG();  // bit_depth_chroma_minus8\n            gb.readBits(1);  // qpprime_y_zero_transform_bypass_flag\n            if (gb.readBool()) {  // seq_scaling_matrix_present_flag\n                let scaling_list_count = (chroma_format_idc !== 3) ? 8 : 12;\n                for (let i = 0; i < scaling_list_count; i++) {\n                    if (gb.readBool()) {  // seq_scaling_list_present_flag\n                        if (i < 6) {\n                            SPSParser._skipScalingList(gb, 16);\n                        } else {\n                            SPSParser._skipScalingList(gb, 64);\n                        }\n                    }\n                }\n            }\n        }\n        gb.readUEG();  // log2_max_frame_num_minus4\n        let pic_order_cnt_type = gb.readUEG();\n        if (pic_order_cnt_type === 0) {\n            gb.readUEG();  // log2_max_pic_order_cnt_lsb_minus_4\n        } else if (pic_order_cnt_type === 1) {\n            gb.readBits(1);  // delta_pic_order_always_zero_flag\n            gb.readSEG();  // offset_for_non_ref_pic\n            gb.readSEG();  // offset_for_top_to_bottom_field\n            let num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();\n            for (let i = 0; i < num_ref_frames_in_pic_order_cnt_cycle; i++) {\n                gb.readSEG();  // offset_for_ref_frame\n            }\n        }\n        let ref_frames = gb.readUEG();  // max_num_ref_frames\n        gb.readBits(1);  // gaps_in_frame_num_value_allowed_flag\n\n        let pic_width_in_mbs_minus1 = gb.readUEG();\n        let pic_height_in_map_units_minus1 = gb.readUEG();\n\n        let frame_mbs_only_flag = gb.readBits(1);\n        if (frame_mbs_only_flag === 0) {\n            gb.readBits(1);  // mb_adaptive_frame_field_flag\n        }\n        gb.readBits(1);  // direct_8x8_inference_flag\n\n        let frame_crop_left_offset = 0;\n        let frame_crop_right_offset = 0;\n        let frame_crop_top_offset = 0;\n        let frame_crop_bottom_offset = 0;\n\n        let frame_cropping_flag = gb.readBool();\n        if (frame_cropping_flag) {\n            frame_crop_left_offset = gb.readUEG();\n            frame_crop_right_offset = gb.readUEG();\n            frame_crop_top_offset = gb.readUEG();\n            frame_crop_bottom_offset = gb.readUEG();\n        }\n\n        let sar_width = 1, sar_height = 1;\n        let fps = 0, fps_fixed = true, fps_num = 0, fps_den = 0;\n\n        let vui_parameters_present_flag = gb.readBool();\n        if (vui_parameters_present_flag) {\n            if (gb.readBool()) {  // aspect_ratio_info_present_flag\n                let aspect_ratio_idc = gb.readByte();\n                let sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];\n                let sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33,  99, 3, 2, 1];\n\n                if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {\n                    sar_width = sar_w_table[aspect_ratio_idc - 1];\n                    sar_height = sar_h_table[aspect_ratio_idc - 1];\n                } else if (aspect_ratio_idc === 255) {\n                    sar_width = gb.readByte() << 8 | gb.readByte();\n                    sar_height = gb.readByte() << 8 | gb.readByte();\n                }\n            }\n\n            if (gb.readBool()) {  // overscan_info_present_flag\n                gb.readBool();  // overscan_appropriate_flag\n            }\n            if (gb.readBool()) {  // video_signal_type_present_flag\n                gb.readBits(4);  // video_format & video_full_range_flag\n                if (gb.readBool()) {  // colour_description_present_flag\n                    gb.readBits(24);  // colour_primaries & transfer_characteristics & matrix_coefficients\n                }\n            }\n            if (gb.readBool()) {  // chroma_loc_info_present_flag\n                gb.readUEG();  // chroma_sample_loc_type_top_field\n                gb.readUEG();  // chroma_sample_loc_type_bottom_field\n            }\n            if (gb.readBool()) {  // timing_info_present_flag\n                let num_units_in_tick = gb.readBits(32);\n                let time_scale = gb.readBits(32);\n                fps_fixed = gb.readBool();  // fixed_frame_rate_flag\n\n                fps_num = time_scale;\n                fps_den = num_units_in_tick * 2;\n                fps = fps_num / fps_den;\n            }\n        }\n\n        let sarScale = 1;\n        if (sar_width !== 1 || sar_height !== 1) {\n            sarScale = sar_width / sar_height;\n        }\n\n        let crop_unit_x = 0, crop_unit_y = 0;\n        if (chroma_format_idc === 0) {\n            crop_unit_x = 1;\n            crop_unit_y = 2 - frame_mbs_only_flag;\n        } else {\n            let sub_wc = (chroma_format_idc === 3) ? 1 : 2;\n            let sub_hc = (chroma_format_idc === 1) ? 2 : 1;\n            crop_unit_x = sub_wc;\n            crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);\n        }\n\n        let codec_width = (pic_width_in_mbs_minus1 + 1) * 16;\n        let codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);\n\n        codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;\n        codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;\n\n        let present_width = Math.ceil(codec_width * sarScale);\n\n        gb.destroy();\n        gb = null;\n\n        return {\n            profile_string: profile_string,  // baseline, high, high10, ...\n            level_string: level_string,  // 3, 3.1, 4, 4.1, 5, 5.1, ...\n            bit_depth: bit_depth,  // 8bit, 10bit, ...\n            ref_frames: ref_frames,\n            chroma_format: chroma_format,  // 4:2:0, 4:2:2, ...\n            chroma_format_string: SPSParser.getChromaFormatString(chroma_format),\n\n            frame_rate: {\n                fixed: fps_fixed,\n                fps: fps,\n                fps_den: fps_den,\n                fps_num: fps_num\n            },\n\n            sar_ratio: {\n                width: sar_width,\n                height: sar_height\n            },\n\n            codec_size: {\n                width: codec_width,\n                height: codec_height\n            },\n\n            present_size: {\n                width: present_width,\n                height: codec_height\n            }\n        };\n    }\n\n    static _skipScalingList(gb, count) {\n        let last_scale = 8, next_scale = 8;\n        let delta_scale = 0;\n        for (let i = 0; i < count; i++) {\n            if (next_scale !== 0) {\n                delta_scale = gb.readSEG();\n                next_scale = (last_scale + delta_scale + 256) % 256;\n            }\n            last_scale = (next_scale === 0) ? last_scale : next_scale;\n        }\n    }\n\n    static getProfileString(profile_idc) {\n        switch (profile_idc) {\n            case 66:\n                return 'Baseline';\n            case 77:\n                return 'Main';\n            case 88:\n                return 'Extended';\n            case 100:\n                return 'High';\n            case 110:\n                return 'High10';\n            case 122:\n                return 'High422';\n            case 244:\n                return 'High444';\n            default:\n                return 'Unknown';\n        }\n    }\n\n    static getLevelString(level_idc) {\n        return (level_idc / 10).toFixed(1);\n    }\n\n    static getChromaFormatString(chroma) {\n        switch (chroma) {\n            case 420:\n                return '4:2:0';\n            case 422:\n                return '4:2:2';\n            case 444:\n                return '4:4:4';\n            default:\n                return 'Unknown';\n        }\n    }\n\n}\n\nexport default SPSParser;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Polyfill from './utils/polyfill.js';\nimport Features from './core/features.js';\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './io/loader.js';\nimport FlvPlayer from './player/flv-player.js';\nimport NativePlayer from './player/native-player.js';\nimport PlayerEvents from './player/player-events.js';\nimport {ErrorTypes, ErrorDetails} from './player/player-errors.js';\nimport LoggingControl from './utils/logging-control.js';\nimport {InvalidArgumentException} from './utils/exception.js';\n\n// here are all the interfaces\n\n// install polyfills\nPolyfill.install();\n\n\n// factory method\nfunction createPlayer(mediaDataSource, optionalConfig) {\n    let mds = mediaDataSource;\n    if (mds == null || typeof mds !== 'object') {\n        throw new InvalidArgumentException('MediaDataSource must be an javascript object!');\n    }\n\n    if (!mds.hasOwnProperty('type')) {\n        throw new InvalidArgumentException('MediaDataSource must has type field to indicate video file type!');\n    }\n\n    switch (mds.type) {\n        case 'flv':\n            return new FlvPlayer(mds, optionalConfig);\n        default:\n            return new NativePlayer(mds, optionalConfig);\n    }\n}\n\n\n// feature detection\nfunction isSupported() {\n    return Features.supportMSEH264Playback();\n}\n\nfunction getFeatureList() {\n    return Features.getFeatureList();\n}\n\n\n// interfaces\nlet flvjs = {};\n\nflvjs.createPlayer = createPlayer;\nflvjs.isSupported = isSupported;\nflvjs.getFeatureList = getFeatureList;\n\nflvjs.BaseLoader = BaseLoader;\nflvjs.LoaderStatus = LoaderStatus;\nflvjs.LoaderErrors = LoaderErrors;\n\nflvjs.Events = PlayerEvents;\nflvjs.ErrorTypes = ErrorTypes;\nflvjs.ErrorDetails = ErrorDetails;\n\nflvjs.FlvPlayer = FlvPlayer;\nflvjs.NativePlayer = NativePlayer;\nflvjs.LoggingControl = LoggingControl;\n\nObject.defineProperty(flvjs, 'version', {\n    enumerable: true,\n    get: function () {\n        // replaced by browserify-versionify transform\n        return '__VERSION__';\n    }\n});\n\nexport default flvjs;","// entry/index file\n\n// make it compatible with browserify's umd wrapper\nmodule.exports = require('./flv.js').default;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../utils/logger.js';\nimport Browser from '../utils/browser.js';\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './loader.js';\nimport {RuntimeException} from '../utils/exception.js';\n\n/* fetch + stream IO loader. Currently working on chrome 43+.\n * fetch provides a better alternative http API to XMLHttpRequest\n *\n * fetch spec   https://fetch.spec.whatwg.org/\n * stream spec  https://streams.spec.whatwg.org/\n */\nclass FetchStreamLoader extends BaseLoader {\n\n    static isSupported() {\n        try {\n            // fetch + stream is broken on Microsoft Edge. Disable before build 15048.\n            // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8196907/\n            // Fixed in Jan 10, 2017. Build 15048+ removed from blacklist.\n            let isWorkWellEdge = Browser.msedge && Browser.version.minor >= 15048;\n            let browserNotBlacklisted = Browser.msedge ? isWorkWellEdge : true;\n            return (self.fetch && self.ReadableStream && browserNotBlacklisted);\n        } catch (e) {\n            return false;\n        }\n    }\n\n    constructor(seekHandler, config) {\n        super('fetch-stream-loader');\n        this.TAG = 'FetchStreamLoader';\n\n        this._seekHandler = seekHandler;\n        this._config = config;\n        this._needStash = true;\n\n        this._requestAbort = false;\n        this._contentLength = null;\n        this._receivedLength = 0;\n    }\n\n    destroy() {\n        if (this.isWorking()) {\n            this.abort();\n        }\n        super.destroy();\n    }\n\n    open(dataSource, range) {\n        this._dataSource = dataSource;\n        this._range = range;\n\n        let sourceURL = dataSource.url;\n        if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\n            sourceURL = dataSource.redirectedURL;\n        }\n\n        let seekConfig = this._seekHandler.getConfig(sourceURL, range);\n\n        let headers = new self.Headers();\n\n        if (typeof seekConfig.headers === 'object') {\n            let configHeaders = seekConfig.headers;\n            for (let key in configHeaders) {\n                if (configHeaders.hasOwnProperty(key)) {\n                    headers.append(key, configHeaders[key]);\n                }\n            }\n        }\n\n        let params = {\n            method: 'GET',\n            headers: headers,\n            mode: 'cors',\n            cache: 'default',\n            // The default policy of Fetch API in the whatwg standard\n            // Safari incorrectly indicates 'no-referrer' as default policy, fuck it\n            referrerPolicy: 'no-referrer-when-downgrade'\n        };\n\n        // add additional headers\n        if (typeof this._config.headers === 'object') {\n            for (let key in this._config.headers) {\n                headers.append(key, this._config.headers[key]);\n            }\n        }\n\n        // cors is enabled by default\n        if (dataSource.cors === false) {\n            // no-cors means 'disregard cors policy', which can only be used in ServiceWorker\n            params.mode = 'same-origin';\n        }\n\n        // withCredentials is disabled by default\n        if (dataSource.withCredentials) {\n            params.credentials = 'include';\n        }\n\n        // referrerPolicy from config\n        if (dataSource.referrerPolicy) {\n            params.referrerPolicy = dataSource.referrerPolicy;\n        }\n\n        this._status = LoaderStatus.kConnecting;\n        self.fetch(seekConfig.url, params).then((res) => {\n            if (this._requestAbort) {\n                this._requestAbort = false;\n                this._status = LoaderStatus.kIdle;\n                return;\n            }\n            if (res.ok && (res.status >= 200 && res.status <= 299)) {\n                if (res.url !== seekConfig.url) {\n                    if (this._onURLRedirect) {\n                        let redirectedURL = this._seekHandler.removeURLParameters(res.url);\n                        this._onURLRedirect(redirectedURL);\n                    }\n                }\n\n                let lengthHeader = res.headers.get('Content-Length');\n                if (lengthHeader != null) {\n                    this._contentLength = parseInt(lengthHeader);\n                    if (this._contentLength !== 0) {\n                        if (this._onContentLengthKnown) {\n                            this._onContentLengthKnown(this._contentLength);\n                        }\n                    }\n                }\n\n                return this._pump.call(this, res.body.getReader());\n            } else {\n                this._status = LoaderStatus.kError;\n                if (this._onError) {\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {code: res.status, msg: res.statusText});\n                } else {\n                    throw new RuntimeException('FetchStreamLoader: Http code invalid, ' + res.status + ' ' + res.statusText);\n                }\n            }\n        }).catch((e) => {\n            this._status = LoaderStatus.kError;\n            if (this._onError) {\n                this._onError(LoaderErrors.EXCEPTION, {code: -1, msg: e.message});\n            } else {\n                throw e;\n            }\n        });\n    }\n\n    abort() {\n        this._requestAbort = true;\n    }\n\n    _pump(reader) {  // ReadableStreamReader\n        return reader.read().then((result) => {\n            if (result.done) {\n                // First check received length\n                if (this._contentLength !== null && this._receivedLength < this._contentLength) {\n                    // Report Early-EOF\n                    this._status = LoaderStatus.kError;\n                    let type = LoaderErrors.EARLY_EOF;\n                    let info = {code: -1, msg: 'Fetch stream meet Early-EOF'};\n                    if (this._onError) {\n                        this._onError(type, info);\n                    } else {\n                        throw new RuntimeException(info.msg);\n                    }\n                } else {\n                    // OK. Download complete\n                    this._status = LoaderStatus.kComplete;\n                    if (this._onComplete) {\n                        this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n                    }\n                }\n            } else {\n                if (this._requestAbort === true) {\n                    this._requestAbort = false;\n                    this._status = LoaderStatus.kComplete;\n                    return reader.cancel();\n                }\n\n                this._status = LoaderStatus.kBuffering;\n\n                let chunk = result.value.buffer;\n                let byteStart = this._range.from + this._receivedLength;\n                this._receivedLength += chunk.byteLength;\n\n                if (this._onDataArrival) {\n                    this._onDataArrival(chunk, byteStart, this._receivedLength);\n                }\n\n                this._pump(reader);\n            }\n        }).catch((e) => {\n            if (e.code === 11 && Browser.msedge) {  // InvalidStateError on Microsoft Edge\n                // Workaround: Edge may throw InvalidStateError after ReadableStreamReader.cancel() call\n                // Ignore the unknown exception.\n                // Related issue: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11265202/\n                return;\n            }\n\n            this._status = LoaderStatus.kError;\n            let type = 0;\n            let info = null;\n\n            if ((e.code === 19 || e.message === 'network error') && // NETWORK_ERR\n                (this._contentLength === null ||\n                (this._contentLength !== null && this._receivedLength < this._contentLength))) {\n                type = LoaderErrors.EARLY_EOF;\n                info = {code: e.code, msg: 'Fetch stream meet Early-EOF'};\n            } else {\n                type = LoaderErrors.EXCEPTION;\n                info = {code: e.code, msg: e.message};\n            }\n\n            if (this._onError) {\n                this._onError(type, info);\n            } else {\n                throw new RuntimeException(info.msg);\n            }\n        });\n    }\n\n}\n\nexport default FetchStreamLoader;\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../utils/logger.js';\nimport SpeedSampler from './speed-sampler.js';\nimport {LoaderStatus, LoaderErrors} from './loader.js';\nimport FetchStreamLoader from './fetch-stream-loader.js';\nimport MozChunkedLoader from './xhr-moz-chunked-loader.js';\nimport MSStreamLoader from './xhr-msstream-loader.js';\nimport RangeLoader from './xhr-range-loader.js';\nimport WebSocketLoader from './websocket-loader.js';\nimport RangeSeekHandler from './range-seek-handler.js';\nimport ParamSeekHandler from './param-seek-handler.js';\nimport {RuntimeException, IllegalStateException, InvalidArgumentException} from '../utils/exception.js';\n\n/**\n * DataSource: {\n *     url: string,\n *     filesize: number,\n *     cors: boolean,\n *     withCredentials: boolean\n * }\n * \n */\n\n// Manage IO Loaders\nclass IOController {\n\n    constructor(dataSource, config, extraData) {\n        this.TAG = 'IOController';\n\n        this._config = config;\n        this._extraData = extraData;\n\n        this._stashInitialSize = 1024 * 384;  // default initial size: 384KB\n        if (config.stashInitialSize != undefined && config.stashInitialSize > 0) {\n            // apply from config\n            this._stashInitialSize = config.stashInitialSize;\n        }\n\n        this._stashUsed = 0;\n        this._stashSize = this._stashInitialSize;\n        this._bufferSize = 1024 * 1024 * 3;  // initial size: 3MB\n        this._stashBuffer = new ArrayBuffer(this._bufferSize);\n        this._stashByteStart = 0;\n        this._enableStash = true;\n        if (config.enableStashBuffer === false) {\n            this._enableStash = false;\n        }\n\n        this._loader = null;\n        this._loaderClass = null;\n        this._seekHandler = null;\n\n        this._dataSource = dataSource;\n        this._isWebSocketURL = /wss?:\\/\\/(.+?)/.test(dataSource.url);\n        this._refTotalLength = dataSource.filesize ? dataSource.filesize : null;\n        this._totalLength = this._refTotalLength;\n        this._fullRequestFlag = false;\n        this._currentRange = null;\n        this._redirectedURL = null;\n\n        this._speedNormalized = 0;\n        this._speedSampler = new SpeedSampler();\n        this._speedNormalizeList = [64, 128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096];\n\n        this._isEarlyEofReconnecting = false;\n\n        this._paused = false;\n        this._resumeFrom = 0;\n\n        this._onDataArrival = null;\n        this._onSeeked = null;\n        this._onError = null;\n        this._onComplete = null;\n        this._onRedirect = null;\n        this._onRecoveredEarlyEof = null;\n\n        this._selectSeekHandler();\n        this._selectLoader();\n        this._createLoader();\n    }\n\n    destroy() {\n        if (this._loader.isWorking()) {\n            this._loader.abort();\n        }\n        this._loader.destroy();\n        this._loader = null;\n        this._loaderClass = null;\n        this._dataSource = null;\n        this._stashBuffer = null;\n        this._stashUsed = this._stashSize = this._bufferSize = this._stashByteStart = 0;\n        this._currentRange = null;\n        this._speedSampler = null;\n\n        this._isEarlyEofReconnecting = false;\n\n        this._onDataArrival = null;\n        this._onSeeked = null;\n        this._onError = null;\n        this._onComplete = null;\n        this._onRedirect = null;\n        this._onRecoveredEarlyEof = null;\n\n        this._extraData = null;\n    }\n\n    isWorking() {\n        return this._loader && this._loader.isWorking() && !this._paused;\n    }\n\n    isPaused() {\n        return this._paused;\n    }\n\n    get status() {\n        return this._loader.status;\n    }\n\n    get extraData() {\n        return this._extraData;\n    }\n\n    set extraData(data) {\n        this._extraData = data;\n    }\n\n    // prototype: function onDataArrival(chunks: ArrayBuffer, byteStart: number): number\n    get onDataArrival() {\n        return this._onDataArrival;\n    }\n\n    set onDataArrival(callback) {\n        this._onDataArrival = callback;\n    }\n\n    get onSeeked() {\n        return this._onSeeked;\n    }\n\n    set onSeeked(callback) {\n        this._onSeeked = callback;\n    }\n\n    // prototype: function onError(type: number, info: {code: number, msg: string}): void\n    get onError() {\n        return this._onError;\n    }\n\n    set onError(callback) {\n        this._onError = callback;\n    }\n\n    get onComplete() {\n        return this._onComplete;\n    }\n\n    set onComplete(callback) {\n        this._onComplete = callback;\n    }\n\n    get onRedirect() {\n        return this._onRedirect;\n    }\n\n    set onRedirect(callback) {\n        this._onRedirect = callback;\n    }\n\n    get onRecoveredEarlyEof() {\n        return this._onRecoveredEarlyEof;\n    }\n\n    set onRecoveredEarlyEof(callback) {\n        this._onRecoveredEarlyEof = callback;\n    }\n\n    get currentURL() {\n        return this._dataSource.url;\n    }\n\n    get hasRedirect() {\n        return (this._redirectedURL != null || this._dataSource.redirectedURL != undefined);\n    }\n\n    get currentRedirectedURL() {\n        return this._redirectedURL || this._dataSource.redirectedURL;\n    }\n\n    // in KB/s\n    get currentSpeed() {\n        if (this._loaderClass === RangeLoader) {\n            // SpeedSampler is inaccuracy if loader is RangeLoader\n            return this._loader.currentSpeed;\n        }\n        return this._speedSampler.lastSecondKBps;\n    }\n\n    get loaderType() {\n        return this._loader.type;\n    }\n\n    _selectSeekHandler() {\n        let config = this._config;\n\n        if (config.seekType === 'range') {\n            this._seekHandler = new RangeSeekHandler(this._config.rangeLoadZeroStart);\n        } else if (config.seekType === 'param') {\n            let paramStart = config.seekParamStart || 'bstart';\n            let paramEnd = config.seekParamEnd || 'bend';\n\n            this._seekHandler = new ParamSeekHandler(paramStart, paramEnd);\n        } else if (config.seekType === 'custom') {\n            if (typeof config.customSeekHandler !== 'function') {\n                throw new InvalidArgumentException('Custom seekType specified in config but invalid customSeekHandler!');\n            }\n            this._seekHandler = new config.customSeekHandler();\n        } else {\n            throw new InvalidArgumentException(`Invalid seekType in config: ${config.seekType}`);\n        }\n    }\n\n    _selectLoader() {\n        if (this._config.customLoader != null) {\n            this._loaderClass = this._config.customLoader;\n        } else if (this._isWebSocketURL) {\n            this._loaderClass = WebSocketLoader;\n        } else if (FetchStreamLoader.isSupported()) {\n            this._loaderClass = FetchStreamLoader;\n        } else if (MozChunkedLoader.isSupported()) {\n            this._loaderClass = MozChunkedLoader;\n        } else if (RangeLoader.isSupported()) {\n            this._loaderClass = RangeLoader;\n        } else {\n            throw new RuntimeException('Your browser doesn\\'t support xhr with arraybuffer responseType!');\n        }\n    }\n\n    _createLoader() {\n        this._loader = new this._loaderClass(this._seekHandler, this._config);\n        if (this._loader.needStashBuffer === false) {\n            this._enableStash = false;\n        }\n        this._loader.onContentLengthKnown = this._onContentLengthKnown.bind(this);\n        this._loader.onURLRedirect = this._onURLRedirect.bind(this);\n        this._loader.onDataArrival = this._onLoaderChunkArrival.bind(this);\n        this._loader.onComplete = this._onLoaderComplete.bind(this);\n        this._loader.onError = this._onLoaderError.bind(this);\n    }\n\n    open(optionalFrom) {\n        this._currentRange = {from: 0, to: -1};\n        if (optionalFrom) {\n            this._currentRange.from = optionalFrom;\n        }\n\n        this._speedSampler.reset();\n        if (!optionalFrom) {\n            this._fullRequestFlag = true;\n        }\n\n        this._loader.open(this._dataSource, Object.assign({}, this._currentRange));\n    }\n\n    abort() {\n        this._loader.abort();\n\n        if (this._paused) {\n            this._paused = false;\n            this._resumeFrom = 0;\n        }\n    }\n\n    pause() {\n        if (this.isWorking()) {\n            this._loader.abort();\n\n            if (this._stashUsed !== 0) {\n                this._resumeFrom = this._stashByteStart;\n                this._currentRange.to = this._stashByteStart - 1;\n            } else {\n                this._resumeFrom = this._currentRange.to + 1;\n            }\n            this._stashUsed = 0;\n            this._stashByteStart = 0;\n            this._paused = true;\n        }\n    }\n\n    resume() {\n        if (this._paused) {\n            this._paused = false;\n            let bytes = this._resumeFrom;\n            this._resumeFrom = 0;\n            this._internalSeek(bytes, true);\n        }\n    }\n\n    seek(bytes) {\n        this._paused = false;\n        this._stashUsed = 0;\n        this._stashByteStart = 0;\n        this._internalSeek(bytes, true);\n    }\n\n    /**\n     * When seeking request is from media seeking, unconsumed stash data should be dropped\n     * However, stash data shouldn't be dropped if seeking requested from http reconnection\n     *\n     * @dropUnconsumed: Ignore and discard all unconsumed data in stash buffer\n     */\n    _internalSeek(bytes, dropUnconsumed) {\n        if (this._loader.isWorking()) {\n            this._loader.abort();\n        }\n\n        // dispatch & flush stash buffer before seek\n        this._flushStashBuffer(dropUnconsumed);\n\n        this._loader.destroy();\n        this._loader = null;\n\n        let requestRange = {from: bytes, to: -1};\n        this._currentRange = {from: requestRange.from, to: -1};\n\n        this._speedSampler.reset();\n        this._stashSize = this._stashInitialSize;\n        this._createLoader();\n        this._loader.open(this._dataSource, requestRange);\n\n        if (this._onSeeked) {\n            this._onSeeked();\n        }\n    }\n\n    updateUrl(url) {\n        if (!url || typeof url !== 'string' || url.length === 0) {\n            throw new InvalidArgumentException('Url must be a non-empty string!');\n        }\n\n        this._dataSource.url = url;\n\n        // TODO: replace with new url\n    }\n\n    _expandBuffer(expectedBytes) {\n        let bufferNewSize = this._stashSize;\n        while (bufferNewSize + 1024 * 1024 * 1 < expectedBytes) {\n            bufferNewSize *= 2;\n        }\n\n        bufferNewSize += 1024 * 1024 * 1;  // bufferSize = stashSize + 1MB\n        if (bufferNewSize === this._bufferSize) {\n            return;\n        }\n\n        let newBuffer = new ArrayBuffer(bufferNewSize);\n\n        if (this._stashUsed > 0) {  // copy existing data into new buffer\n            let stashOldArray = new Uint8Array(this._stashBuffer, 0, this._stashUsed);\n            let stashNewArray = new Uint8Array(newBuffer, 0, bufferNewSize);\n            stashNewArray.set(stashOldArray, 0);\n        }\n\n        this._stashBuffer = newBuffer;\n        this._bufferSize = bufferNewSize;\n    }\n\n    _normalizeSpeed(input) {\n        let list = this._speedNormalizeList;\n        let last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        if (input < list[0]) {\n            return list[0];\n        }\n\n        // binary search\n        while (lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if (mid === last || (input >= list[mid] && input < list[mid + 1])) {\n                return list[mid];\n            } else if (list[mid] < input) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n    }\n\n    _adjustStashSize(normalized) {\n        let stashSizeKB = 0;\n\n        if (this._config.isLive) {\n            // live stream: always use single normalized speed for size of stashSizeKB\n            stashSizeKB = normalized;\n        } else {\n            if (normalized < 512) {\n                stashSizeKB = normalized;\n            } else if (normalized >= 512 && normalized <= 1024) {\n                stashSizeKB = Math.floor(normalized * 1.5);\n            } else {\n                stashSizeKB = normalized * 2;\n            }\n        }\n\n        if (stashSizeKB > 8192) {\n            stashSizeKB = 8192;\n        }\n\n        let bufferSize = stashSizeKB * 1024 + 1024 * 1024 * 1;  // stashSize + 1MB\n        if (this._bufferSize < bufferSize) {\n            this._expandBuffer(bufferSize);\n        }\n        this._stashSize = stashSizeKB * 1024;\n    }\n\n    _dispatchChunks(chunks, byteStart) {\n        this._currentRange.to = byteStart + chunks.byteLength - 1;\n        return this._onDataArrival(chunks, byteStart);\n    }\n\n    _onURLRedirect(redirectedURL) {\n        this._redirectedURL = redirectedURL;\n        if (this._onRedirect) {\n            this._onRedirect(redirectedURL);\n        }\n    }\n\n    _onContentLengthKnown(contentLength) {\n        if (contentLength && this._fullRequestFlag) {\n            this._totalLength = contentLength;\n            this._fullRequestFlag = false;\n        }\n    }\n\n    _onLoaderChunkArrival(chunk, byteStart, receivedLength) {\n        if (!this._onDataArrival) {\n            throw new IllegalStateException('IOController: No existing consumer (onDataArrival) callback!');\n        }\n        if (this._paused) {\n            return;\n        }\n        if (this._isEarlyEofReconnecting) {\n            // Auto-reconnect for EarlyEof succeed, notify to upper-layer by callback\n            this._isEarlyEofReconnecting = false;\n            if (this._onRecoveredEarlyEof) {\n                this._onRecoveredEarlyEof();\n            }\n        }\n\n        this._speedSampler.addBytes(chunk.byteLength);\n\n        // adjust stash buffer size according to network speed dynamically\n        let KBps = this._speedSampler.lastSecondKBps;\n        if (KBps !== 0) {\n            let normalized = this._normalizeSpeed(KBps);\n            if (this._speedNormalized !== normalized) {\n                this._speedNormalized = normalized;\n                this._adjustStashSize(normalized);\n            }\n        }\n\n        if (!this._enableStash) {  // disable stash\n            if (this._stashUsed === 0) {\n                // dispatch chunk directly to consumer;\n                // check ret value (consumed bytes) and stash unconsumed to stashBuffer\n                let consumed = this._dispatchChunks(chunk, byteStart);\n                if (consumed < chunk.byteLength) {  // unconsumed data remain.\n                    let remain = chunk.byteLength - consumed;\n                    if (remain > this._bufferSize) {\n                        this._expandBuffer(remain);\n                    }\n                    let stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                    stashArray.set(new Uint8Array(chunk, consumed), 0);\n                    this._stashUsed += remain;\n                    this._stashByteStart = byteStart + consumed;\n                }\n            } else {\n                // else: Merge chunk into stashBuffer, and dispatch stashBuffer to consumer.\n                if (this._stashUsed + chunk.byteLength > this._bufferSize) {\n                    this._expandBuffer(this._stashUsed + chunk.byteLength);\n                }\n                let stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                stashArray.set(new Uint8Array(chunk), this._stashUsed);\n                this._stashUsed += chunk.byteLength;\n                let consumed = this._dispatchChunks(this._stashBuffer.slice(0, this._stashUsed), this._stashByteStart);\n                if (consumed < this._stashUsed && consumed > 0) {  // unconsumed data remain\n                    let remainArray = new Uint8Array(this._stashBuffer, consumed);\n                    stashArray.set(remainArray, 0);\n                }\n                this._stashUsed -= consumed;\n                this._stashByteStart += consumed;\n            }\n        } else {  // enable stash\n            if (this._stashUsed === 0 && this._stashByteStart === 0) {  // seeked? or init chunk?\n                // This is the first chunk after seek action\n                this._stashByteStart = byteStart;\n            }\n            if (this._stashUsed + chunk.byteLength <= this._stashSize) {\n                // just stash\n                let stashArray = new Uint8Array(this._stashBuffer, 0, this._stashSize);\n                stashArray.set(new Uint8Array(chunk), this._stashUsed);\n                this._stashUsed += chunk.byteLength;\n            } else {  // stashUsed + chunkSize > stashSize, size limit exceeded\n                let stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                if (this._stashUsed > 0) {  // There're stash datas in buffer\n                    // dispatch the whole stashBuffer, and stash remain data\n                    // then append chunk to stashBuffer (stash)\n                    let buffer = this._stashBuffer.slice(0, this._stashUsed);\n                    let consumed = this._dispatchChunks(buffer, this._stashByteStart);\n                    if (consumed < buffer.byteLength) {\n                        if (consumed > 0) {\n                            let remainArray = new Uint8Array(buffer, consumed);\n                            stashArray.set(remainArray, 0);\n                            this._stashUsed = remainArray.byteLength;\n                            this._stashByteStart += consumed;\n                        }\n                    } else {\n                        this._stashUsed = 0;\n                        this._stashByteStart += consumed;\n                    }\n                    if (this._stashUsed + chunk.byteLength > this._bufferSize) {\n                        this._expandBuffer(this._stashUsed + chunk.byteLength);\n                        stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                    }\n                    stashArray.set(new Uint8Array(chunk), this._stashUsed);\n                    this._stashUsed += chunk.byteLength;\n                } else {  // stash buffer empty, but chunkSize > stashSize (oh, holy shit)\n                    // dispatch chunk directly and stash remain data\n                    let consumed = this._dispatchChunks(chunk, byteStart);\n                    if (consumed < chunk.byteLength) {\n                        let remain = chunk.byteLength - consumed;\n                        if (remain > this._bufferSize) {\n                            this._expandBuffer(remain);\n                            stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                        }\n                        stashArray.set(new Uint8Array(chunk, consumed), 0);\n                        this._stashUsed += remain;\n                        this._stashByteStart = byteStart + consumed;\n                    }\n                }\n            }\n        }\n    }\n\n    _flushStashBuffer(dropUnconsumed) {\n        if (this._stashUsed > 0) {\n            let buffer = this._stashBuffer.slice(0, this._stashUsed);\n            let consumed = this._dispatchChunks(buffer, this._stashByteStart);\n            let remain = buffer.byteLength - consumed;\n\n            if (consumed < buffer.byteLength) {\n                if (dropUnconsumed) {\n                    Log.w(this.TAG, `${remain} bytes unconsumed data remain when flush buffer, dropped`);\n                } else {\n                    if (consumed > 0) {\n                        let stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);\n                        let remainArray = new Uint8Array(buffer, consumed);\n                        stashArray.set(remainArray, 0);\n                        this._stashUsed = remainArray.byteLength;\n                        this._stashByteStart += consumed;\n                    }\n                    return 0;\n                }\n            }\n            this._stashUsed = 0;\n            this._stashByteStart = 0;\n            return remain;\n        }\n        return 0;\n    }\n\n    _onLoaderComplete(from, to) {\n        // Force-flush stash buffer, and drop unconsumed data\n        this._flushStashBuffer(true);\n\n        if (this._onComplete) {\n            this._onComplete(this._extraData);\n        }\n    }\n\n    _onLoaderError(type, data) {\n        Log.e(this.TAG, `Loader error, code = ${data.code}, msg = ${data.msg}`);\n\n        this._flushStashBuffer(false);\n\n        if (this._isEarlyEofReconnecting) {\n            // Auto-reconnect for EarlyEof failed, throw UnrecoverableEarlyEof error to upper-layer\n            this._isEarlyEofReconnecting = false;\n            type = LoaderErrors.UNRECOVERABLE_EARLY_EOF;\n        }\n\n        switch (type) {\n            case LoaderErrors.EARLY_EOF: {\n                if (!this._config.isLive) {\n                    // Do internal http reconnect if not live stream\n                    if (this._totalLength) {\n                        let nextFrom = this._currentRange.to + 1;\n                        if (nextFrom < this._totalLength) {\n                            Log.w(this.TAG, 'Connection lost, trying reconnect...');\n                            this._isEarlyEofReconnecting = true;\n                            this._internalSeek(nextFrom, false);\n                        }\n                        return;\n                    }\n                    // else: We don't know totalLength, throw UnrecoverableEarlyEof\n                }\n                // live stream: throw UnrecoverableEarlyEof error to upper-layer\n                type = LoaderErrors.UNRECOVERABLE_EARLY_EOF;\n                break;\n            }\n            case LoaderErrors.UNRECOVERABLE_EARLY_EOF:\n            case LoaderErrors.CONNECTING_TIMEOUT:\n            case LoaderErrors.HTTP_STATUS_CODE_INVALID:\n            case LoaderErrors.EXCEPTION:\n                break;\n        }\n\n        if (this._onError) {\n            this._onError(type, data);\n        } else {\n            throw new RuntimeException('IOException: ' + data.msg);\n        }\n    }\n\n}\n\nexport default IOController;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {NotImplementedException} from '../utils/exception.js';\n\nexport const LoaderStatus = {\n    kIdle: 0,\n    kConnecting: 1,\n    kBuffering: 2,\n    kError: 3,\n    kComplete: 4\n};\n\nexport const LoaderErrors = {\n    OK: 'OK',\n    EXCEPTION: 'Exception',\n    HTTP_STATUS_CODE_INVALID: 'HttpStatusCodeInvalid',\n    CONNECTING_TIMEOUT: 'ConnectingTimeout',\n    EARLY_EOF: 'EarlyEof',\n    UNRECOVERABLE_EARLY_EOF: 'UnrecoverableEarlyEof'\n};\n\n/* Loader has callbacks which have following prototypes:\n *     function onContentLengthKnown(contentLength: number): void\n *     function onURLRedirect(url: string): void\n *     function onDataArrival(chunk: ArrayBuffer, byteStart: number, receivedLength: number): void\n *     function onError(errorType: number, errorInfo: {code: number, msg: string}): void\n *     function onComplete(rangeFrom: number, rangeTo: number): void\n */\nexport class BaseLoader {\n\n    constructor(typeName) {\n        this._type = typeName || 'undefined';\n        this._status = LoaderStatus.kIdle;\n        this._needStash = false;\n        // callbacks\n        this._onContentLengthKnown = null;\n        this._onURLRedirect = null;\n        this._onDataArrival = null;\n        this._onError = null;\n        this._onComplete = null;\n    }\n\n    destroy() {\n        this._status = LoaderStatus.kIdle;\n        this._onContentLengthKnown = null;\n        this._onURLRedirect = null;\n        this._onDataArrival = null;\n        this._onError = null;\n        this._onComplete = null;\n    }\n\n    isWorking() {\n        return this._status === LoaderStatus.kConnecting || this._status === LoaderStatus.kBuffering;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get status() {\n        return this._status;\n    }\n\n    get needStashBuffer() {\n        return this._needStash;\n    }\n\n    get onContentLengthKnown() {\n        return this._onContentLengthKnown;\n    }\n\n    set onContentLengthKnown(callback) {\n        this._onContentLengthKnown = callback;\n    }\n\n    get onURLRedirect() {\n        return this._onURLRedirect;\n    }\n\n    set onURLRedirect(callback) {\n        this._onURLRedirect = callback;\n    }\n\n    get onDataArrival() {\n        return this._onDataArrival;\n    }\n\n    set onDataArrival(callback) {\n        this._onDataArrival = callback;\n    }\n\n    get onError() {\n        return this._onError;\n    }\n\n    set onError(callback) {\n        this._onError = callback;\n    }\n\n    get onComplete() {\n        return this._onComplete;\n    }\n\n    set onComplete(callback) {\n        this._onComplete = callback;\n    }\n\n    // pure virtual\n    open(dataSource, range) {\n        throw new NotImplementedException('Unimplemented abstract function!');\n    }\n\n    abort() {\n        throw new NotImplementedException('Unimplemented abstract function!');\n    }\n\n\n}","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass ParamSeekHandler {\n\n    constructor(paramStart, paramEnd) {\n        this._startName = paramStart;\n        this._endName = paramEnd;\n    }\n\n    getConfig(baseUrl, range) {\n        let url = baseUrl;\n\n        if (range.from !== 0 || range.to !== -1) {\n            let needAnd = true;\n            if (url.indexOf('?') === -1) {\n                url += '?';\n                needAnd = false;\n            }\n\n            if (needAnd) {\n                url += '&';\n            }\n\n            url += `${this._startName}=${range.from.toString()}`;\n\n            if (range.to !== -1) {\n                url += `&${this._endName}=${range.to.toString()}`;\n            }\n        }\n\n        return {\n            url: url,\n            headers: {}\n        };\n    }\n\n    removeURLParameters(seekedURL) {\n        let baseURL = seekedURL.split('?')[0];\n        let params = undefined;\n\n        let queryIndex = seekedURL.indexOf('?');\n        if (queryIndex !== -1) {\n            params = seekedURL.substring(queryIndex + 1);\n        }\n\n        let resultParams = '';\n\n        if (params != undefined && params.length > 0) {\n            let pairs = params.split('&');\n\n            for (let i = 0; i < pairs.length; i++) {\n                let pair = pairs[i].split('=');\n                let requireAnd = (i > 0);\n\n                if (pair[0] !== this._startName && pair[0] !== this._endName) {\n                    if (requireAnd) {\n                        resultParams += '&';\n                    }\n                    resultParams += pairs[i];\n                }\n            }\n        }\n\n        return (resultParams.length === 0) ? baseURL : baseURL + '?' + resultParams;\n    }\n\n}\n\nexport default ParamSeekHandler;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass RangeSeekHandler {\n\n    constructor(zeroStart) {\n        this._zeroStart = zeroStart || false;\n    }\n\n    getConfig(url, range) {\n        let headers = {};\n\n        if (range.from !== 0 || range.to !== -1) {\n            let param;\n            if (range.to !== -1) {\n                param = `bytes=${range.from.toString()}-${range.to.toString()}`;\n            } else {\n                param = `bytes=${range.from.toString()}-`;\n            }\n            headers['Range'] = param;\n        } else if (this._zeroStart) {\n            headers['Range'] = 'bytes=0-';\n        }\n\n        return {\n            url: url,\n            headers: headers\n        };\n    }\n\n    removeURLParameters(seekedURL) {\n        return seekedURL;\n    }\n\n}\n\nexport default RangeSeekHandler;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Utility class to calculate realtime network I/O speed\nclass SpeedSampler {\n\n    constructor() {\n        // milliseconds\n        this._firstCheckpoint = 0;\n        this._lastCheckpoint = 0;\n        this._intervalBytes = 0;\n        this._totalBytes = 0;\n        this._lastSecondBytes = 0;\n\n        // compatibility detection\n        if (self.performance && self.performance.now) {\n            this._now = self.performance.now.bind(self.performance);\n        } else {\n            this._now = Date.now;\n        }\n    }\n\n    reset() {\n        this._firstCheckpoint = this._lastCheckpoint = 0;\n        this._totalBytes = this._intervalBytes = 0;\n        this._lastSecondBytes = 0;\n    }\n\n    addBytes(bytes) {\n        if (this._firstCheckpoint === 0) {\n            this._firstCheckpoint = this._now();\n            this._lastCheckpoint = this._firstCheckpoint;\n            this._intervalBytes += bytes;\n            this._totalBytes += bytes;\n        } else if (this._now() - this._lastCheckpoint < 1000) {\n            this._intervalBytes += bytes;\n            this._totalBytes += bytes;\n        } else {  // duration >= 1000\n            this._lastSecondBytes = this._intervalBytes;\n            this._intervalBytes = bytes;\n            this._totalBytes += bytes;\n            this._lastCheckpoint = this._now();\n        }\n    }\n\n    get currentKBps() {\n        this.addBytes(0);\n\n        let durationSeconds = (this._now() - this._lastCheckpoint) / 1000;\n        if (durationSeconds == 0) durationSeconds = 1;\n        return (this._intervalBytes / durationSeconds) / 1024;\n    }\n\n    get lastSecondKBps() {\n        this.addBytes(0);\n\n        if (this._lastSecondBytes !== 0) {\n            return this._lastSecondBytes / 1024;\n        } else {  // lastSecondBytes === 0\n            if (this._now() - this._lastCheckpoint >= 500) {\n                // if time interval since last checkpoint has exceeded 500ms\n                // the speed is nearly accurate\n                return this.currentKBps;\n            } else {\n                // We don't know\n                return 0;\n            }\n        }\n    }\n\n    get averageKBps() {\n        let durationSeconds = (this._now() - this._firstCheckpoint) / 1000;\n        return (this._totalBytes / durationSeconds) / 1024;\n    }\n\n}\n\nexport default SpeedSampler;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../utils/logger.js';\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './loader.js';\nimport {RuntimeException} from '../utils/exception.js';\n\n// For FLV over WebSocket live stream\nclass WebSocketLoader extends BaseLoader {\n\n    static isSupported() {\n        try {\n            return (typeof self.WebSocket !== 'undefined');\n        } catch (e) {\n            return false;\n        }\n    }\n\n    constructor() {\n        super('websocket-loader');\n        this.TAG = 'WebSocketLoader';\n\n        this._needStash = true;\n\n        this._ws = null;\n        this._requestAbort = false;\n        this._receivedLength = 0;\n    }\n\n    destroy() {\n        if (this._ws) {\n            this.abort();\n        }\n        super.destroy();\n    }\n\n    open(dataSource) {\n        try {\n            let ws = this._ws = new self.WebSocket(dataSource.url);\n            ws.binaryType = 'arraybuffer';\n            ws.onopen = this._onWebSocketOpen.bind(this);\n            ws.onclose = this._onWebSocketClose.bind(this);\n            ws.onmessage = this._onWebSocketMessage.bind(this);\n            ws.onerror = this._onWebSocketError.bind(this);\n\n            this._status = LoaderStatus.kConnecting;\n        } catch (e) {\n            this._status = LoaderStatus.kError;\n\n            let info = {code: e.code, msg: e.message};\n\n            if (this._onError) {\n                this._onError(LoaderErrors.EXCEPTION, info);\n            } else {\n                throw new RuntimeException(info.msg);\n            }\n        }\n    }\n\n    abort() {\n        let ws = this._ws;\n        if (ws && (ws.readyState === 0 || ws.readyState === 1)) {  // CONNECTING || OPEN\n            this._requestAbort = true;\n            ws.close();\n        }\n\n        this._ws = null;\n        this._status = LoaderStatus.kComplete;\n    }\n\n    _onWebSocketOpen(e) {\n        this._status = LoaderStatus.kBuffering;\n    }\n\n    _onWebSocketClose(e) {\n        if (this._requestAbort === true) {\n            this._requestAbort = false;\n            return;\n        }\n\n        this._status = LoaderStatus.kComplete;\n\n        if (this._onComplete) {\n            this._onComplete(0, this._receivedLength - 1);\n        }\n    }\n\n    _onWebSocketMessage(e) {\n        if (e.data instanceof ArrayBuffer) {\n            this._dispatchArrayBuffer(e.data);\n        } else if (e.data instanceof Blob) {\n            let reader = new FileReader();\n            reader.onload = () => {\n                this._dispatchArrayBuffer(reader.result);\n            };\n            reader.readAsArrayBuffer(e.data);\n        } else {\n            this._status = LoaderStatus.kError;\n            let info = {code: -1, msg: 'Unsupported WebSocket message type: ' + e.data.constructor.name};\n\n            if (this._onError) {\n                this._onError(LoaderErrors.EXCEPTION, info);\n            } else {\n                throw new RuntimeException(info.msg);\n            }\n        }\n    }\n\n    _dispatchArrayBuffer(arraybuffer) {\n        let chunk = arraybuffer;\n        let byteStart = this._receivedLength;\n        this._receivedLength += chunk.byteLength;\n\n        if (this._onDataArrival) {\n            this._onDataArrival(chunk, byteStart, this._receivedLength);\n        }\n    }\n\n    _onWebSocketError(e) {\n        this._status = LoaderStatus.kError;\n\n        let info = {\n            code: e.code,\n            msg: e.message\n        };\n\n        if (this._onError) {\n            this._onError(LoaderErrors.EXCEPTION, info);\n        } else {\n            throw new RuntimeException(info.msg);\n        }\n    }\n\n}\n\nexport default WebSocketLoader;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../utils/logger.js';\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './loader.js';\nimport {RuntimeException} from '../utils/exception.js';\n\n// For FireFox browser which supports `xhr.responseType = 'moz-chunked-arraybuffer'`\nclass MozChunkedLoader extends BaseLoader {\n\n    static isSupported() {\n        try {\n            let xhr = new XMLHttpRequest();\n            // Firefox 37- requires .open() to be called before setting responseType\n            xhr.open('GET', 'https://example.com', true);\n            xhr.responseType = 'moz-chunked-arraybuffer';\n            return (xhr.responseType === 'moz-chunked-arraybuffer');\n        } catch (e) {\n            Log.w('MozChunkedLoader', e.message);\n            return false;\n        }\n    }\n\n    constructor(seekHandler, config) {\n        super('xhr-moz-chunked-loader');\n        this.TAG = 'MozChunkedLoader';\n\n        this._seekHandler = seekHandler;\n        this._config = config;\n        this._needStash = true;\n\n        this._xhr = null;\n        this._requestAbort = false;\n        this._contentLength = null;\n        this._receivedLength = 0;\n    }\n\n    destroy() {\n        if (this.isWorking()) {\n            this.abort();\n        }\n        if (this._xhr) {\n            this._xhr.onreadystatechange = null;\n            this._xhr.onprogress = null;\n            this._xhr.onloadend = null;\n            this._xhr.onerror = null;\n            this._xhr = null;\n        }\n        super.destroy();\n    }\n\n    open(dataSource, range) {\n        this._dataSource = dataSource;\n        this._range = range;\n\n        let sourceURL = dataSource.url;\n        if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {\n            sourceURL = dataSource.redirectedURL;\n        }\n\n        let seekConfig = this._seekHandler.getConfig(sourceURL, range);\n        this._requestURL = seekConfig.url;\n\n        let xhr = this._xhr = new XMLHttpRequest();\n        xhr.open('GET', seekConfig.url, true);\n        xhr.responseType = 'moz-chunked-arraybuffer';\n        xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n        xhr.onprogress = this._onProgress.bind(this);\n        xhr.onloadend = this._onLoadEnd.bind(this);\n        xhr.onerror = this._onXhrError.bind(this);\n\n        // cors is auto detected and enabled by xhr\n\n        // withCredentials is disabled by default\n        if (dataSource.withCredentials) {\n            xhr.withCredentials = true;\n        }\n\n        if (typeof seekConfig.headers === 'object') {\n            let headers = seekConfig.headers;\n\n            for (let key in headers) {\n                if (headers.hasOwnProperty(key)) {\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        }\n\n        // add additional headers\n        if (typeof this._config.headers === 'object') {\n            let headers = this._config.headers;\n\n            for (let key in headers) {\n                if (headers.hasOwnProperty(key)) {\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        }\n\n        this._status = LoaderStatus.kConnecting;\n        xhr.send();\n    }\n\n    abort() {\n        this._requestAbort = true;\n        if (this._xhr) {\n            this._xhr.abort();\n        }\n        this._status = LoaderStatus.kComplete;\n    }\n\n    _onReadyStateChange(e) {\n        let xhr = e.target;\n\n        if (xhr.readyState === 2) {  // HEADERS_RECEIVED\n            if (xhr.responseURL != undefined && xhr.responseURL !== this._requestURL) {\n                if (this._onURLRedirect) {\n                    let redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                    this._onURLRedirect(redirectedURL);\n                }\n            }\n\n            if (xhr.status !== 0 && (xhr.status < 200 || xhr.status > 299)) {\n                this._status = LoaderStatus.kError;\n                if (this._onError) {\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {code: xhr.status, msg: xhr.statusText});\n                } else {\n                    throw new RuntimeException('MozChunkedLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\n                }\n            } else {\n                this._status = LoaderStatus.kBuffering;\n            }\n        }\n    }\n\n    _onProgress(e) {\n        if (this._status === LoaderStatus.kError) {\n            // Ignore error response\n            return;\n        }\n\n        if (this._contentLength === null) {\n            if (e.total !== null && e.total !== 0) {\n                this._contentLength = e.total;\n                if (this._onContentLengthKnown) {\n                    this._onContentLengthKnown(this._contentLength);\n                }\n            }\n        }\n\n        let chunk = e.target.response;\n        let byteStart = this._range.from + this._receivedLength;\n        this._receivedLength += chunk.byteLength;\n\n        if (this._onDataArrival) {\n            this._onDataArrival(chunk, byteStart, this._receivedLength);\n        }\n    }\n\n    _onLoadEnd(e) {\n        if (this._requestAbort === true) {\n            this._requestAbort = false;\n            return;\n        } else if (this._status === LoaderStatus.kError) {\n            return;\n        }\n\n        this._status = LoaderStatus.kComplete;\n        if (this._onComplete) {\n            this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n        }\n    }\n\n    _onXhrError(e) {\n        this._status = LoaderStatus.kError;\n        let type = 0;\n        let info = null;\n\n        if (this._contentLength && e.loaded < this._contentLength) {\n            type = LoaderErrors.EARLY_EOF;\n            info = {code: -1, msg: 'Moz-Chunked stream meet Early-Eof'};\n        } else {\n            type = LoaderErrors.EXCEPTION;\n            info = {code: -1, msg: e.constructor.name + ' ' + e.type};\n        }\n\n        if (this._onError) {\n            this._onError(type, info);\n        } else {\n            throw new RuntimeException(info.msg);\n        }\n    }\n\n}\n\nexport default MozChunkedLoader;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../utils/logger.js';\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './loader.js';\nimport {RuntimeException} from '../utils/exception.js';\n\n/* Notice: ms-stream may cause IE/Edge browser crash if seek too frequently!!!\n * The browser may crash in wininet.dll. Disable for now.\n *\n * For IE11/Edge browser by microsoft which supports `xhr.responseType = 'ms-stream'`\n * Notice that ms-stream API sucks. The buffer is always expanding along with downloading.\n *\n * We need to abort the xhr if buffer size exceeded limit size (e.g. 16 MiB), then do reconnect.\n * in order to release previous ArrayBuffer to avoid memory leak\n *\n * Otherwise, the ArrayBuffer will increase to a terrible size that equals final file size.\n */\nclass MSStreamLoader extends BaseLoader {\n\n    static isSupported() {\n        try {\n            if (typeof self.MSStream === 'undefined' || typeof self.MSStreamReader === 'undefined') {\n                return false;\n            }\n\n            let xhr = new XMLHttpRequest();\n            xhr.open('GET', 'https://example.com', true);\n            xhr.responseType = 'ms-stream';\n            return (xhr.responseType === 'ms-stream');\n        } catch (e) {\n            Log.w('MSStreamLoader', e.message);\n            return false;\n        }\n    }\n\n    constructor(seekHandler, config) {\n        super('xhr-msstream-loader');\n        this.TAG = 'MSStreamLoader';\n\n        this._seekHandler = seekHandler;\n        this._config = config;\n        this._needStash = true;\n\n        this._xhr = null;\n        this._reader = null;  // MSStreamReader\n\n        this._totalRange = null;\n        this._currentRange = null;\n\n        this._currentRequestURL = null;\n        this._currentRedirectedURL = null;\n\n        this._contentLength = null;\n        this._receivedLength = 0;\n\n        this._bufferLimit = 16 * 1024 * 1024;  // 16MB\n        this._lastTimeBufferSize = 0;\n        this._isReconnecting = false;\n    }\n\n    destroy() {\n        if (this.isWorking()) {\n            this.abort();\n        }\n        if (this._reader) {\n            this._reader.onprogress = null;\n            this._reader.onload = null;\n            this._reader.onerror = null;\n            this._reader = null;\n        }\n        if (this._xhr) {\n            this._xhr.onreadystatechange = null;\n            this._xhr = null;\n        }\n        super.destroy();\n    }\n\n    open(dataSource, range) {\n        this._internalOpen(dataSource, range, false);\n    }\n\n    _internalOpen(dataSource, range, isSubrange) {\n        this._dataSource = dataSource;\n\n        if (!isSubrange) {\n            this._totalRange = range;\n        } else {\n            this._currentRange = range;\n        }\n\n        let sourceURL = dataSource.url;\n        if (this._config.reuseRedirectedURL) {\n            if (this._currentRedirectedURL != undefined) {\n                sourceURL = this._currentRedirectedURL;\n            } else if (dataSource.redirectedURL != undefined) {\n                sourceURL = dataSource.redirectedURL;\n            }\n        }\n\n        let seekConfig = this._seekHandler.getConfig(sourceURL, range);\n        this._currentRequestURL = seekConfig.url;\n\n        let reader = this._reader = new self.MSStreamReader();\n        reader.onprogress = this._msrOnProgress.bind(this);\n        reader.onload = this._msrOnLoad.bind(this);\n        reader.onerror = this._msrOnError.bind(this);\n\n        let xhr = this._xhr = new XMLHttpRequest();\n        xhr.open('GET', seekConfig.url, true);\n        xhr.responseType = 'ms-stream';\n        xhr.onreadystatechange = this._xhrOnReadyStateChange.bind(this);\n        xhr.onerror = this._xhrOnError.bind(this);\n\n        if (dataSource.withCredentials) {\n            xhr.withCredentials = true;\n        }\n\n        if (typeof seekConfig.headers === 'object') {\n            let headers = seekConfig.headers;\n\n            for (let key in headers) {\n                if (headers.hasOwnProperty(key)) {\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        }\n\n        // add additional headers\n        if (typeof this._config.headers === 'object') {\n            let headers = this._config.headers;\n\n            for (let key in headers) {\n                if (headers.hasOwnProperty(key)) {\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        }\n\n        if (this._isReconnecting) {\n            this._isReconnecting = false;\n        } else {\n            this._status = LoaderStatus.kConnecting;\n        }\n        xhr.send();\n    }\n\n    abort() {\n        this._internalAbort();\n        this._status = LoaderStatus.kComplete;\n    }\n\n    _internalAbort() {\n        if (this._reader) {\n            if (this._reader.readyState === 1) {  // LOADING\n                this._reader.abort();\n            }\n            this._reader.onprogress = null;\n            this._reader.onload = null;\n            this._reader.onerror = null;\n            this._reader = null;\n        }\n        if (this._xhr) {\n            this._xhr.abort();\n            this._xhr.onreadystatechange = null;\n            this._xhr = null;\n        }\n    }\n\n    _xhrOnReadyStateChange(e) {\n        let xhr = e.target;\n\n        if (xhr.readyState === 2) {  // HEADERS_RECEIVED\n            if (xhr.status >= 200 && xhr.status <= 299) {\n                this._status = LoaderStatus.kBuffering;\n\n                if (xhr.responseURL != undefined) {\n                    let redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                    if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {\n                        this._currentRedirectedURL = redirectedURL;\n                        if (this._onURLRedirect) {\n                            this._onURLRedirect(redirectedURL);\n                        }\n                    }\n                }\n\n                let lengthHeader = xhr.getResponseHeader('Content-Length');\n                if (lengthHeader != null && this._contentLength == null) {\n                    let length = parseInt(lengthHeader);\n                    if (length > 0) {\n                        this._contentLength = length;\n                        if (this._onContentLengthKnown) {\n                            this._onContentLengthKnown(this._contentLength);\n                        }\n                    }\n                }\n            } else {\n                this._status = LoaderStatus.kError;\n                if (this._onError) {\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {code: xhr.status, msg: xhr.statusText});\n                } else {\n                    throw new RuntimeException('MSStreamLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\n                }\n            }\n        } else if (xhr.readyState === 3) {  // LOADING\n            if (xhr.status >= 200 && xhr.status <= 299) {\n                this._status = LoaderStatus.kBuffering;\n\n                let msstream = xhr.response;\n                this._reader.readAsArrayBuffer(msstream);\n            }\n        }\n    }\n\n    _xhrOnError(e) {\n        this._status = LoaderStatus.kError;\n        let type = LoaderErrors.EXCEPTION;\n        let info = {code: -1, msg: e.constructor.name + ' ' + e.type};\n\n        if (this._onError) {\n            this._onError(type, info);\n        } else {\n            throw new RuntimeException(info.msg);\n        }\n    }\n\n    _msrOnProgress(e) {\n        let reader = e.target;\n        let bigbuffer = reader.result;\n        if (bigbuffer == null) {  // result may be null, workaround for buggy M$\n            this._doReconnectIfNeeded();\n            return;\n        }\n\n        let slice = bigbuffer.slice(this._lastTimeBufferSize);\n        this._lastTimeBufferSize = bigbuffer.byteLength;\n        let byteStart = this._totalRange.from + this._receivedLength;\n        this._receivedLength += slice.byteLength;\n\n        if (this._onDataArrival) {\n            this._onDataArrival(slice, byteStart, this._receivedLength);\n        }\n\n        if (bigbuffer.byteLength >= this._bufferLimit) {\n            Log.v(this.TAG, `MSStream buffer exceeded max size near ${byteStart + slice.byteLength}, reconnecting...`);\n            this._doReconnectIfNeeded();\n        }\n    }\n\n    _doReconnectIfNeeded() {\n        if (this._contentLength == null || this._receivedLength < this._contentLength) {\n            this._isReconnecting = true;\n            this._lastTimeBufferSize = 0;\n            this._internalAbort();\n\n            let range = {\n                from: this._totalRange.from + this._receivedLength,\n                to: -1\n            };\n            this._internalOpen(this._dataSource, range, true);\n        }\n    }\n\n    _msrOnLoad(e) {  // actually it is onComplete event\n        this._status = LoaderStatus.kComplete;\n        if (this._onComplete) {\n            this._onComplete(this._totalRange.from, this._totalRange.from + this._receivedLength - 1);\n        }\n    }\n\n    _msrOnError(e) {\n        this._status = LoaderStatus.kError;\n        let type = 0;\n        let info = null;\n\n        if (this._contentLength && this._receivedLength < this._contentLength) {\n            type = LoaderErrors.EARLY_EOF;\n            info = {code: -1, msg: 'MSStream meet Early-Eof'};\n        } else {\n            type = LoaderErrors.EARLY_EOF;\n            info = {code: -1, msg: e.constructor.name + ' ' + e.type};\n        }\n\n        if (this._onError) {\n            this._onError(type, info);\n        } else {\n            throw new RuntimeException(info.msg);\n        }\n    }\n}\n\nexport default MSStreamLoader;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../utils/logger.js';\nimport SpeedSampler from './speed-sampler.js';\nimport {BaseLoader, LoaderStatus, LoaderErrors} from './loader.js';\nimport {RuntimeException} from '../utils/exception.js';\n\n// Universal IO Loader, implemented by adding Range header in xhr's request header\nclass RangeLoader extends BaseLoader {\n\n    static isSupported() {\n        try {\n            let xhr = new XMLHttpRequest();\n            xhr.open('GET', 'https://example.com', true);\n            xhr.responseType = 'arraybuffer';\n            return (xhr.responseType === 'arraybuffer');\n        } catch (e) {\n            Log.w('RangeLoader', e.message);\n            return false;\n        }\n    }\n\n    constructor(seekHandler, config) {\n        super('xhr-range-loader');\n        this.TAG = 'RangeLoader';\n\n        this._seekHandler = seekHandler;\n        this._config = config;\n        this._needStash = false;\n\n        this._chunkSizeKBList = [\n            128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 5120, 6144, 7168, 8192\n        ];\n        this._currentChunkSizeKB = 384;\n        this._currentSpeedNormalized = 0;\n        this._zeroSpeedChunkCount = 0;\n\n        this._xhr = null;\n        this._speedSampler = new SpeedSampler();\n\n        this._requestAbort = false;\n        this._waitForTotalLength = false;\n        this._totalLengthReceived = false;\n\n        this._currentRequestURL = null;\n        this._currentRedirectedURL = null;\n        this._currentRequestRange = null;\n        this._totalLength = null;  // size of the entire file\n        this._contentLength = null;  // Content-Length of entire request range\n        this._receivedLength = 0;  // total received bytes\n        this._lastTimeLoaded = 0;  // received bytes of current request sub-range\n    }\n\n    destroy() {\n        if (this.isWorking()) {\n            this.abort();\n        }\n        if (this._xhr) {\n            this._xhr.onreadystatechange = null;\n            this._xhr.onprogress = null;\n            this._xhr.onload = null;\n            this._xhr.onerror = null;\n            this._xhr = null;\n        }\n        super.destroy();\n    }\n\n    get currentSpeed() {\n        return this._speedSampler.lastSecondKBps;\n    }\n\n    open(dataSource, range) {\n        this._dataSource = dataSource;\n        this._range = range;\n        this._status = LoaderStatus.kConnecting;\n\n        let useRefTotalLength = false;\n        if (this._dataSource.filesize != undefined && this._dataSource.filesize !== 0) {\n            useRefTotalLength = true;\n            this._totalLength = this._dataSource.filesize;\n        }\n\n        if (!this._totalLengthReceived && !useRefTotalLength) {\n            // We need total filesize\n            this._waitForTotalLength = true;\n            this._internalOpen(this._dataSource, {from: 0, to: -1});\n        } else {\n            // We have filesize, start loading\n            this._openSubRange();\n        }\n    }\n\n    _openSubRange() {\n        let chunkSize = this._currentChunkSizeKB * 1024;\n\n        let from = this._range.from + this._receivedLength;\n        let to = from + chunkSize;\n\n        if (this._contentLength != null) {\n            if (to - this._range.from >= this._contentLength) {\n                to = this._range.from + this._contentLength - 1;\n            }\n        }\n\n        this._currentRequestRange = {from, to};\n        this._internalOpen(this._dataSource, this._currentRequestRange);\n    }\n\n    _internalOpen(dataSource, range) {\n        this._lastTimeLoaded = 0;\n\n        let sourceURL = dataSource.url;\n        if (this._config.reuseRedirectedURL) {\n            if (this._currentRedirectedURL != undefined) {\n                sourceURL = this._currentRedirectedURL;\n            } else if (dataSource.redirectedURL != undefined) {\n                sourceURL = dataSource.redirectedURL;\n            }\n        }\n\n        let seekConfig = this._seekHandler.getConfig(sourceURL, range);\n        this._currentRequestURL = seekConfig.url;\n\n        let xhr = this._xhr = new XMLHttpRequest();\n        xhr.open('GET', seekConfig.url, true);\n        xhr.responseType = 'arraybuffer';\n        xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n        xhr.onprogress = this._onProgress.bind(this);\n        xhr.onload = this._onLoad.bind(this);\n        xhr.onerror = this._onXhrError.bind(this);\n\n        if (dataSource.withCredentials) {\n            xhr.withCredentials = true;\n        }\n\n        if (typeof seekConfig.headers === 'object') {\n            let headers = seekConfig.headers;\n\n            for (let key in headers) {\n                if (headers.hasOwnProperty(key)) {\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        }\n\n        // add additional headers\n        if (typeof this._config.headers === 'object') {\n            let headers = this._config.headers;\n\n            for (let key in headers) {\n                if (headers.hasOwnProperty(key)) {\n                    xhr.setRequestHeader(key, headers[key]);\n                }\n            }\n        }\n\n        xhr.send();\n    }\n\n    abort() {\n        this._requestAbort = true;\n        this._internalAbort();\n        this._status = LoaderStatus.kComplete;\n    }\n\n    _internalAbort() {\n        if (this._xhr) {\n            this._xhr.onreadystatechange = null;\n            this._xhr.onprogress = null;\n            this._xhr.onload = null;\n            this._xhr.onerror = null;\n            this._xhr.abort();\n            this._xhr = null;\n        }\n    }\n\n    _onReadyStateChange(e) {\n        let xhr = e.target;\n\n        if (xhr.readyState === 2) {  // HEADERS_RECEIVED\n            if (xhr.responseURL != undefined) {  // if the browser support this property\n                let redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);\n                if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {\n                    this._currentRedirectedURL = redirectedURL;\n                    if (this._onURLRedirect) {\n                        this._onURLRedirect(redirectedURL);\n                    }\n                }\n            }\n\n            if ((xhr.status >= 200 && xhr.status <= 299)) {\n                if (this._waitForTotalLength) {\n                    return;\n                }\n                this._status = LoaderStatus.kBuffering;\n            } else {\n                this._status = LoaderStatus.kError;\n                if (this._onError) {\n                    this._onError(LoaderErrors.HTTP_STATUS_CODE_INVALID, {code: xhr.status, msg: xhr.statusText});\n                } else {\n                    throw new RuntimeException('RangeLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);\n                }\n            }\n        }\n    }\n\n    _onProgress(e) {\n        if (this._status === LoaderStatus.kError) {\n            // Ignore error response\n            return;\n        }\n\n        if (this._contentLength === null) {\n            let openNextRange = false;\n\n            if (this._waitForTotalLength) {\n                this._waitForTotalLength = false;\n                this._totalLengthReceived = true;\n                openNextRange = true;\n\n                let total = e.total;\n                this._internalAbort();\n                if (total != null & total !== 0) {\n                    this._totalLength = total;\n                }\n            }\n\n            // calculate currrent request range's contentLength\n            if (this._range.to === -1) {\n                this._contentLength = this._totalLength - this._range.from;\n            } else {  // to !== -1\n                this._contentLength = this._range.to - this._range.from + 1;\n            }\n\n            if (openNextRange) {\n                this._openSubRange();\n                return;\n            }\n            if (this._onContentLengthKnown) {\n                this._onContentLengthKnown(this._contentLength);\n            }\n        }\n\n        let delta = e.loaded - this._lastTimeLoaded;\n        this._lastTimeLoaded = e.loaded;\n        this._speedSampler.addBytes(delta);\n    }\n\n    _normalizeSpeed(input) {\n        let list = this._chunkSizeKBList;\n        let last = list.length - 1;\n        let mid = 0;\n        let lbound = 0;\n        let ubound = last;\n\n        if (input < list[0]) {\n            return list[0];\n        }\n\n        while (lbound <= ubound) {\n            mid = lbound + Math.floor((ubound - lbound) / 2);\n            if (mid === last || (input >= list[mid] && input < list[mid + 1])) {\n                return list[mid];\n            } else if (list[mid] < input) {\n                lbound = mid + 1;\n            } else {\n                ubound = mid - 1;\n            }\n        }\n    }\n\n    _onLoad(e) {\n        if (this._status === LoaderStatus.kError) {\n            // Ignore error response\n            return;\n        }\n\n        if (this._waitForTotalLength) {\n            this._waitForTotalLength = false;\n            return;\n        }\n\n        this._lastTimeLoaded = 0;\n        let KBps = this._speedSampler.lastSecondKBps;\n        if (KBps === 0) {\n            this._zeroSpeedChunkCount++;\n            if (this._zeroSpeedChunkCount >= 3) {\n                // Try get currentKBps after 3 chunks\n                KBps = this._speedSampler.currentKBps;\n            }\n        }\n\n        if (KBps !== 0) {\n            let normalized = this._normalizeSpeed(KBps);\n            if (this._currentSpeedNormalized !== normalized) {\n                this._currentSpeedNormalized = normalized;\n                this._currentChunkSizeKB = normalized;\n            }\n        }\n\n        let chunk = e.target.response;\n        let byteStart = this._range.from + this._receivedLength;\n        this._receivedLength += chunk.byteLength;\n\n        let reportComplete = false;\n\n        if (this._contentLength != null && this._receivedLength < this._contentLength) {\n            // continue load next chunk\n            this._openSubRange();\n        } else {\n            reportComplete = true;\n        }\n\n        // dispatch received chunk\n        if (this._onDataArrival) {\n            this._onDataArrival(chunk, byteStart, this._receivedLength);\n        }\n\n        if (reportComplete) {\n            this._status = LoaderStatus.kComplete;\n            if (this._onComplete) {\n                this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);\n            }\n        }\n    }\n\n    _onXhrError(e) {\n        this._status = LoaderStatus.kError;\n        let type = 0;\n        let info = null;\n\n        if (this._contentLength && this._receivedLength > 0\n                                && this._receivedLength < this._contentLength) {\n            type = LoaderErrors.EARLY_EOF;\n            info = {code: -1, msg: 'RangeLoader meet Early-Eof'};\n        } else {\n            type = LoaderErrors.EXCEPTION;\n            info = {code: -1, msg: e.constructor.name + ' ' + e.type};\n        }\n\n        if (this._onError) {\n            this._onError(type, info);\n        } else {\n            throw new RuntimeException(info.msg);\n        }\n    }\n\n}\n\nexport default RangeLoader;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport Log from '../utils/logger.js';\nimport Browser from '../utils/browser.js';\nimport PlayerEvents from './player-events.js';\nimport Transmuxer from '../core/transmuxer.js';\nimport TransmuxingEvents from '../core/transmuxing-events.js';\nimport MSEController from '../core/mse-controller.js';\nimport MSEEvents from '../core/mse-events.js';\nimport {ErrorTypes, ErrorDetails} from './player-errors.js';\nimport {createDefaultConfig} from '../config.js';\nimport {InvalidArgumentException, IllegalStateException} from '../utils/exception.js';\n\nclass FlvPlayer {\n\n    constructor(mediaDataSource, config) {\n        this.TAG = 'FlvPlayer';\n        this._type = 'FlvPlayer';\n        this._emitter = new EventEmitter();\n\n        this._config = createDefaultConfig();\n        if (typeof config === 'object') {\n            Object.assign(this._config, config);\n        }\n\n        if (mediaDataSource.type.toLowerCase() !== 'flv') {\n            throw new InvalidArgumentException('FlvPlayer requires an flv MediaDataSource input!');\n        }\n\n        if (mediaDataSource.isLive === true) {\n            this._config.isLive = true;\n        }\n\n        this.e = {\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this),\n            onvSeeking: this._onvSeeking.bind(this),\n            onvCanPlay: this._onvCanPlay.bind(this),\n            onvStalled: this._onvStalled.bind(this),\n            onvProgress: this._onvProgress.bind(this)\n        };\n\n        if (self.performance && self.performance.now) {\n            this._now = self.performance.now.bind(self.performance);\n        } else {\n            this._now = Date.now;\n        }\n\n        this._pendingSeekTime = null;  // in seconds\n        this._requestSetTime = false;\n        this._seekpointRecord = null;\n        this._progressChecker = null;\n\n        this._mediaDataSource = mediaDataSource;\n        this._mediaElement = null;\n        this._msectl = null;\n        this._transmuxer = null;\n\n        this._mseSourceOpened = false;\n        this._hasPendingLoad = false;\n        this._receivedCanPlay = false;\n\n        this._mediaInfo = null;\n        this._statisticsInfo = null;\n\n        let chromeNeedIDRFix = (Browser.chrome &&\n                               (Browser.version.major < 50 ||\n                               (Browser.version.major === 50 && Browser.version.build < 2661)));\n        this._alwaysSeekKeyframe = (chromeNeedIDRFix || Browser.msedge || Browser.msie) ? true : false;\n\n        if (this._alwaysSeekKeyframe) {\n            this._config.accurateSeek = false;\n        }\n    }\n\n    destroy() {\n        if (this._progressChecker != null) {\n            window.clearInterval(this._progressChecker);\n            this._progressChecker = null;\n        }\n        if (this._transmuxer) {\n            this.unload();\n        }\n        if (this._mediaElement) {\n            this.detachMediaElement();\n        }\n        this.e = null;\n        this._mediaDataSource = null;\n\n        this._emitter.removeAllListeners();\n        this._emitter = null;\n    }\n\n    on(event, listener) {\n        if (event === PlayerEvents.MEDIA_INFO) {\n            if (this._mediaInfo != null) {\n                Promise.resolve().then(() => {\n                    this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n                });\n            }\n        } else if (event === PlayerEvents.STATISTICS_INFO) {\n            if (this._statisticsInfo != null) {\n                Promise.resolve().then(() => {\n                    this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n                });\n            }\n        }\n        this._emitter.addListener(event, listener);\n    }\n\n    off(event, listener) {\n        this._emitter.removeListener(event, listener);\n    }\n\n    attachMediaElement(mediaElement) {\n        this._mediaElement = mediaElement;\n        mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n        mediaElement.addEventListener('seeking', this.e.onvSeeking);\n        mediaElement.addEventListener('canplay', this.e.onvCanPlay);\n        mediaElement.addEventListener('stalled', this.e.onvStalled);\n        mediaElement.addEventListener('progress', this.e.onvProgress);\n\n        this._msectl = new MSEController(this._config);\n\n        this._msectl.on(MSEEvents.UPDATE_END, this._onmseUpdateEnd.bind(this));\n        this._msectl.on(MSEEvents.BUFFER_FULL, this._onmseBufferFull.bind(this));\n        this._msectl.on(MSEEvents.SOURCE_OPEN, () => {\n            this._mseSourceOpened = true;\n            if (this._hasPendingLoad) {\n                this._hasPendingLoad = false;\n                this.load();\n            }\n        });\n        this._msectl.on(MSEEvents.ERROR, (info) => {\n            this._emitter.emit(PlayerEvents.ERROR,\n                               ErrorTypes.MEDIA_ERROR,\n                               ErrorDetails.MEDIA_MSE_ERROR,\n                               info\n            );\n        });\n\n        this._msectl.attachMediaElement(mediaElement);\n\n        if (this._pendingSeekTime != null) {\n            try {\n                mediaElement.currentTime = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n            } catch (e) {\n                // IE11 may throw InvalidStateError if readyState === 0\n                // We can defer set currentTime operation after loadedmetadata\n            }\n        }\n    }\n\n    detachMediaElement() {\n        if (this._mediaElement) {\n            this._msectl.detachMediaElement();\n            this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n            this._mediaElement.removeEventListener('seeking', this.e.onvSeeking);\n            this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);\n            this._mediaElement.removeEventListener('stalled', this.e.onvStalled);\n            this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n            this._mediaElement = null;\n        }\n        if (this._msectl) {\n            this._msectl.destroy();\n            this._msectl = null;\n        }\n    }\n\n    load() {\n        if (!this._mediaElement) {\n            throw new IllegalStateException('HTMLMediaElement must be attached before load()!');\n        }\n        if (this._transmuxer) {\n            throw new IllegalStateException('FlvPlayer.load() has been called, please call unload() first!');\n        }\n        if (this._hasPendingLoad) {\n            return;\n        }\n\n        if (this._config.deferLoadAfterSourceOpen && this._mseSourceOpened === false) {\n            this._hasPendingLoad = true;\n            return;\n        }\n\n        if (this._mediaElement.readyState > 0) {\n            this._requestSetTime = true;\n            // IE11 may throw InvalidStateError if readyState === 0\n            this._mediaElement.currentTime = 0;\n        }\n\n        this._transmuxer = new Transmuxer(this._mediaDataSource, this._config);\n\n        this._transmuxer.on(TransmuxingEvents.INIT_SEGMENT, (type, is) => {\n            this._msectl.appendInitSegment(is);\n        });\n        this._transmuxer.on(TransmuxingEvents.MEDIA_SEGMENT, (type, ms) => {\n            this._msectl.appendMediaSegment(ms);\n\n            // lazyLoad check\n            if (this._config.lazyLoad && !this._config.isLive) {\n                let currentTime = this._mediaElement.currentTime;\n                if (ms.info.endDts >= (currentTime + this._config.lazyLoadMaxDuration) * 1000) {\n                    if (this._progressChecker == null) {\n                        Log.v(this.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');\n                        this._suspendTransmuxer();\n                    }\n                }\n            }\n        });\n        this._transmuxer.on(TransmuxingEvents.LOADING_COMPLETE, () => {\n            this._msectl.endOfStream();\n            this._emitter.emit(PlayerEvents.LOADING_COMPLETE);\n        });\n        this._transmuxer.on(TransmuxingEvents.RECOVERED_EARLY_EOF, () => {\n            this._emitter.emit(PlayerEvents.RECOVERED_EARLY_EOF);\n        });\n        this._transmuxer.on(TransmuxingEvents.IO_ERROR, (detail, info) => {\n            this._emitter.emit(PlayerEvents.ERROR, ErrorTypes.NETWORK_ERROR, detail, info);\n        });\n        this._transmuxer.on(TransmuxingEvents.DEMUX_ERROR, (detail, info) => {\n            this._emitter.emit(PlayerEvents.ERROR, ErrorTypes.MEDIA_ERROR, detail, {code: -1, msg: info});\n        });\n        this._transmuxer.on(TransmuxingEvents.MEDIA_INFO, (mediaInfo) => {\n            this._mediaInfo = mediaInfo;\n            this._emitter.emit(PlayerEvents.MEDIA_INFO, Object.assign({}, mediaInfo));\n        });\n        this._transmuxer.on(TransmuxingEvents.METADATA_ARRIVED, (metadata) => {\n            this._emitter.emit(PlayerEvents.METADATA_ARRIVED, metadata);\n        });\n        this._transmuxer.on(TransmuxingEvents.SCRIPTDATA_ARRIVED, (data) => {\n            this._emitter.emit(PlayerEvents.SCRIPTDATA_ARRIVED, data);\n        });\n        this._transmuxer.on(TransmuxingEvents.STATISTICS_INFO, (statInfo) => {\n            this._statisticsInfo = this._fillStatisticsInfo(statInfo);\n            this._emitter.emit(PlayerEvents.STATISTICS_INFO, Object.assign({}, this._statisticsInfo));\n        });\n        this._transmuxer.on(TransmuxingEvents.RECOMMEND_SEEKPOINT, (milliseconds) => {\n            if (this._mediaElement && !this._config.accurateSeek) {\n                this._requestSetTime = true;\n                this._mediaElement.currentTime = milliseconds / 1000;\n            }\n        });\n\n        this._transmuxer.open();\n    }\n\n    unload() {\n        if (this._mediaElement) {\n            this._mediaElement.pause();\n        }\n        if (this._msectl) {\n            this._msectl.seek(0);\n        }\n        if (this._transmuxer) {\n            this._transmuxer.close();\n            this._transmuxer.destroy();\n            this._transmuxer = null;\n        }\n    }\n\n    play() {\n        return this._mediaElement.play();\n    }\n\n    pause() {\n        this._mediaElement.pause();\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get buffered() {\n        return this._mediaElement.buffered;\n    }\n\n    get duration() {\n        return this._mediaElement.duration;\n    }\n\n    get volume() {\n        return this._mediaElement.volume;\n    }\n\n    set volume(value) {\n        this._mediaElement.volume = value;\n    }\n\n    get muted() {\n        return this._mediaElement.muted;\n    }\n\n    set muted(muted) {\n        this._mediaElement.muted = muted;\n    }\n\n    get currentTime() {\n        if (this._mediaElement) {\n            return this._mediaElement.currentTime;\n        }\n        return 0;\n    }\n\n    set currentTime(seconds) {\n        if (this._mediaElement) {\n            this._internalSeek(seconds);\n        } else {\n            this._pendingSeekTime = seconds;\n        }\n    }\n\n    get mediaInfo() {\n        return Object.assign({}, this._mediaInfo);\n    }\n\n    get statisticsInfo() {\n        if (this._statisticsInfo == null) {\n            this._statisticsInfo = {};\n        }\n        this._statisticsInfo = this._fillStatisticsInfo(this._statisticsInfo);\n        return Object.assign({}, this._statisticsInfo);\n    }\n\n    _fillStatisticsInfo(statInfo) {\n        statInfo.playerType = this._type;\n\n        if (!(this._mediaElement instanceof HTMLVideoElement)) {\n            return statInfo;\n        }\n\n        let hasQualityInfo = true;\n        let decoded = 0;\n        let dropped = 0;\n\n        if (this._mediaElement.getVideoPlaybackQuality) {\n            let quality = this._mediaElement.getVideoPlaybackQuality();\n            decoded = quality.totalVideoFrames;\n            dropped = quality.droppedVideoFrames;\n        } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n            decoded = this._mediaElement.webkitDecodedFrameCount;\n            dropped = this._mediaElement.webkitDroppedFrameCount;\n        } else {\n            hasQualityInfo = false;\n        }\n\n        if (hasQualityInfo) {\n            statInfo.decodedFrames = decoded;\n            statInfo.droppedFrames = dropped;\n        }\n\n        return statInfo;\n    }\n\n    _onmseUpdateEnd() {\n        if (!this._config.lazyLoad || this._config.isLive) {\n            return;\n        }\n\n        let buffered = this._mediaElement.buffered;\n        let currentTime = this._mediaElement.currentTime;\n        let currentRangeStart = 0;\n        let currentRangeEnd = 0;\n\n        for (let i = 0; i < buffered.length; i++) {\n            let start = buffered.start(i);\n            let end = buffered.end(i);\n            if (start <= currentTime && currentTime < end) {\n                currentRangeStart = start;\n                currentRangeEnd = end;\n                break;\n            }\n        }\n\n        if (currentRangeEnd >= currentTime + this._config.lazyLoadMaxDuration && this._progressChecker == null) {\n            Log.v(this.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');\n            this._suspendTransmuxer();\n        }\n    }\n\n    _onmseBufferFull() {\n        Log.v(this.TAG, 'MSE SourceBuffer is full, suspend transmuxing task');\n        if (this._progressChecker == null) {\n            this._suspendTransmuxer();\n        }\n    }\n\n    _suspendTransmuxer() {\n        if (this._transmuxer) {\n            this._transmuxer.pause();\n\n            if (this._progressChecker == null) {\n                this._progressChecker = window.setInterval(this._checkProgressAndResume.bind(this), 1000);\n            }\n        }\n    }\n\n    _checkProgressAndResume() {\n        let currentTime = this._mediaElement.currentTime;\n        let buffered = this._mediaElement.buffered;\n\n        let needResume = false;\n\n        for (let i = 0; i < buffered.length; i++) {\n            let from = buffered.start(i);\n            let to = buffered.end(i);\n            if (currentTime >= from && currentTime < to) {\n                if (currentTime >= to - this._config.lazyLoadRecoverDuration) {\n                    needResume = true;\n                }\n                break;\n            }\n        }\n\n        if (needResume) {\n            window.clearInterval(this._progressChecker);\n            this._progressChecker = null;\n            if (needResume) {\n                Log.v(this.TAG, 'Continue loading from paused position');\n                this._transmuxer.resume();\n            }\n        }\n    }\n\n    _isTimepointBuffered(seconds) {\n        let buffered = this._mediaElement.buffered;\n\n        for (let i = 0; i < buffered.length; i++) {\n            let from = buffered.start(i);\n            let to = buffered.end(i);\n            if (seconds >= from && seconds < to) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _internalSeek(seconds) {\n        let directSeek = this._isTimepointBuffered(seconds);\n\n        let directSeekBegin = false;\n        let directSeekBeginTime = 0;\n\n        if (seconds < 1.0 && this._mediaElement.buffered.length > 0) {\n            let videoBeginTime = this._mediaElement.buffered.start(0);\n            if ((videoBeginTime < 1.0 && seconds < videoBeginTime) || Browser.safari) {\n                directSeekBegin = true;\n                // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid\n                directSeekBeginTime = Browser.safari ? 0.1 : videoBeginTime;\n            }\n        }\n\n        if (directSeekBegin) {  // seek to video begin, set currentTime directly if beginPTS buffered\n            this._requestSetTime = true;\n            this._mediaElement.currentTime = directSeekBeginTime;\n        }  else if (directSeek) {  // buffered position\n            if (!this._alwaysSeekKeyframe) {\n                this._requestSetTime = true;\n                this._mediaElement.currentTime = seconds;\n            } else {\n                let idr = this._msectl.getNearestKeyframe(Math.floor(seconds * 1000));\n                this._requestSetTime = true;\n                if (idr != null) {\n                    this._mediaElement.currentTime = idr.dts / 1000;\n                } else {\n                    this._mediaElement.currentTime = seconds;\n                }\n            }\n            if (this._progressChecker != null) {\n                this._checkProgressAndResume();\n            }\n        } else {\n            if (this._progressChecker != null) {\n                window.clearInterval(this._progressChecker);\n                this._progressChecker = null;\n            }\n            this._msectl.seek(seconds);\n            this._transmuxer.seek(Math.floor(seconds * 1000));  // in milliseconds\n            // no need to set mediaElement.currentTime if non-accurateSeek,\n            // just wait for the recommend_seekpoint callback\n            if (this._config.accurateSeek) {\n                this._requestSetTime = true;\n                this._mediaElement.currentTime = seconds;\n            }\n        }\n    }\n\n    _checkAndApplyUnbufferedSeekpoint() {\n        if (this._seekpointRecord) {\n            if (this._seekpointRecord.recordTime <= this._now() - 100) {\n                let target = this._mediaElement.currentTime;\n                this._seekpointRecord = null;\n                if (!this._isTimepointBuffered(target)) {\n                    if (this._progressChecker != null) {\n                        window.clearTimeout(this._progressChecker);\n                        this._progressChecker = null;\n                    }\n                    // .currentTime is consists with .buffered timestamp\n                    // Chrome/Edge use DTS, while FireFox/Safari use PTS\n                    this._msectl.seek(target);\n                    this._transmuxer.seek(Math.floor(target * 1000));\n                    // set currentTime if accurateSeek, or wait for recommend_seekpoint callback\n                    if (this._config.accurateSeek) {\n                        this._requestSetTime = true;\n                        this._mediaElement.currentTime = target;\n                    }\n                }\n            } else {\n                window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);\n            }\n        }\n    }\n\n    _checkAndResumeStuckPlayback(stalled) {\n        let media = this._mediaElement;\n        if (stalled || !this._receivedCanPlay || media.readyState < 2) {  // HAVE_CURRENT_DATA\n            let buffered = media.buffered;\n            if (buffered.length > 0 && media.currentTime < buffered.start(0)) {\n                Log.w(this.TAG, `Playback seems stuck at ${media.currentTime}, seek to ${buffered.start(0)}`);\n                this._requestSetTime = true;\n                this._mediaElement.currentTime = buffered.start(0);\n                this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n            }\n        } else {\n            // Playback didn't stuck, remove progress event listener\n            this._mediaElement.removeEventListener('progress', this.e.onvProgress);\n        }\n    }\n\n    _onvLoadedMetadata(e) {\n        if (this._pendingSeekTime != null) {\n            this._mediaElement.currentTime = this._pendingSeekTime;\n            this._pendingSeekTime = null;\n        }\n    }\n\n    _onvSeeking(e) {  // handle seeking request from browser's progress bar\n        let target = this._mediaElement.currentTime;\n        let buffered = this._mediaElement.buffered;\n\n        if (this._requestSetTime) {\n            this._requestSetTime = false;\n            return;\n        }\n\n        if (target < 1.0 && buffered.length > 0) {\n            // seek to video begin, set currentTime directly if beginPTS buffered\n            let videoBeginTime = buffered.start(0);\n            if ((videoBeginTime < 1.0 && target < videoBeginTime) || Browser.safari) {\n                this._requestSetTime = true;\n                // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid\n                this._mediaElement.currentTime = Browser.safari ? 0.1 : videoBeginTime;\n                return;\n            }\n        }\n\n        if (this._isTimepointBuffered(target)) {\n            if (this._alwaysSeekKeyframe) {\n                let idr = this._msectl.getNearestKeyframe(Math.floor(target * 1000));\n                if (idr != null) {\n                    this._requestSetTime = true;\n                    this._mediaElement.currentTime = idr.dts / 1000;\n                }\n            }\n            if (this._progressChecker != null) {\n                this._checkProgressAndResume();\n            }\n            return;\n        }\n\n        this._seekpointRecord = {\n            seekPoint: target,\n            recordTime: this._now()\n        };\n        window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);\n    }\n\n    _onvCanPlay(e) {\n        this._receivedCanPlay = true;\n        this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);\n    }\n\n    _onvStalled(e) {\n        this._checkAndResumeStuckPlayback(true);\n    }\n\n    _onvProgress(e) {\n        this._checkAndResumeStuckPlayback();\n    }\n\n}\n\nexport default FlvPlayer;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport PlayerEvents from './player-events.js';\nimport {createDefaultConfig} from '../config.js';\nimport {InvalidArgumentException, IllegalStateException} from '../utils/exception.js';\n\n// Player wrapper for browser's native player (HTMLVideoElement) without MediaSource src. \nclass NativePlayer {\n\n    constructor(mediaDataSource, config) {\n        this.TAG = 'NativePlayer';\n        this._type = 'NativePlayer';\n        this._emitter = new EventEmitter();\n\n        this._config = createDefaultConfig();\n        if (typeof config === 'object') {\n            Object.assign(this._config, config);\n        }\n\n        if (mediaDataSource.type.toLowerCase() === 'flv') {\n            throw new InvalidArgumentException('NativePlayer does\\'t support flv MediaDataSource input!');\n        }\n        if (mediaDataSource.hasOwnProperty('segments')) {\n            throw new InvalidArgumentException(`NativePlayer(${mediaDataSource.type}) doesn't support multipart playback!`);\n        }\n\n        this.e = {\n            onvLoadedMetadata: this._onvLoadedMetadata.bind(this)\n        };\n\n        this._pendingSeekTime = null;\n        this._statisticsReporter = null;\n\n        this._mediaDataSource = mediaDataSource;\n        this._mediaElement = null;\n    }\n\n    destroy() {\n        if (this._mediaElement) {\n            this.unload();\n            this.detachMediaElement();\n        }\n        this.e = null;\n        this._mediaDataSource = null;\n        this._emitter.removeAllListeners();\n        this._emitter = null;\n    }\n\n    on(event, listener) {\n        if (event === PlayerEvents.MEDIA_INFO) {\n            if (this._mediaElement != null && this._mediaElement.readyState !== 0) {  // HAVE_NOTHING\n                Promise.resolve().then(() => {\n                    this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n                });\n            }\n        } else if (event === PlayerEvents.STATISTICS_INFO) {\n            if (this._mediaElement != null && this._mediaElement.readyState !== 0) {\n                Promise.resolve().then(() => {\n                    this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n                });\n            }\n        }\n        this._emitter.addListener(event, listener);\n    }\n\n    off(event, listener) {\n        this._emitter.removeListener(event, listener);\n    }\n\n    attachMediaElement(mediaElement) {\n        this._mediaElement = mediaElement;\n        mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n\n        if (this._pendingSeekTime != null) {\n            try {\n                mediaElement.currentTime = this._pendingSeekTime;\n                this._pendingSeekTime = null;\n            } catch (e) {\n                // IE11 may throw InvalidStateError if readyState === 0\n                // Defer set currentTime operation after loadedmetadata\n            }\n        }\n    }\n\n    detachMediaElement() {\n        if (this._mediaElement) {\n            this._mediaElement.src = '';\n            this._mediaElement.removeAttribute('src');\n            this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);\n            this._mediaElement = null;\n        }\n        if (this._statisticsReporter != null) {\n            window.clearInterval(this._statisticsReporter);\n            this._statisticsReporter = null;\n        }\n    }\n\n    load() {\n        if (!this._mediaElement) {\n            throw new IllegalStateException('HTMLMediaElement must be attached before load()!');\n        }\n        this._mediaElement.src = this._mediaDataSource.url;\n\n        if (this._mediaElement.readyState > 0) {\n            this._mediaElement.currentTime = 0;\n        }\n\n        this._mediaElement.preload = 'auto';\n        this._mediaElement.load();\n        this._statisticsReporter = window.setInterval(\n            this._reportStatisticsInfo.bind(this),\n        this._config.statisticsInfoReportInterval);\n    }\n\n    unload() {\n        if (this._mediaElement) {\n            this._mediaElement.src = '';\n            this._mediaElement.removeAttribute('src');\n        }\n        if (this._statisticsReporter != null) {\n            window.clearInterval(this._statisticsReporter);\n            this._statisticsReporter = null;\n        }\n    }\n\n    play() {\n        return this._mediaElement.play();\n    }\n\n    pause() {\n        this._mediaElement.pause();\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get buffered() {\n        return this._mediaElement.buffered;\n    }\n\n    get duration() {\n        return this._mediaElement.duration;\n    }\n\n    get volume() {\n        return this._mediaElement.volume;\n    }\n\n    set volume(value) {\n        this._mediaElement.volume = value;\n    }\n\n    get muted() {\n        return this._mediaElement.muted;\n    }\n\n    set muted(muted) {\n        this._mediaElement.muted = muted;\n    }\n\n    get currentTime() {\n        if (this._mediaElement) {\n            return this._mediaElement.currentTime;\n        }\n        return 0;\n    }\n\n    set currentTime(seconds) {\n        if (this._mediaElement) {\n            this._mediaElement.currentTime = seconds;\n        } else {\n            this._pendingSeekTime = seconds;\n        }\n    }\n\n    get mediaInfo() {\n        let mediaPrefix = (this._mediaElement instanceof HTMLAudioElement) ? 'audio/' : 'video/';\n        let info = {\n            mimeType: mediaPrefix + this._mediaDataSource.type\n        };\n        if (this._mediaElement) {\n            info.duration = Math.floor(this._mediaElement.duration * 1000);\n            if (this._mediaElement instanceof HTMLVideoElement) {\n                info.width = this._mediaElement.videoWidth;\n                info.height = this._mediaElement.videoHeight;\n            }\n        }\n        return info;\n    }\n\n    get statisticsInfo() {\n        let info = {\n            playerType: this._type,\n            url: this._mediaDataSource.url\n        };\n\n        if (!(this._mediaElement instanceof HTMLVideoElement)) {\n            return info;\n        }\n\n        let hasQualityInfo = true;\n        let decoded = 0;\n        let dropped = 0;\n\n        if (this._mediaElement.getVideoPlaybackQuality) {\n            let quality = this._mediaElement.getVideoPlaybackQuality();\n            decoded = quality.totalVideoFrames;\n            dropped = quality.droppedVideoFrames;\n        } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {\n            decoded = this._mediaElement.webkitDecodedFrameCount;\n            dropped = this._mediaElement.webkitDroppedFrameCount;\n        } else {\n            hasQualityInfo = false;\n        }\n\n        if (hasQualityInfo) {\n            info.decodedFrames = decoded;\n            info.droppedFrames = dropped;\n        }\n        \n        return info;\n    }\n\n    _onvLoadedMetadata(e) {\n        if (this._pendingSeekTime != null) {\n            this._mediaElement.currentTime = this._pendingSeekTime;\n            this._pendingSeekTime = null;\n        }\n        this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);\n    }\n\n    _reportStatisticsInfo() {\n        this._emitter.emit(PlayerEvents.STATISTICS_INFO, this.statisticsInfo);\n    }\n\n}\n\nexport default NativePlayer;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {LoaderErrors} from '../io/loader.js';\nimport DemuxErrors from '../demux/demux-errors.js';\n\nexport const ErrorTypes = {\n    NETWORK_ERROR: 'NetworkError',\n    MEDIA_ERROR: 'MediaError',\n    OTHER_ERROR: 'OtherError'\n};\n\nexport const ErrorDetails = {\n    NETWORK_EXCEPTION: LoaderErrors.EXCEPTION,\n    NETWORK_STATUS_CODE_INVALID: LoaderErrors.HTTP_STATUS_CODE_INVALID,\n    NETWORK_TIMEOUT: LoaderErrors.CONNECTING_TIMEOUT,\n    NETWORK_UNRECOVERABLE_EARLY_EOF: LoaderErrors.UNRECOVERABLE_EARLY_EOF,\n\n    MEDIA_MSE_ERROR: 'MediaMSEError',\n\n    MEDIA_FORMAT_ERROR: DemuxErrors.FORMAT_ERROR,\n    MEDIA_FORMAT_UNSUPPORTED: DemuxErrors.FORMAT_UNSUPPORTED,\n    MEDIA_CODEC_UNSUPPORTED: DemuxErrors.CODEC_UNSUPPORTED\n};","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst PlayerEvents = {\n    ERROR: 'error',\n    LOADING_COMPLETE: 'loading_complete',\n    RECOVERED_EARLY_EOF: 'recovered_early_eof',\n    MEDIA_INFO: 'media_info',\n    METADATA_ARRIVED: 'metadata_arrived',\n    SCRIPTDATA_ARRIVED: 'scriptdata_arrived',\n    STATISTICS_INFO: 'statistics_info'\n};\n\nexport default PlayerEvents;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is modified from dailymotion's hls.js library (hls.js/src/helper/aac.js)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass AAC {\n\n    static getSilentFrame(codec, channelCount) {\n        if (codec === 'mp4a.40.2') {\n            // handle LC-AAC\n            if (channelCount === 1) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n            } else if (channelCount === 2) {\n                return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n            } else if (channelCount === 3) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n            } else if (channelCount === 4) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n            } else if (channelCount === 5) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n            } else if (channelCount === 6) {\n                return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n            }\n        } else {\n            // handle HE-AAC (mp4a.40.5 / mp4a.40.29)\n            if (channelCount === 1) {\n                // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n            } else if (channelCount === 2) {\n                // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n            } else if (channelCount === 3) {\n                // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n                return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);\n            }\n        }\n        return null;\n    }\n\n}\n\nexport default AAC;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is derived from dailymotion's hls.js library (hls.js/src/remux/mp4-generator.js)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)\nclass MP4 {\n\n    static init() {\n        MP4.types = {\n            avc1: [], avcC: [], btrt: [], dinf: [],\n            dref: [], esds: [], ftyp: [], hdlr: [],\n            mdat: [], mdhd: [], mdia: [], mfhd: [],\n            minf: [], moof: [], moov: [], mp4a: [],\n            mvex: [], mvhd: [], sdtp: [], stbl: [],\n            stco: [], stsc: [], stsd: [], stsz: [],\n            stts: [], tfdt: [], tfhd: [], traf: [],\n            trak: [], trun: [], trex: [], tkhd: [],\n            vmhd: [], smhd: [], '.mp3': []\n        };\n\n        for (let name in MP4.types) {\n            if (MP4.types.hasOwnProperty(name)) {\n                MP4.types[name] = [\n                    name.charCodeAt(0),\n                    name.charCodeAt(1),\n                    name.charCodeAt(2),\n                    name.charCodeAt(3)\n                ];\n            }\n        }\n\n        let constants = MP4.constants = {};\n\n        constants.FTYP = new Uint8Array([\n            0x69, 0x73, 0x6F, 0x6D,  // major_brand: isom\n            0x0,  0x0,  0x0,  0x1,   // minor_version: 0x01\n            0x69, 0x73, 0x6F, 0x6D,  // isom\n            0x61, 0x76, 0x63, 0x31   // avc1\n        ]);\n\n        constants.STSD_PREFIX = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x01   // entry_count\n        ]);\n\n        constants.STTS = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00   // entry_count\n        ]);\n\n        constants.STSC = constants.STCO = constants.STTS;\n\n        constants.STSZ = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // sample_size\n            0x00, 0x00, 0x00, 0x00   // sample_count\n        ]);\n\n        constants.HDLR_VIDEO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // pre_defined\n            0x76, 0x69, 0x64, 0x65,  // handler_type: 'vide'\n            0x00, 0x00, 0x00, 0x00,  // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x56, 0x69, 0x64, 0x65,\n            0x6F, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00  // name: VideoHandler\n        ]);\n\n        constants.HDLR_AUDIO = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // pre_defined\n            0x73, 0x6F, 0x75, 0x6E,  // handler_type: 'soun'\n            0x00, 0x00, 0x00, 0x00,  // reserved: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x53, 0x6F, 0x75, 0x6E,\n            0x64, 0x48, 0x61, 0x6E,\n            0x64, 0x6C, 0x65, 0x72, 0x00  // name: SoundHandler\n        ]);\n\n        constants.DREF = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x01,  // entry_count\n            0x00, 0x00, 0x00, 0x0C,  // entry_size\n            0x75, 0x72, 0x6C, 0x20,  // type 'url '\n            0x00, 0x00, 0x00, 0x01   // version(0) + flags\n        ]);\n\n        // Sound media header\n        constants.SMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00   // balance(2) + reserved(2)\n        ]);\n\n        // video media header\n        constants.VMHD = new Uint8Array([\n            0x00, 0x00, 0x00, 0x01,  // version(0) + flags\n            0x00, 0x00,              // graphicsmode: 2 bytes\n            0x00, 0x00, 0x00, 0x00,  // opcolor: 3 * 2 bytes\n            0x00, 0x00\n        ]);\n    }\n\n    // Generate a box\n    static box(type) {\n        let size = 8;\n        let result = null;\n        let datas = Array.prototype.slice.call(arguments, 1);\n        let arrayCount = datas.length;\n\n        for (let i = 0; i < arrayCount; i++) {\n            size += datas[i].byteLength;\n        }\n\n        result = new Uint8Array(size);\n        result[0] = (size >>> 24) & 0xFF;  // size\n        result[1] = (size >>> 16) & 0xFF;\n        result[2] = (size >>>  8) & 0xFF;\n        result[3] = (size) & 0xFF;\n\n        result.set(type, 4);  // type\n\n        let offset = 8;\n        for (let i = 0; i < arrayCount; i++) {  // data body\n            result.set(datas[i], offset);\n            offset += datas[i].byteLength;\n        }\n\n        return result;\n    }\n\n    // emit ftyp & moov\n    static generateInitSegment(meta) {\n        let ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);\n        let moov = MP4.moov(meta);\n\n        let result = new Uint8Array(ftyp.byteLength + moov.byteLength);\n        result.set(ftyp, 0);\n        result.set(moov, ftyp.byteLength);\n        return result;\n    }\n\n    // Movie metadata box\n    static moov(meta) {\n        let mvhd = MP4.mvhd(meta.timescale, meta.duration);\n        let trak = MP4.trak(meta);\n        let mvex = MP4.mvex(meta);\n        return MP4.box(MP4.types.moov, mvhd, trak, mvex);\n    }\n\n    // Movie header box\n    static mvhd(timescale, duration) {\n        return MP4.box(MP4.types.mvhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (timescale >>> 24) & 0xFF,  // timescale: 4 bytes\n            (timescale >>> 16) & 0xFF,\n            (timescale >>>  8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF,   // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>>  8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x01, 0x00, 0x00,  // Preferred rate: 1.0\n            0x01, 0x00, 0x00, 0x00,  // PreferredVolume(1.0, 2bytes) + reserved(2bytes)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 + 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,  // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00,  // ----end composition matrix----\n            0x00, 0x00, 0x00, 0x00,  // ----begin pre_defined 6 * 4 bytes----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,  // ----end pre_defined 6 * 4 bytes----\n            0xFF, 0xFF, 0xFF, 0xFF   // next_track_ID\n        ]));\n    }\n\n    // Track box\n    static trak(meta) {\n        return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));\n    }\n\n    // Track header box\n    static tkhd(meta) {\n        let trackId = meta.id, duration = meta.duration;\n        let width = meta.presentWidth, height = meta.presentHeight;\n\n        return MP4.box(MP4.types.tkhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x07,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (trackId >>> 24) & 0xFF,  // track_ID: 4 bytes\n            (trackId >>> 16) & 0xFF,\n            (trackId >>>  8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 bytes\n            (duration >>> 24) & 0xFF, // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>>  8) & 0xFF,\n            (duration) & 0xFF,\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,  // layer(2bytes) + alternate_group(2bytes)\n            0x00, 0x00, 0x00, 0x00,  // volume(2bytes) + reserved(2bytes)\n            0x00, 0x01, 0x00, 0x00,  // ----begin composition matrix----\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x01, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x40, 0x00, 0x00, 0x00,  // ----end composition matrix----\n            (width >>> 8) & 0xFF,    // width and height\n            (width) & 0xFF,\n            0x00, 0x00,\n            (height >>> 8) & 0xFF,\n            (height) & 0xFF,\n            0x00, 0x00\n        ]));\n    }\n\n    // Media Box\n    static mdia(meta) {\n        return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));\n    }\n\n    // Media header box\n    static mdhd(meta) {\n        let timescale = meta.timescale;\n        let duration = meta.duration;\n        return MP4.box(MP4.types.mdhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            0x00, 0x00, 0x00, 0x00,  // creation_time\n            0x00, 0x00, 0x00, 0x00,  // modification_time\n            (timescale >>> 24) & 0xFF,  // timescale: 4 bytes\n            (timescale >>> 16) & 0xFF,\n            (timescale >>>  8) & 0xFF,\n            (timescale) & 0xFF,\n            (duration >>> 24) & 0xFF,   // duration: 4 bytes\n            (duration >>> 16) & 0xFF,\n            (duration >>>  8) & 0xFF,\n            (duration) & 0xFF,\n            0x55, 0xC4,             // language: und (undetermined)\n            0x00, 0x00              // pre_defined = 0\n        ]));\n    }\n\n    // Media handler reference box\n    static hdlr(meta) {\n        let data = null;\n        if (meta.type === 'audio') {\n            data = MP4.constants.HDLR_AUDIO;\n        } else {\n            data = MP4.constants.HDLR_VIDEO;\n        }\n        return MP4.box(MP4.types.hdlr, data);\n    }\n\n    // Media infomation box\n    static minf(meta) {\n        let xmhd = null;\n        if (meta.type === 'audio') {\n            xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);\n        } else {\n            xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);\n        }\n        return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));\n    }\n\n    // Data infomation box\n    static dinf() {\n        let result = MP4.box(MP4.types.dinf,\n            MP4.box(MP4.types.dref, MP4.constants.DREF)\n        );\n        return result;\n    }\n\n    // Sample table box\n    static stbl(meta) {\n        let result = MP4.box(MP4.types.stbl,  // type: stbl\n            MP4.stsd(meta),  // Sample Description Table\n            MP4.box(MP4.types.stts, MP4.constants.STTS),  // Time-To-Sample\n            MP4.box(MP4.types.stsc, MP4.constants.STSC),  // Sample-To-Chunk\n            MP4.box(MP4.types.stsz, MP4.constants.STSZ),  // Sample size\n            MP4.box(MP4.types.stco, MP4.constants.STCO)   // Chunk offset\n        ); \n        return result; \n    }\n\n    // Sample description box\n    static stsd(meta) {\n        if (meta.type === 'audio') {\n            if (meta.codec === 'mp3') {\n                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp3(meta));\n            }\n            // else: aac -> mp4a\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));\n        } else {\n            return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));\n        }\n    }\n\n    static mp3(meta) {\n        let channelCount = meta.channelCount;\n        let sampleRate = meta.audioSampleRate;\n\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, channelCount,      // channelCount(2)\n            0x00, 0x10,              // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            (sampleRate >>> 8) & 0xFF,  // Audio sample rate\n            (sampleRate) & 0xFF,\n            0x00, 0x00\n        ]);\n\n        return MP4.box(MP4.types['.mp3'], data);\n    }\n\n    static mp4a(meta) {\n        let channelCount = meta.channelCount;\n        let sampleRate = meta.audioSampleRate;\n\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved: 2 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, channelCount,      // channelCount(2)\n            0x00, 0x10,              // sampleSize(2)\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            (sampleRate >>> 8) & 0xFF,  // Audio sample rate\n            (sampleRate) & 0xFF,\n            0x00, 0x00\n        ]);\n\n        return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));\n    }\n\n    static esds(meta) {\n        let config = meta.config || [];\n        let configSize = config.length;\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version 0 + flags\n\n            0x03,                    // descriptor_type\n            0x17 + configSize,       // length3\n            0x00, 0x01,              // es_id\n            0x00,                    // stream_priority\n\n            0x04,                    // descriptor_type\n            0x0F + configSize,       // length\n            0x40,                    // codec: mpeg4_audio\n            0x15,                    // stream_type: Audio\n            0x00, 0x00, 0x00,        // buffer_size\n            0x00, 0x00, 0x00, 0x00,  // maxBitrate\n            0x00, 0x00, 0x00, 0x00,  // avgBitrate\n\n            0x05                     // descriptor_type\n        ].concat([\n            configSize\n        ]).concat(\n            config\n        ).concat([\n            0x06, 0x01, 0x02         // GASpecificConfig\n        ]));\n        return MP4.box(MP4.types.esds, data);\n    }\n\n    static avc1(meta) {\n        let avcc = meta.avcc;\n        let width = meta.codecWidth, height = meta.codecHeight;\n\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // reserved(4)\n            0x00, 0x00, 0x00, 0x01,  // reserved(2) + data_reference_index(2)\n            0x00, 0x00, 0x00, 0x00,  // pre_defined(2) + reserved(2)\n            0x00, 0x00, 0x00, 0x00,  // pre_defined: 3 * 4 bytes\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            (width >>> 8) & 0xFF,    // width: 2 bytes\n            (width) & 0xFF,\n            (height >>> 8) & 0xFF,   // height: 2 bytes\n            (height) & 0xFF,\n            0x00, 0x48, 0x00, 0x00,  // horizresolution: 4 bytes\n            0x00, 0x48, 0x00, 0x00,  // vertresolution: 4 bytes\n            0x00, 0x00, 0x00, 0x00,  // reserved: 4 bytes\n            0x00, 0x01,              // frame_count\n            0x0A,                    // strlen\n            0x78, 0x71, 0x71, 0x2F,  // compressorname: 32 bytes\n            0x66, 0x6C, 0x76, 0x2E,\n            0x6A, 0x73, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00,\n            0x00, 0x18,              // depth\n            0xFF, 0xFF               // pre_defined = -1\n        ]);\n        return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));\n    }\n\n    // Movie Extends box\n    static mvex(meta) {\n        return MP4.box(MP4.types.mvex, MP4.trex(meta));\n    }\n\n    // Track Extends box\n    static trex(meta) {\n        let trackId = meta.id;\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) + flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>>  8) & 0xFF,\n            (trackId) & 0xFF,\n            0x00, 0x00, 0x00, 0x01,  // default_sample_description_index\n            0x00, 0x00, 0x00, 0x00,  // default_sample_duration\n            0x00, 0x00, 0x00, 0x00,  // default_sample_size\n            0x00, 0x01, 0x00, 0x01   // default_sample_flags\n        ]);\n        return MP4.box(MP4.types.trex, data);\n    }\n\n    // Movie fragment box\n    static moof(track, baseMediaDecodeTime) {\n        return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));\n    }\n\n    static mfhd(sequenceNumber) {\n        let data = new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,\n            (sequenceNumber >>> 24) & 0xFF,  // sequence_number: int32\n            (sequenceNumber >>> 16) & 0xFF,\n            (sequenceNumber >>>  8) & 0xFF,\n            (sequenceNumber) & 0xFF\n        ]);\n        return MP4.box(MP4.types.mfhd, data);\n    }\n\n    // Track fragment box\n    static traf(track, baseMediaDecodeTime) {\n        let trackId = track.id;\n\n        // Track fragment header box\n        let tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) & flags\n            (trackId >>> 24) & 0xFF, // track_ID\n            (trackId >>> 16) & 0xFF,\n            (trackId >>>  8) & 0xFF,\n            (trackId) & 0xFF\n        ]));\n        // Track Fragment Decode Time\n        let tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([\n            0x00, 0x00, 0x00, 0x00,  // version(0) & flags\n            (baseMediaDecodeTime >>> 24) & 0xFF,  // baseMediaDecodeTime: int32\n            (baseMediaDecodeTime >>> 16) & 0xFF,\n            (baseMediaDecodeTime >>>  8) & 0xFF,\n            (baseMediaDecodeTime) & 0xFF\n        ]));\n        let sdtp = MP4.sdtp(track);\n        let trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);\n\n        return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);\n    }\n\n    // Sample Dependency Type box\n    static sdtp(track) {\n        let samples = track.samples || [];\n        let sampleCount = samples.length;\n        let data = new Uint8Array(4 + sampleCount);\n        // 0~4 bytes: version(0) & flags\n        for (let i = 0; i < sampleCount; i++) {\n            let flags = samples[i].flags;\n            data[i + 4] = (flags.isLeading << 6)    // is_leading: 2 (bit)\n                        | (flags.dependsOn << 4)    // sample_depends_on\n                        | (flags.isDependedOn << 2) // sample_is_depended_on\n                        | (flags.hasRedundancy);    // sample_has_redundancy\n        }\n        return MP4.box(MP4.types.sdtp, data);\n    }\n\n    // Track fragment run box\n    static trun(track, offset) {\n        let samples = track.samples || [];\n        let sampleCount = samples.length;\n        let dataSize = 12 + 16 * sampleCount;\n        let data = new Uint8Array(dataSize);\n        offset += 8 + dataSize;\n\n        data.set([\n            0x00, 0x00, 0x0F, 0x01,      // version(0) & flags\n            (sampleCount >>> 24) & 0xFF, // sample_count\n            (sampleCount >>> 16) & 0xFF,\n            (sampleCount >>>  8) & 0xFF,\n            (sampleCount) & 0xFF,\n            (offset >>> 24) & 0xFF,      // data_offset\n            (offset >>> 16) & 0xFF,\n            (offset >>>  8) & 0xFF,\n            (offset) & 0xFF\n        ], 0);\n\n        for (let i = 0; i < sampleCount; i++) {\n            let duration = samples[i].duration;\n            let size = samples[i].size;\n            let flags = samples[i].flags;\n            let cts = samples[i].cts;\n            data.set([\n                (duration >>> 24) & 0xFF,  // sample_duration\n                (duration >>> 16) & 0xFF,\n                (duration >>>  8) & 0xFF,\n                (duration) & 0xFF,\n                (size >>> 24) & 0xFF,      // sample_size\n                (size >>> 16) & 0xFF,\n                (size >>>  8) & 0xFF,\n                (size) & 0xFF,\n                (flags.isLeading << 2) | flags.dependsOn,  // sample_flags\n                (flags.isDependedOn << 6) | (flags.hasRedundancy << 4) | flags.isNonSync,\n                0x00, 0x00,                // sample_degradation_priority\n                (cts >>> 24) & 0xFF,       // sample_composition_time_offset\n                (cts >>> 16) & 0xFF,\n                (cts >>>  8) & 0xFF,\n                (cts) & 0xFF\n            ], 12 + 16 * i);\n        }\n        return MP4.box(MP4.types.trun, data);\n    }\n\n    static mdat(data) {\n        return MP4.box(MP4.types.mdat, data);\n    }\n\n}\n\nMP4.init();\n\nexport default MP4;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Log from '../utils/logger.js';\nimport MP4 from './mp4-generator.js';\nimport AAC from './aac-silent.js';\nimport Browser from '../utils/browser.js';\nimport {SampleInfo, MediaSegmentInfo, MediaSegmentInfoList} from '../core/media-segment-info.js';\nimport {IllegalStateException} from '../utils/exception.js';\n\n\n// Fragmented mp4 remuxer\nclass MP4Remuxer {\n\n    constructor(config) {\n        this.TAG = 'MP4Remuxer';\n\n        this._config = config;\n        this._isLive = (config.isLive === true) ? true : false;\n\n        this._dtsBase = -1;\n        this._dtsBaseInited = false;\n        this._audioDtsBase = Infinity;\n        this._videoDtsBase = Infinity;\n        this._audioNextDts = undefined;\n        this._videoNextDts = undefined;\n        this._audioStashedLastSample = null;\n        this._videoStashedLastSample = null;\n\n        this._audioMeta = null;\n        this._videoMeta = null;\n\n        this._audioSegmentInfoList = new MediaSegmentInfoList('audio');\n        this._videoSegmentInfoList = new MediaSegmentInfoList('video');\n\n        this._onInitSegment = null;\n        this._onMediaSegment = null;\n\n        // Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n        this._forceFirstIDR = (Browser.chrome &&\n                              (Browser.version.major < 50 ||\n                              (Browser.version.major === 50 && Browser.version.build < 2661))) ? true : false;\n\n        // Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking\n        // Make audio beginDts equals with video beginDts, in order to fix seek freeze\n        this._fillSilentAfterSeek = (Browser.msedge || Browser.msie);\n\n        // While only FireFox supports 'audio/mp4, codecs=\"mp3\"', use 'audio/mpeg' for chrome, safari, ...\n        this._mp3UseMpegAudio = !Browser.firefox;\n\n        this._fillAudioTimestampGap = this._config.fixAudioTimestampGap;\n    }\n\n    destroy() {\n        this._dtsBase = -1;\n        this._dtsBaseInited = false;\n        this._audioMeta = null;\n        this._videoMeta = null;\n        this._audioSegmentInfoList.clear();\n        this._audioSegmentInfoList = null;\n        this._videoSegmentInfoList.clear();\n        this._videoSegmentInfoList = null;\n        this._onInitSegment = null;\n        this._onMediaSegment = null;\n    }\n\n    bindDataSource(producer) {\n        producer.onDataAvailable = this.remux.bind(this);\n        producer.onTrackMetadata = this._onTrackMetadataReceived.bind(this);\n        return this;\n    }\n\n    /* prototype: function onInitSegment(type: string, initSegment: ArrayBuffer): void\n       InitSegment: {\n           type: string,\n           data: ArrayBuffer,\n           codec: string,\n           container: string\n       }\n    */\n    get onInitSegment() {\n        return this._onInitSegment;\n    }\n\n    set onInitSegment(callback) {\n        this._onInitSegment = callback;\n    }\n\n    /* prototype: function onMediaSegment(type: string, mediaSegment: MediaSegment): void\n       MediaSegment: {\n           type: string,\n           data: ArrayBuffer,\n           sampleCount: int32\n           info: MediaSegmentInfo\n       }\n    */\n    get onMediaSegment() {\n        return this._onMediaSegment;\n    }\n\n    set onMediaSegment(callback) {\n        this._onMediaSegment = callback;\n    }\n\n    insertDiscontinuity() {\n        this._audioNextDts = this._videoNextDts = undefined;\n    }\n\n    seek(originalDts) {\n        this._audioStashedLastSample = null;\n        this._videoStashedLastSample = null;\n        this._videoSegmentInfoList.clear();\n        this._audioSegmentInfoList.clear();\n    }\n\n    remux(audioTrack, videoTrack) {\n        if (!this._onMediaSegment) {\n            throw new IllegalStateException('MP4Remuxer: onMediaSegment callback must be specificed!');\n        }\n        if (!this._dtsBaseInited) {\n            this._calculateDtsBase(audioTrack, videoTrack);\n        }\n        this._remuxVideo(videoTrack);\n        this._remuxAudio(audioTrack);\n    }\n\n    _onTrackMetadataReceived(type, metadata) {\n        let metabox = null;\n\n        let container = 'mp4';\n        let codec = metadata.codec;\n\n        if (type === 'audio') {\n            this._audioMeta = metadata;\n            if (metadata.codec === 'mp3' && this._mp3UseMpegAudio) {\n                // 'audio/mpeg' for MP3 audio track\n                container = 'mpeg';\n                codec = '';\n                metabox = new Uint8Array();\n            } else {\n                // 'audio/mp4, codecs=\"codec\"'\n                metabox = MP4.generateInitSegment(metadata);\n            }\n        } else if (type === 'video') {\n            this._videoMeta = metadata;\n            metabox = MP4.generateInitSegment(metadata);\n        } else {\n            return;\n        }\n\n        // dispatch metabox (Initialization Segment)\n        if (!this._onInitSegment) {\n            throw new IllegalStateException('MP4Remuxer: onInitSegment callback must be specified!');\n        }\n        this._onInitSegment(type, {\n            type: type,\n            data: metabox.buffer,\n            codec: codec,\n            container: `${type}/${container}`,\n            mediaDuration: metadata.duration  // in timescale 1000 (milliseconds)\n        });\n    }\n\n    _calculateDtsBase(audioTrack, videoTrack) {\n        if (this._dtsBaseInited) {\n            return;\n        }\n\n        if (audioTrack.samples && audioTrack.samples.length) {\n            this._audioDtsBase = audioTrack.samples[0].dts;\n        }\n        if (videoTrack.samples && videoTrack.samples.length) {\n            this._videoDtsBase = videoTrack.samples[0].dts;\n        }\n\n        this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase);\n        this._dtsBaseInited = true;\n    }\n\n    flushStashedSamples() {\n        let videoSample = this._videoStashedLastSample;\n        let audioSample = this._audioStashedLastSample;\n\n        let videoTrack = {\n            type: 'video',\n            id: 1,\n            sequenceNumber: 0,\n            samples: [],\n            length: 0\n        };\n\n        if (videoSample != null) {\n            videoTrack.samples.push(videoSample);\n            videoTrack.length = videoSample.length;\n        }\n\n        let audioTrack = {\n            type: 'audio',\n            id: 2,\n            sequenceNumber: 0,\n            samples: [],\n            length: 0\n        };\n\n        if (audioSample != null) {\n            audioTrack.samples.push(audioSample);\n            audioTrack.length = audioSample.length;\n        }\n\n        this._videoStashedLastSample = null;\n        this._audioStashedLastSample = null;\n\n        this._remuxVideo(videoTrack, true);\n        this._remuxAudio(audioTrack, true);\n    }\n\n    _remuxAudio(audioTrack, force) {\n        if (this._audioMeta == null) {\n            return;\n        }\n\n        let track = audioTrack;\n        let samples = track.samples;\n        let dtsCorrection = undefined;\n        let firstDts = -1, lastDts = -1, lastPts = -1;\n        let refSampleDuration = this._audioMeta.refSampleDuration;\n\n        let mpegRawTrack = this._audioMeta.codec === 'mp3' && this._mp3UseMpegAudio;\n        let firstSegmentAfterSeek = this._dtsBaseInited && this._audioNextDts === undefined;\n\n        let insertPrefixSilentFrame = false;\n\n        if (!samples || samples.length === 0) {\n            return;\n        }\n        if (samples.length === 1 && !force) {\n            // If [sample count in current batch] === 1 && (force != true)\n            // Ignore and keep in demuxer's queue\n            return;\n        }  // else if (force === true) do remux\n\n        let offset = 0;\n        let mdatbox = null;\n        let mdatBytes = 0;\n\n        // calculate initial mdat size\n        if (mpegRawTrack) {\n            // for raw mpeg buffer\n            offset = 0;\n            mdatBytes = track.length;\n        } else {\n            // for fmp4 mdat box\n            offset = 8;  // size + type\n            mdatBytes = 8 + track.length;\n        }\n\n\n        let lastSample = null;\n\n        // Pop the lastSample and waiting for stash\n        if (samples.length > 1) {\n            lastSample = samples.pop();\n            mdatBytes -= lastSample.length;\n        }\n\n        // Insert [stashed lastSample in the previous batch] to the front\n        if (this._audioStashedLastSample != null) {\n            let sample = this._audioStashedLastSample;\n            this._audioStashedLastSample = null;\n            samples.unshift(sample);\n            mdatBytes += sample.length;\n        }\n\n        // Stash the lastSample of current batch, waiting for next batch\n        if (lastSample != null) {\n            this._audioStashedLastSample = lastSample;\n        }\n\n\n        let firstSampleOriginalDts = samples[0].dts - this._dtsBase;\n\n        // calculate dtsCorrection\n        if (this._audioNextDts) {\n            dtsCorrection = firstSampleOriginalDts - this._audioNextDts;\n        } else {  // this._audioNextDts == undefined\n            if (this._audioSegmentInfoList.isEmpty()) {\n                dtsCorrection = 0;\n                if (this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty()) {\n                    if (this._audioMeta.originalCodec !== 'mp3') {\n                        insertPrefixSilentFrame = true;\n                    }\n                }\n            } else {\n                let lastSample = this._audioSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);\n                if (lastSample != null) {\n                    let distance = (firstSampleOriginalDts - (lastSample.originalDts + lastSample.duration));\n                    if (distance <= 3) {\n                        distance = 0;\n                    }\n                    let expectedDts = lastSample.dts + lastSample.duration + distance;\n                    dtsCorrection = firstSampleOriginalDts - expectedDts;\n                } else { // lastSample == null, cannot found\n                    dtsCorrection = 0;\n                }\n            }\n        }\n\n        if (insertPrefixSilentFrame) {\n            // align audio segment beginDts to match with current video segment's beginDts\n            let firstSampleDts = firstSampleOriginalDts - dtsCorrection;\n            let videoSegment = this._videoSegmentInfoList.getLastSegmentBefore(firstSampleOriginalDts);\n            if (videoSegment != null && videoSegment.beginDts < firstSampleDts) {\n                let silentUnit = AAC.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);\n                if (silentUnit) {\n                    let dts = videoSegment.beginDts;\n                    let silentFrameDuration = firstSampleDts - videoSegment.beginDts;\n                    Log.v(this.TAG, `InsertPrefixSilentAudio: dts: ${dts}, duration: ${silentFrameDuration}`);\n                    samples.unshift({unit: silentUnit, dts: dts, pts: dts});\n                    mdatBytes += silentUnit.byteLength;\n                }  // silentUnit == null: Cannot generate, skip\n            } else {\n                insertPrefixSilentFrame = false;\n            }\n        }\n\n        let mp4Samples = [];\n\n        // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples\n        for (let i = 0; i < samples.length; i++) {\n            let sample = samples[i];\n            let unit = sample.unit;\n            let originalDts = sample.dts - this._dtsBase;\n            let dts = originalDts - dtsCorrection;\n\n            if (firstDts === -1) {\n                firstDts = dts;\n            }\n\n            let sampleDuration = 0;\n\n            if (i !== samples.length - 1) {\n                let nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;\n                sampleDuration = nextDts - dts;\n            } else {  // the last sample\n                if (lastSample != null) {  // use stashed sample's dts to calculate sample duration\n                    let nextDts = lastSample.dts - this._dtsBase - dtsCorrection;\n                    sampleDuration = nextDts - dts;\n                } else if (mp4Samples.length >= 1) {  // use second last sample duration\n                    sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                } else {  // the only one sample, use reference sample duration\n                    sampleDuration = Math.floor(refSampleDuration);\n                }\n            }\n\n            let needFillSilentFrames = false;\n            let silentFrames = null;\n\n            // Silent frame generation, if large timestamp gap detected && config.fixAudioTimestampGap\n            if (sampleDuration > refSampleDuration * 1.5 && this._audioMeta.codec !== 'mp3' && this._fillAudioTimestampGap && !Browser.safari) {\n                // We need to insert silent frames to fill timestamp gap\n                needFillSilentFrames = true;\n                let delta = Math.abs(sampleDuration - refSampleDuration);\n                let frameCount = Math.ceil(delta / refSampleDuration);\n                let currentDts = dts + refSampleDuration;  // Notice: in float\n\n                Log.w(this.TAG, 'Large audio timestamp gap detected, may cause AV sync to drift. ' +\n                                'Silent frames will be generated to avoid unsync.\\n' +\n                                `dts: ${dts + sampleDuration} ms, expected: ${dts + Math.round(refSampleDuration)} ms, ` +\n                                `delta: ${Math.round(delta)} ms, generate: ${frameCount} frames`);\n\n                let silentUnit = AAC.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);\n                if (silentUnit == null) {\n                    Log.w(this.TAG, 'Unable to generate silent frame for ' +\n                                    `${this._audioMeta.originalCodec} with ${this._audioMeta.channelCount} channels, repeat last frame`);\n                    // Repeat last frame\n                    silentUnit = unit;\n                }\n                silentFrames = [];\n\n                for (let j = 0; j < frameCount; j++) {\n                    let intDts = Math.round(currentDts);  // round to integer\n                    if (silentFrames.length > 0) {\n                        // Set previous frame sample duration\n                        let previousFrame = silentFrames[silentFrames.length - 1];\n                        previousFrame.duration = intDts - previousFrame.dts;\n                    }\n                    let frame = {\n                        dts: intDts,\n                        pts: intDts,\n                        cts: 0,\n                        unit: silentUnit,\n                        size: silentUnit.byteLength,\n                        duration: 0,  // wait for next sample\n                        originalDts: originalDts,\n                        flags: {\n                            isLeading: 0,\n                            dependsOn: 1,\n                            isDependedOn: 0,\n                            hasRedundancy: 0\n                        }\n                    };\n                    silentFrames.push(frame);\n                    mdatBytes += frame.size;\n                    currentDts += refSampleDuration;\n                }\n\n                // last frame: align end time to next frame dts\n                let lastFrame = silentFrames[silentFrames.length - 1];\n                lastFrame.duration = dts + sampleDuration - lastFrame.dts;\n\n                // silentFrames.forEach((frame) => {\n                //     Log.w(this.TAG, `SilentAudio: dts: ${frame.dts}, duration: ${frame.duration}`);\n                // });\n\n                // Set correct sample duration for current frame\n                sampleDuration = Math.round(refSampleDuration);\n            }\n\n            mp4Samples.push({\n                dts: dts,\n                pts: dts,\n                cts: 0,\n                unit: sample.unit,\n                size: sample.unit.byteLength,\n                duration: sampleDuration,\n                originalDts: originalDts,\n                flags: {\n                    isLeading: 0,\n                    dependsOn: 1,\n                    isDependedOn: 0,\n                    hasRedundancy: 0\n                }\n            });\n\n            if (needFillSilentFrames) {\n                // Silent frames should be inserted after wrong-duration frame\n                mp4Samples.push.apply(mp4Samples, silentFrames);\n            }\n        }\n\n        // allocate mdatbox\n        if (mpegRawTrack) {\n            // allocate for raw mpeg buffer\n            mdatbox = new Uint8Array(mdatBytes);\n        } else {\n            // allocate for fmp4 mdat box\n            mdatbox = new Uint8Array(mdatBytes);\n            // size field\n            mdatbox[0] = (mdatBytes >>> 24) & 0xFF;\n            mdatbox[1] = (mdatBytes >>> 16) & 0xFF;\n            mdatbox[2] = (mdatBytes >>>  8) & 0xFF;\n            mdatbox[3] = (mdatBytes) & 0xFF;\n            // type field (fourCC)\n            mdatbox.set(MP4.types.mdat, 4);\n        }\n\n        // Write samples into mdatbox\n        for (let i = 0; i < mp4Samples.length; i++) {\n            let unit = mp4Samples[i].unit;\n            mdatbox.set(unit, offset);\n            offset += unit.byteLength;\n        }\n\n        let latest = mp4Samples[mp4Samples.length - 1];\n        lastDts = latest.dts + latest.duration;\n        this._audioNextDts = lastDts;\n\n        // fill media segment info & add to info list\n        let info = new MediaSegmentInfo();\n        info.beginDts = firstDts;\n        info.endDts = lastDts;\n        info.beginPts = firstDts;\n        info.endPts = lastDts;\n        info.originalBeginDts = mp4Samples[0].originalDts;\n        info.originalEndDts = latest.originalDts + latest.duration;\n        info.firstSample = new SampleInfo(mp4Samples[0].dts,\n                                          mp4Samples[0].pts,\n                                          mp4Samples[0].duration,\n                                          mp4Samples[0].originalDts,\n                                          false);\n        info.lastSample = new SampleInfo(latest.dts,\n                                         latest.pts,\n                                         latest.duration,\n                                         latest.originalDts,\n                                         false);\n        if (!this._isLive) {\n            this._audioSegmentInfoList.append(info);\n        }\n\n        track.samples = mp4Samples;\n        track.sequenceNumber++;\n\n        let moofbox = null;\n\n        if (mpegRawTrack) {\n            // Generate empty buffer, because useless for raw mpeg\n            moofbox = new Uint8Array();\n        } else {\n            // Generate moof for fmp4 segment\n            moofbox = MP4.moof(track, firstDts);\n        }\n\n        track.samples = [];\n        track.length = 0;\n\n        let segment = {\n            type: 'audio',\n            data: this._mergeBoxes(moofbox, mdatbox).buffer,\n            sampleCount: mp4Samples.length,\n            info: info\n        };\n\n        if (mpegRawTrack && firstSegmentAfterSeek) {\n            // For MPEG audio stream in MSE, if seeking occurred, before appending new buffer\n            // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.\n            segment.timestampOffset = firstDts;\n        }\n\n        this._onMediaSegment('audio', segment);\n    }\n\n    _remuxVideo(videoTrack, force) {\n        if (this._videoMeta == null) {\n            return;\n        }\n\n        let track = videoTrack;\n        let samples = track.samples;\n        let dtsCorrection = undefined;\n        let firstDts = -1, lastDts = -1;\n        let firstPts = -1, lastPts = -1;\n\n        if (!samples || samples.length === 0) {\n            return;\n        }\n        if (samples.length === 1 && !force) {\n            // If [sample count in current batch] === 1 && (force != true)\n            // Ignore and keep in demuxer's queue\n            return;\n        }  // else if (force === true) do remux\n\n        let offset = 8;\n        let mdatbox = null;\n        let mdatBytes = 8 + videoTrack.length;\n\n\n        let lastSample = null;\n\n        // Pop the lastSample and waiting for stash\n        if (samples.length > 1) {\n            lastSample = samples.pop();\n            mdatBytes -= lastSample.length;\n        }\n\n        // Insert [stashed lastSample in the previous batch] to the front\n        if (this._videoStashedLastSample != null) {\n            let sample = this._videoStashedLastSample;\n            this._videoStashedLastSample = null;\n            samples.unshift(sample);\n            mdatBytes += sample.length;\n        }\n\n        // Stash the lastSample of current batch, waiting for next batch\n        if (lastSample != null) {\n            this._videoStashedLastSample = lastSample;\n        }\n\n\n        let firstSampleOriginalDts = samples[0].dts - this._dtsBase;\n\n        // calculate dtsCorrection\n        if (this._videoNextDts) {\n            dtsCorrection = firstSampleOriginalDts - this._videoNextDts;\n        } else {  // this._videoNextDts == undefined\n            if (this._videoSegmentInfoList.isEmpty()) {\n                dtsCorrection = 0;\n            } else {\n                let lastSample = this._videoSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);\n                if (lastSample != null) {\n                    let distance = (firstSampleOriginalDts - (lastSample.originalDts + lastSample.duration));\n                    if (distance <= 3) {\n                        distance = 0;\n                    }\n                    let expectedDts = lastSample.dts + lastSample.duration + distance;\n                    dtsCorrection = firstSampleOriginalDts - expectedDts;\n                } else { // lastSample == null, cannot found\n                    dtsCorrection = 0;\n                }\n            }\n        }\n\n        let info = new MediaSegmentInfo();\n        let mp4Samples = [];\n\n        // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples\n        for (let i = 0; i < samples.length; i++) {\n            let sample = samples[i];\n            let originalDts = sample.dts - this._dtsBase;\n            let isKeyframe = sample.isKeyframe;\n            let dts = originalDts - dtsCorrection;\n            let cts = sample.cts;\n            let pts = dts + cts;\n\n            if (firstDts === -1) {\n                firstDts = dts;\n                firstPts = pts;\n            }\n\n            let sampleDuration = 0;\n\n            if (i !== samples.length - 1) {\n                let nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;\n                sampleDuration = nextDts - dts;\n            } else {  // the last sample\n                if (lastSample != null) {  // use stashed sample's dts to calculate sample duration\n                    let nextDts = lastSample.dts - this._dtsBase - dtsCorrection;\n                    sampleDuration = nextDts - dts;\n                } else if (mp4Samples.length >= 1) {  // use second last sample duration\n                    sampleDuration = mp4Samples[mp4Samples.length - 1].duration;\n                } else {  // the only one sample, use reference sample duration\n                    sampleDuration = Math.floor(this._videoMeta.refSampleDuration);\n                }\n            }\n\n            if (isKeyframe) {\n                let syncPoint = new SampleInfo(dts, pts, sampleDuration, sample.dts, true);\n                syncPoint.fileposition = sample.fileposition;\n                info.appendSyncPoint(syncPoint);\n            }\n\n            mp4Samples.push({\n                dts: dts,\n                pts: pts,\n                cts: cts,\n                units: sample.units,\n                size: sample.length,\n                isKeyframe: isKeyframe,\n                duration: sampleDuration,\n                originalDts: originalDts,\n                flags: {\n                    isLeading: 0,\n                    dependsOn: isKeyframe ? 2 : 1,\n                    isDependedOn: isKeyframe ? 1 : 0,\n                    hasRedundancy: 0,\n                    isNonSync: isKeyframe ? 0 : 1\n                }\n            });\n        }\n\n        // allocate mdatbox\n        mdatbox = new Uint8Array(mdatBytes);\n        mdatbox[0] = (mdatBytes >>> 24) & 0xFF;\n        mdatbox[1] = (mdatBytes >>> 16) & 0xFF;\n        mdatbox[2] = (mdatBytes >>>  8) & 0xFF;\n        mdatbox[3] = (mdatBytes) & 0xFF;\n        mdatbox.set(MP4.types.mdat, 4);\n\n        // Write samples into mdatbox\n        for (let i = 0; i < mp4Samples.length; i++) {\n            let units = mp4Samples[i].units;\n            while (units.length) {\n                let unit = units.shift();\n                let data = unit.data;\n                mdatbox.set(data, offset);\n                offset += data.byteLength;\n            }\n        }\n\n        let latest = mp4Samples[mp4Samples.length - 1];\n        lastDts = latest.dts + latest.duration;\n        lastPts = latest.pts + latest.duration;\n        this._videoNextDts = lastDts;\n\n        // fill media segment info & add to info list\n        info.beginDts = firstDts;\n        info.endDts = lastDts;\n        info.beginPts = firstPts;\n        info.endPts = lastPts;\n        info.originalBeginDts = mp4Samples[0].originalDts;\n        info.originalEndDts = latest.originalDts + latest.duration;\n        info.firstSample = new SampleInfo(mp4Samples[0].dts,\n                                          mp4Samples[0].pts,\n                                          mp4Samples[0].duration,\n                                          mp4Samples[0].originalDts,\n                                          mp4Samples[0].isKeyframe);\n        info.lastSample = new SampleInfo(latest.dts,\n                                         latest.pts,\n                                         latest.duration,\n                                         latest.originalDts,\n                                         latest.isKeyframe);\n        if (!this._isLive) {\n            this._videoSegmentInfoList.append(info);\n        }\n\n        track.samples = mp4Samples;\n        track.sequenceNumber++;\n\n        // workaround for chrome < 50: force first sample as a random access point\n        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412\n        if (this._forceFirstIDR) {\n            let flags = mp4Samples[0].flags;\n            flags.dependsOn = 2;\n            flags.isNonSync = 0;\n        }\n\n        let moofbox = MP4.moof(track, firstDts);\n        track.samples = [];\n        track.length = 0;\n\n        this._onMediaSegment('video', {\n            type: 'video',\n            data: this._mergeBoxes(moofbox, mdatbox).buffer,\n            sampleCount: mp4Samples.length,\n            info: info\n        });\n    }\n\n    _mergeBoxes(moof, mdat) {\n        let result = new Uint8Array(moof.byteLength + mdat.byteLength);\n        result.set(moof, 0);\n        result.set(mdat, moof.byteLength);\n        return result;\n    }\n\n}\n\nexport default MP4Remuxer;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet Browser = {};\n\nfunction detect() {\n    // modified from jquery-browser-plugin\n\n    let ua = self.navigator.userAgent.toLowerCase();\n\n    let match = /(edge)\\/([\\w.]+)/.exec(ua) ||\n        /(opr)[\\/]([\\w.]+)/.exec(ua) ||\n        /(chrome)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(iemobile)[\\/]([\\w.]+)/.exec(ua) ||\n        /(version)(applewebkit)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(webkit)[ \\/]([\\w.]+).*(version)[ \\/]([\\w.]+).*(safari)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(webkit)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(ua) ||\n        /(msie) ([\\w.]+)/.exec(ua) ||\n        ua.indexOf('trident') >= 0 && /(rv)(?::| )([\\w.]+)/.exec(ua) ||\n        ua.indexOf('compatible') < 0 && /(firefox)[ \\/]([\\w.]+)/.exec(ua) ||\n        [];\n\n    let platform_match = /(ipad)/.exec(ua) ||\n        /(ipod)/.exec(ua) ||\n        /(windows phone)/.exec(ua) ||\n        /(iphone)/.exec(ua) ||\n        /(kindle)/.exec(ua) ||\n        /(android)/.exec(ua) ||\n        /(windows)/.exec(ua) ||\n        /(mac)/.exec(ua) ||\n        /(linux)/.exec(ua) ||\n        /(cros)/.exec(ua) ||\n        [];\n\n    let matched = {\n        browser: match[5] || match[3] || match[1] || '',\n        version: match[2] || match[4] || '0',\n        majorVersion: match[4] || match[2] || '0',\n        platform: platform_match[0] || ''\n    };\n\n    let browser = {};\n    if (matched.browser) {\n        browser[matched.browser] = true;\n\n        let versionArray = matched.majorVersion.split('.');\n        browser.version = {\n            major: parseInt(matched.majorVersion, 10),\n            string: matched.version\n        };\n        if (versionArray.length > 1) {\n            browser.version.minor = parseInt(versionArray[1], 10);\n        }\n        if (versionArray.length > 2) {\n            browser.version.build = parseInt(versionArray[2], 10);\n        }\n    }\n\n    if (matched.platform) {\n        browser[matched.platform] = true;\n    }\n\n    if (browser.chrome || browser.opr || browser.safari) {\n        browser.webkit = true;\n    }\n\n    // MSIE. IE11 has 'rv' identifer\n    if (browser.rv || browser.iemobile) {\n        if (browser.rv) {\n            delete browser.rv;\n        }\n        let msie = 'msie';\n        matched.browser = msie;\n        browser[msie] = true;\n    }\n\n    // Microsoft Edge\n    if (browser.edge) {\n        delete browser.edge;\n        let msedge = 'msedge';\n        matched.browser = msedge;\n        browser[msedge] = true;\n    }\n\n    // Opera 15+\n    if (browser.opr) {\n        let opera = 'opera';\n        matched.browser = opera;\n        browser[opera] = true;\n    }\n\n    // Stock android browsers are marked as Safari\n    if (browser.safari && browser.android) {\n        let android = 'android';\n        matched.browser = android;\n        browser[android] = true;\n    }\n\n    browser.name = matched.browser;\n    browser.platform = matched.platform;\n\n    for (let key in Browser) {\n        if (Browser.hasOwnProperty(key)) {\n            delete Browser[key];\n        }\n    }\n    Object.assign(Browser, browser);\n}\n\ndetect();\n\nexport default Browser;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class RuntimeException {\n\n    constructor(message) {\n        this._message = message;\n    }\n\n    get name() {\n        return 'RuntimeException';\n    }\n\n    get message() {\n        return this._message;\n    }\n\n    toString() {\n        return this.name + ': ' + this.message;\n    }\n\n}\n\nexport class IllegalStateException extends RuntimeException {\n\n    constructor(message) {\n        super(message);\n    }\n\n    get name() {\n        return 'IllegalStateException';\n    }\n\n}\n\nexport class InvalidArgumentException extends RuntimeException {\n\n    constructor(message) {\n        super(message);\n    }\n\n    get name() {\n        return 'InvalidArgumentException';\n    }\n\n}\n\nexport class NotImplementedException extends RuntimeException {\n\n    constructor(message) {\n        super(message);\n    }\n\n    get name() {\n        return 'NotImplementedException';\n    }\n\n}\n","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\n\nclass Log {\n\n    static e(tag, msg) {\n        if (!tag || Log.FORCE_GLOBAL_TAG)\n            tag = Log.GLOBAL_TAG;\n\n        let str = `[${tag}] > ${msg}`;\n\n        if (Log.ENABLE_CALLBACK) {\n            Log.emitter.emit('log', 'error', str);\n        }\n\n        if (!Log.ENABLE_ERROR) {\n            return;\n        }\n\n        if (console.error) {\n            console.error(str);\n        } else if (console.warn) {\n            console.warn(str);\n        } else {\n            console.log(str);\n        }\n    }\n\n    static i(tag, msg) {\n        if (!tag || Log.FORCE_GLOBAL_TAG)\n            tag = Log.GLOBAL_TAG;\n\n        let str = `[${tag}] > ${msg}`;\n\n        if (Log.ENABLE_CALLBACK) {\n            Log.emitter.emit('log', 'info', str);\n        }\n\n        if (!Log.ENABLE_INFO) {\n            return;\n        }\n\n        if (console.info) {\n            console.info(str);\n        } else {\n            console.log(str);\n        }\n    }\n\n    static w(tag, msg) {\n        if (!tag || Log.FORCE_GLOBAL_TAG)\n            tag = Log.GLOBAL_TAG;\n\n        let str = `[${tag}] > ${msg}`;\n\n        if (Log.ENABLE_CALLBACK) {\n            Log.emitter.emit('log', 'warn', str);\n        }\n\n        if (!Log.ENABLE_WARN) {\n            return;\n        }\n\n        if (console.warn) {\n            console.warn(str);\n        } else {\n            console.log(str);\n        }\n    }\n\n    static d(tag, msg) {\n        if (!tag || Log.FORCE_GLOBAL_TAG)\n            tag = Log.GLOBAL_TAG;\n\n        let str = `[${tag}] > ${msg}`;\n\n        if (Log.ENABLE_CALLBACK) {\n            Log.emitter.emit('log', 'debug', str);\n        }\n\n        if (!Log.ENABLE_DEBUG) {\n            return;\n        }\n\n        if (console.debug) {\n            console.debug(str);\n        } else {\n            console.log(str);\n        }\n    }\n\n    static v(tag, msg) {\n        if (!tag || Log.FORCE_GLOBAL_TAG)\n            tag = Log.GLOBAL_TAG;\n\n        let str = `[${tag}] > ${msg}`;\n\n        if (Log.ENABLE_CALLBACK) {\n            Log.emitter.emit('log', 'verbose', str);\n        }\n\n        if (!Log.ENABLE_VERBOSE) {\n            return;\n        }\n\n        console.log(str);\n    }\n\n}\n\nLog.GLOBAL_TAG = 'flv.js';\nLog.FORCE_GLOBAL_TAG = false;\nLog.ENABLE_ERROR = true;\nLog.ENABLE_INFO = true;\nLog.ENABLE_WARN = true;\nLog.ENABLE_DEBUG = true;\nLog.ENABLE_VERBOSE = true;\n\nLog.ENABLE_CALLBACK = false;\n\nLog.emitter = new EventEmitter();\n\nexport default Log;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport Log from './logger.js';\n\nclass LoggingControl {\n\n    static get forceGlobalTag() {\n        return Log.FORCE_GLOBAL_TAG;\n    }\n\n    static set forceGlobalTag(enable) {\n        Log.FORCE_GLOBAL_TAG = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get globalTag() {\n        return Log.GLOBAL_TAG;\n    }\n\n    static set globalTag(tag) {\n        Log.GLOBAL_TAG = tag;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableAll() {\n        return Log.ENABLE_VERBOSE\n            && Log.ENABLE_DEBUG\n            && Log.ENABLE_INFO\n            && Log.ENABLE_WARN\n            && Log.ENABLE_ERROR;\n    }\n\n    static set enableAll(enable) {\n        Log.ENABLE_VERBOSE = enable;\n        Log.ENABLE_DEBUG = enable;\n        Log.ENABLE_INFO = enable;\n        Log.ENABLE_WARN = enable;\n        Log.ENABLE_ERROR = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableDebug() {\n        return Log.ENABLE_DEBUG;\n    }\n\n    static set enableDebug(enable) {\n        Log.ENABLE_DEBUG = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableVerbose() {\n        return Log.ENABLE_VERBOSE;\n    }\n\n    static set enableVerbose(enable) {\n        Log.ENABLE_VERBOSE = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableInfo() {\n        return Log.ENABLE_INFO;\n    }\n\n    static set enableInfo(enable) {\n        Log.ENABLE_INFO = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableWarn() {\n        return Log.ENABLE_WARN;\n    }\n\n    static set enableWarn(enable) {\n        Log.ENABLE_WARN = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static get enableError() {\n        return Log.ENABLE_ERROR;\n    }\n\n    static set enableError(enable) {\n        Log.ENABLE_ERROR = enable;\n        LoggingControl._notifyChange();\n    }\n\n    static getConfig() {\n        return {\n            globalTag: Log.GLOBAL_TAG,\n            forceGlobalTag: Log.FORCE_GLOBAL_TAG,\n            enableVerbose: Log.ENABLE_VERBOSE,\n            enableDebug: Log.ENABLE_DEBUG,\n            enableInfo: Log.ENABLE_INFO,\n            enableWarn: Log.ENABLE_WARN,\n            enableError: Log.ENABLE_ERROR,\n            enableCallback: Log.ENABLE_CALLBACK\n        };\n    }\n\n    static applyConfig(config) {\n        Log.GLOBAL_TAG = config.globalTag;\n        Log.FORCE_GLOBAL_TAG = config.forceGlobalTag;\n        Log.ENABLE_VERBOSE = config.enableVerbose;\n        Log.ENABLE_DEBUG = config.enableDebug;\n        Log.ENABLE_INFO = config.enableInfo;\n        Log.ENABLE_WARN = config.enableWarn;\n        Log.ENABLE_ERROR = config.enableError;\n        Log.ENABLE_CALLBACK = config.enableCallback;\n    }\n\n    static _notifyChange() {\n        let emitter = LoggingControl.emitter;\n\n        if (emitter.listenerCount('change') > 0) {\n            let config = LoggingControl.getConfig();\n            emitter.emit('change', config);\n        }\n    }\n\n    static registerListener(listener) {\n        LoggingControl.emitter.addListener('change', listener);\n    }\n\n    static removeListener(listener) {\n        LoggingControl.emitter.removeListener('change', listener);\n    }\n\n    static addLogListener(listener) {\n        Log.emitter.addListener('log', listener);\n        if (Log.emitter.listenerCount('log') > 0) {\n            Log.ENABLE_CALLBACK = true;\n            LoggingControl._notifyChange();\n        }\n    }\n\n    static removeLogListener(listener) {\n        Log.emitter.removeListener('log', listener);\n        if (Log.emitter.listenerCount('log') === 0) {\n            Log.ENABLE_CALLBACK = false;\n            LoggingControl._notifyChange();\n        }\n    }\n\n}\n\nLoggingControl.emitter = new EventEmitter();\n\nexport default LoggingControl;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass Polyfill {\n\n    static install() {\n        // ES6 Object.setPrototypeOf\n        Object.setPrototypeOf = Object.setPrototypeOf || function (obj, proto) {\n            obj.__proto__ = proto;\n            return obj;\n        };\n\n        // ES6 Object.assign\n        Object.assign = Object.assign || function (target) {\n            if (target === undefined || target === null) {\n                throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            let output = Object(target);\n            for (let i = 1; i < arguments.length; i++) {\n                let source = arguments[i];\n                if (source !== undefined && source !== null) {\n                    for (let key in source) {\n                        if (source.hasOwnProperty(key)) {\n                            output[key] = source[key];\n                        }\n                    }\n                }\n            }\n            return output;\n        };\n\n        // ES6 Promise (missing support in IE11)\n        if (typeof self.Promise !== 'function') {\n            require('es6-promise').polyfill();\n        }\n    }\n\n}\n\nPolyfill.install();\n\nexport default Polyfill;","/*\n * Copyright (C) 2016 Bilibili. All Rights Reserved.\n *\n * This file is derived from C++ project libWinTF8 (https://github.com/m13253/libWinTF8)\n * @author zheng qian <xqq@xqq.im>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction checkContinuation(uint8array, start, checkLength) {\n    let array = uint8array;\n    if (start + checkLength < array.length) {\n        while (checkLength--) {\n            if ((array[++start] & 0xC0) !== 0x80)\n                return false;\n        }\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction decodeUTF8(uint8array) {\n    let out = [];\n    let input = uint8array;\n    let i = 0;\n    let length = uint8array.length;\n\n    while (i < length) {\n        if (input[i] < 0x80) {\n            out.push(String.fromCharCode(input[i]));\n            ++i;\n            continue;\n        } else if (input[i] < 0xC0) {\n            // fallthrough\n        } else if (input[i] < 0xE0) {\n            if (checkContinuation(input, i, 1)) {\n                let ucs4 = (input[i] & 0x1F) << 6 | (input[i + 1] & 0x3F);\n                if (ucs4 >= 0x80) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 2;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF0) {\n            if (checkContinuation(input, i, 2)) {\n                let ucs4 = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;\n                if (ucs4 >= 0x800 && (ucs4 & 0xF800) !== 0xD800) {\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\n                    i += 3;\n                    continue;\n                }\n            }\n        } else if (input[i] < 0xF8) {\n            if (checkContinuation(input, i, 3)) {\n                let ucs4 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12\n                         | (input[i + 2] & 0x3F) << 6 | (input[i + 3] & 0x3F);\n                if (ucs4 > 0x10000 && ucs4 < 0x110000) {\n                    ucs4 -= 0x10000;\n                    out.push(String.fromCharCode((ucs4 >>> 10) | 0xD800));\n                    out.push(String.fromCharCode((ucs4 & 0x3FF) | 0xDC00));\n                    i += 4;\n                    continue;\n                }\n            }\n        }\n        out.push(String.fromCharCode(0xFFFD));\n        ++i;\n    }\n\n    return out.join('');\n}\n\nexport default decodeUTF8;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}